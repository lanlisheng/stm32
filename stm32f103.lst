
stm32f103.elf:     file format elf32-littlearm
stm32f103.elf
architecture: armv7, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080004ad

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x0000295c memsz 0x0000295c flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x0800295c align 2**16
         filesz 0x00000460 memsz 0x00000460 flags rw-
    LOAD off    0x00000460 vaddr 0x20000460 paddr 0x20000460 align 2**16
         filesz 0x00000000 memsz 0x00004ba0 flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028fc  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .initcalldata.init 00000000  080028fc  080028fc  00020460  2**0
                  CONTENTS
  2 .initcallmodule.init 00000000  080028fc  080028fc  00020460  2**0
                  CONTENTS
  3 .loopermodule.looper 00000000  080028fc  080028fc  00020460  2**0
                  CONTENTS
  4 .rodata       0000004c  080028fc  080028fc  000128fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  08002948  08002948  00012948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000008  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002958  08002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000460  20000000  0800295c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020460  2**0
                  CONTENTS
 10 .bss          00000044  20000460  20000460  00020460  2**2
                  ALLOC
 11 .heap         00004b5c  200004a4  200004a4  00020460  2**0
                  ALLOC
 12 .ARM.attributes 0000002b  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000588c  00000000  00000000  0002048b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00006fc1  00000000  00000000  00025d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000015de  00000000  00000000  0002ccd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009a8  00000000  00000000  0002e2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00002aa9  00000000  00000000  0002ec60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000958  00000000  00000000  00031710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00004837  00000000  00000000  00032068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000049  00000000  00000000  0003689f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000014b4  00000000  00000000  000368e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
08000000 l    d  .text	00000000 .text
080028fc l    d  .initcalldata.init	00000000 .initcalldata.init
080028fc l    d  .initcallmodule.init	00000000 .initcallmodule.init
080028fc l    d  .loopermodule.looper	00000000 .loopermodule.looper
080028fc l    d  .rodata	00000000 .rodata
08002948 l    d  .ARM	00000000 .ARM
08002950 l    d  .init_array	00000000 .init_array
08002958 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000460 l    d  .bss	00000000 .bss
200004a4 l    d  .heap	00000000 .heap
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup_stm32f10x_MD.o
f108f85f l       *ABS*	00000000 BootRAM
080004b8 l       .text	00000000 LoopCopyDataInit
080004b0 l       .text	00000000 CopyDataInit
080004cc l       .text	00000000 LoopFillZerobss
080004c6 l       .text	00000000 FillZerobss
080004f0 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtfastmath.c
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtstuff.c
080028fc l     O .rodata	00000000 all_implied_fbits
080028e0 l     O .text	00000000 __EH_FRAME_BEGIN__
0800010c l     F .text	00000000 __do_global_dtors_aux
20000460 l       .bss	00000001 completed.1
08002958 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000130 l     F .text	00000000 frame_dummy
20000464 l       .bss	00000018 object.0
08002954 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 crt0.o
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
20000008 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 __call_atexit.c
080002e8 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 core_cm3.c
00000000 l    df *ABS*	00000000 system_stm32f10x.c
00000000 l    df *ABS*	00000000 stm32f10x_it.c
00000000 l    df *ABS*	00000000 misc.c
00000000 l    df *ABS*	00000000 stm32f10x_adc.c
00000000 l    df *ABS*	00000000 stm32f10x_dma.c
00000000 l    df *ABS*	00000000 stm32f10x_exti.c
00000000 l    df *ABS*	00000000 stm32f10x_flash.c
00000000 l    df *ABS*	00000000 stm32f10x_gpio.c
00000000 l    df *ABS*	00000000 stm32f10x_tim.c
08001508 l     F .text	00000070 TI1_Config
08001578 l     F .text	00000074 TI2_Config
00000000 l    df *ABS*	00000000 stm32f10x_usart.c
00000000 l    df *ABS*	00000000 stm32f10x_rcc.c
2000044c l     O .data	00000004 ADCPrescTable
20000450 l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 crtstuff.c
08002920 l     O .rodata	00000000 all_implied_fbits
080028e0 l     O .text	00000000 __FRAME_END__
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 
0800295c l       .fini_array	00000000 __fini_array_end
08002958 l       .fini_array	00000000 __fini_array_start
08002958 l       .init_array	00000000 __init_array_end
08002950 l       .init_array	00000000 __preinit_array_end
08002950 l       .init_array	00000000 __init_array_start
08002950 l       .init_array	00000000 __preinit_array_start
08001a56 g     F .text	00000012 TIM_TimeBaseStructInit
080004f0  w    F .text	00000002 EXTI2_IRQHandler
08000520 g     F .text	00000006 __set_PRIMASK
080023e4 g     F .text	00000012 USART_SetGuardTime
080025cc g     F .text	0000000c RCC_HSICmd
08001c02 g     F .text	00000014 TIM_ForcedOC2Config
08000de8 g     F .text	00000018 FLASH_Unlock
080025ec g     F .text	0000000c RCC_PLLCmd
08001448 g     F .text	0000001c GPIO_EventOutputConfig
080006d0 g     F .text	00000002 DebugMon_Handler
08001f14 g     F .text	00000004 TIM_SetCompare2
08000c4a g     F .text	00000016 DMA_Cmd
08001c52 g     F .text	00000018 TIM_SelectCOM
08000e24 g     F .text	0000000c FLASH_GetWriteProtectionOptionByte
0800284c g     F .text	0000000c RCC_ClearITPendingBit
0800118c g     F .text	00000094 FLASH_ReadOutProtection
08001410 g     F .text	0000000c GPIO_ReadOutputDataBit
08001dee g     F .text	0000001c TIM_CCxCmd
08001fc2 g     F .text	0000001a TIM_SetIC4Prescaler
20000484 g     O .bss	00000001 __lock___atexit_recursive_mutex
08000cac g     F .text	00000004 DMA_GetITStatus
08001c82 g     F .text	00000018 TIM_CCPreloadControl
080004f0  w    F .text	00000002 TIM1_CC_IRQHandler
080006c6 g     F .text	00000002 HardFault_Handler
08001008 g     F .text	00000058 FLASH_ProgramWord
0800086a g     F .text	00000012 ADC_DMACmd
08000526 g     F .text	00000006 __get_FAULTMASK
08001c9a g     F .text	00000010 TIM_OC1PreloadConfig
080006d4 g     F .text	00000010 SysTick_Handler
080008a0 g     F .text	0000000a ADC_StartCalibration
0800053e g     F .text	00000004 __REV
080027f4 g     F .text	0000000c RCC_MCOConfig
2000047c g     O .bss	00000001 __lock___arc4random_mutex
08000704 g     F .text	00000058 NVIC_Init
080004f0  w    F .text	00000002 PVD_IRQHandler
08000ae2 g     F .text	00000016 ADC_GetITStatus
0800295c g       *ABS*	00000000 _sidata
080006d2 g     F .text	00000002 PendSV_Handler
080006c4 g     F .text	00000002 NMI_Handler
08002950 g       .ARM	00000000 __exidx_end
080004f0  w    F .text	00000002 EXTI3_IRQHandler
08001b7c g     F .text	00000012 TIM_ETRClockMode2Config
08002658 g     F .text	00000018 RCC_ITConfig
20000430 g     O .data	00000004 __atexit_recursive_mutex
08001d7a g     F .text	00000010 TIM_OC1NPolarityConfig
08000400 g     F .text	00000002 __retarget_lock_close
08001bf2 g     F .text	00000010 TIM_ForcedOC1Config
08001060 g     F .text	00000038 FLASH_ProgramHalfWord
08001af0 g     F .text	00000004 TIM_DMACmd
08001b64 g     F .text	00000018 TIM_ETRClockMode1Config
08000576 g     F .text	00000006 __STREXW
08001fac g     F .text	00000016 TIM_SetIC3Prescaler
08002408 g     F .text	00000018 USART_SmartCardCmd
080024ae g     F .text	0000000c USART_GetFlagStatus
08001d4a g     F .text	00000010 TIM_ClearOC3Ref
08000560 g     F .text	00000006 __LDREXW
080028fc g       .text	00000000 _etext
200004a4 g       .heap	00000000 _sheap
20000460 g       .bss	00000000 _sbss
08000ad0 g     F .text	0000000c ADC_GetFlagStatus
080025f8 g     F .text	00000014 RCC_SYSCLKConfig
0800097c g     F .text	00000012 ADC_ExternalTrigConvCmd
08000bf4 g     F .text	0000003c DMA_Init
08000f08 g     F .text	00000040 FLASH_ErasePage
08000cb4 g     F .text	0000001c EXTI_DeInit
08002588 g     F .text	00000030 RCC_WaitForHSEStartUp
08002356 g     F .text	00000016 USART_SetAddress
08000c74 g     F .text	00000006 DMA_GetCurrDataCounter
08001464 g     F .text	0000000c GPIO_EventOutputCmd
080023f6 g     F .text	00000012 USART_SetPrescaler
08000db8 g     F .text	00000018 FLASH_HalfCycleAccessCmd
080009b2 g     F .text	00000012 ADC_InjectedDiscModeCmd
080027dc g     F .text	0000000c RCC_BackupResetCmd
08002468 g     F .text	00000018 USART_OneBitMethodCmd
08001ab6 g     F .text	0000001c TIM_CtrlPWMOutputs
0800075c g     F .text	00000014 NVIC_SetVectorTable
08000858 g     F .text	00000012 ADC_Cmd
08000e68 g     F .text	00000020 FLASH_GetFlagStatus
08000aaa g     F .text	0000000c ADC_AnalogWatchdogSingleChannelConfig
08001470 g     F .text	00000060 GPIO_PinRemapConfig
080008cc g     F .text	00000010 ADC_DiscModeChannelCountConfig
08000e40 g     F .text	00000010 FLASH_GetPrefetchBufferStatus
080027e8 g     F .text	0000000c RCC_ClockSecuritySystemCmd
080004f0  w    F .text	00000002 EXTI0_IRQHandler
080004f0  w    F .text	00000002 I2C2_EV_IRQHandler
08002828 g     F .text	00000010 RCC_ClearFlag
08001a9e g     F .text	00000018 TIM_Cmd
08001cce g     F .text	00000014 TIM_OC4PreloadConfig
20000444 g     O .data	00000004 SystemCoreClock
08000af8 g     F .text	00000008 ADC_ClearITPendingBit
08000f48 g     F .text	0000003c FLASH_EraseAllPages
0800054a g     F .text	00000006 __RBIT
080023d0 g     F .text	00000008 USART_ReceiveData
08002550 g     F .text	00000038 RCC_HSEConfig
08002154 g     F .text	00000008 TIM_ClearFlag
08002172 g     F .text	00000008 TIM_ClearITPendingBit
080006cc g     F .text	00000002 UsageFault_Handler
0800052c g     F .text	00000006 __set_FAULTMASK
08000c70 g     F .text	00000004 DMA_SetCurrDataCounter
0800213c g     F .text	00000006 TIM_GetCounter
0800277c g     F .text	00000018 RCC_APB2PeriphClockCmd
0800212e g     F .text	00000006 TIM_GetCapture3
080004f0  w    F .text	00000002 ADC1_2_IRQHandler
0800134e g     F .text	000000a2 GPIO_Init
080025d8 g     F .text	00000014 RCC_PLLConfig
20000460 g       .bss	00000000 __bss_start__
0800267c g     F .text	00000014 RCC_ADCCLKConfig
20000000 g     O .data	00000000 .hidden __dso_handle
20000000 g       .data	00000000 _sdata
080004f0  w    F .text	00000002 SPI1_IRQHandler
0800088e g     F .text	0000000a ADC_ResetCalibration
080022fc g     F .text	00000018 USART_Cmd
08000a94 g     F .text	00000010 ADC_AnalogWatchdogCmd
08001338 g     F .text	00000016 GPIO_AFIODeInit
08002122 g     F .text	00000006 TIM_GetCapture1
08002496 g     F .text	00000018 USART_IrDACmd
08000788 g     F .text	00000016 SysTick_CLKSourceConfig
080004f0  w    F .text	00000002 TAMPER_IRQHandler
08001434 g     F .text	00000004 GPIO_Write
08000e18 g     F .text	0000000c FLASH_GetUserOptionByte
0800141c g     F .text	00000006 GPIO_ReadOutputData
08001950 g     F .text	0000007c TIM_OC3Init
08002690 g     F .text	00000028 RCC_LSEConfig
08002500 g     F .text	0000000e USART_ClearITPendingBit
080026d4 g     F .text	0000000c RCC_RTCCLKCmd
080009fc g     F .text	00000058 ADC_InjectedChannelConfig
08000cb0 g     F .text	00000004 DMA_ClearITPendingBit
080015ec g     F .text	000001c8 TIM_DeInit
08002794 g     F .text	00000018 RCC_APB1PeriphClockCmd
08001220 g     F .text	0000005c FLASH_UserOptionByteConfig
08002838 g     F .text	00000014 RCC_GetITStatus
08002948 g       .ARM	00000000 __exidx_start
2000048c g     O .bss	00000001 __lock___env_recursive_mutex
08000532 g     F .text	00000006 __get_CONTROL
20000498 g     O .bss	00000001 __lock___sinit_recursive_mutex
08002944 g     O .rodata	00000004 _global_impure_ptr
080001fc g     F .text	00000048 __libc_init_array
08002148 g     F .text	0000000c TIM_GetFlagStatus
08002764 g     F .text	00000018 RCC_AHBPeriphClockCmd
080004f0  w    F .text	00000002 DMA1_Channel4_IRQHandler
080008ee g     F .text	0000008e ADC_RegularChannelConfig
08000154 g     F .text	00000000 _mainCRTStartup
08001d06 g     F .text	00000010 TIM_OC3FastConfig
08000f84 g     F .text	00000004 FLASH_EraseAllBank1Pages
0800098e g     F .text	00000006 ADC_GetConversionValue
08001c6a g     F .text	00000018 TIM_SelectCCDMA
08000e50 g     F .text	00000018 FLASH_ITConfig
08002450 g     F .text	00000018 USART_OverSampling8Cmd
080006e4 g     F .text	0000000c SMART_Get_SystemTime
080028e4 g     F .text	00000000 _init
08000c30 g     F .text	0000001a DMA_StructInit
0800210c g     F .text	00000016 TIM_SetClockDivision
08000e04 g     F .text	00000010 FLASH_Lock
08000c7c g     F .text	0000001c DMA_GetFlagStatus
08000aa4 g     F .text	00000006 ADC_AnalogWatchdogThresholdsConfig
080004f0  w    F .text	00000002 USART3_IRQHandler
08000d98 g     F .text	0000000c EXTI_ClearITPendingBit
080003cc g     F .text	0000002c __libc_fini_array
080004f0  w    F .text	00000002 RTC_IRQHandler
080004f2 g     F .text	00000008 __get_PSP
080008aa g     F .text	00000008 ADC_GetCalibrationStatus
200004a4 g       .bss	00000000 _ebss
080024c2 g     F .text	0000003e USART_GetITStatus
080004fa g     F .text	00000006 __set_PSP
08000f88 g     F .text	00000080 FLASH_EraseOptionBytes
080004f0  w    F .text	00000002 DMA1_Channel7_IRQHandler
08001848 g     F .text	00000088 TIM_OC1Init
080008b2 g     F .text	00000012 ADC_SoftwareStartConvCmd
08001cbe g     F .text	00000010 TIM_OC3PreloadConfig
080004ac  w    F .text	00000030 Reset_Handler
08000898 g     F .text	00000008 ADC_GetResetCalibrationStatus
0800140a g     F .text	00000006 GPIO_ReadInputData
08001f0c g     F .text	00000004 TIM_SetAutoreload
0800239a g     F .text	00000016 USART_LINBreakDetectLengthConfig
080004f0  w    F .text	00000002 CAN1_RX1_IRQHandler
08002800 g     F .text	00000028 RCC_GetFlagStatus
20000490 g     O .bss	00000001 __lock___malloc_recursive_mutex
0800127c g     F .text	00000004 FLASH_WaitForLastBank1Operation
08001422 g     F .text	00000004 GPIO_SetBits
080004f0  w    F .text	00000002 TIM4_IRQHandler
08000d5c g     F .text	00000014 EXTI_GetFlagStatus
080009c4 g     F .text	0000000c ADC_ExternalTrigInjectedConvConfig
0800260c g     F .text	00000010 RCC_GetSYSCLKSource
08001c3a g     F .text	00000018 TIM_ARRPreloadConfig
0800142a g     F .text	0000000a GPIO_WriteBit
080009a0 g     F .text	00000012 ADC_AutoInjectedConvCmd
080009e2 g     F .text	00000012 ADC_SoftwareStartInjectedConvCmd
080004f0  w    F .text	00000002 I2C1_EV_IRQHandler
08000550 g     F .text	00000008 __LDREXB
0800041c g     F .text	00000002 __retarget_lock_release_recursive
080014fc g     F .text	0000000c GPIO_ETH_MediaInterfaceConfig
0800215c g     F .text	00000016 TIM_GetITStatus
08000414 g     F .text	00000004 __retarget_lock_try_acquire_recursive
080026e0 g     F .text	00000084 RCC_GetClocksFreq
080004f0  w    F .text	00000002 DMA1_Channel6_IRQHandler
08000dd0 g     F .text	00000018 FLASH_PrefetchBufferCmd
08001e26 g     F .text	00000042 TIM_SelectOCxM
20000448 g     O .data	00000004 hse_value
08000d4c g     F .text	00000010 EXTI_GenerateSWInterrupt
08002218 g     F .text	000000a4 USART_Init
200004a4 g       .bss	00000000 __bss_end__
080004f0  w    F .text	00000002 TIM3_IRQHandler
080004f0  w    F .text	00000002 RCC_IRQHandler
080004f0  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
080002fc g     F .text	000000c4 __call_exitprocs
0800051a g     F .text	00000006 __get_PRIMASK
080004f0  w    F .text	00000002 DMA1_Channel1_IRQHandler
08001ce2 g     F .text	00000010 TIM_OC1FastConfig
080004f0 g       .text	00000002 Default_Handler
08000154 g     F .text	00000000 _start
08000e94 g     F .text	00000028 FLASH_GetStatus
20000434 g     O .data	00000010 AHBPrescTable
08002438 g     F .text	00000018 USART_HalfDuplexCmd
08000d70 g     F .text	0000000c EXTI_ClearFlag
08000410 g     F .text	00000004 __retarget_lock_try_acquire
08000e88 g     F .text	0000000c FLASH_ClearFlag
08000ee4 g     F .text	00000022 FLASH_WaitForLastOperation
080026c4 g     F .text	00000010 RCC_RTCCLKConfig
08001caa g     F .text	00000014 TIM_OC2PreloadConfig
08001ba4 g     F .text	00000010 TIM_SelectInputTrigger
080004f0  w    F .text	00000002 EXTI15_10_IRQHandler
08001ad2 g     F .text	00000012 TIM_ITConfig
08000420 g     F .text	0000008c __register_exitproc
0800014c  w    F .text	00000000 _stack_init
080018d0 g     F .text	00000080 TIM_OC2Init
08002314 g     F .text	00000030 USART_ITConfig
08000cd0 g     F .text	0000006c EXTI_Init
08000546 g     F .text	00000004 __REVSH
08001b8e g     F .text	00000006 TIM_PrescalerConfig
08001426 g     F .text	00000004 GPIO_ResetBits
08001dda g     F .text	00000014 TIM_OC4PolarityConfig
08001ec6 g     F .text	00000016 TIM_SelectOutputTrigger
08001098 g     F .text	0000004c FLASH_ProgramOptionByteData
08002480 g     F .text	00000016 USART_IrDAConfig
08001f18 g     F .text	00000004 TIM_SetCompare3
080019cc g     F .text	00000068 TIM_OC4Init
08000404 g     F .text	00000002 __retarget_lock_close_recursive
080008c4 g     F .text	00000008 ADC_GetSoftwareStartConvStatus
08001e98 g     F .text	00000018 TIM_SelectHallSensor
080004f0  w    F .text	00000002 EXTI9_5_IRQHandler
08000994 g     F .text	0000000c ADC_GetDualModeConversionValue
080014d0 g     F .text	0000002a GPIO_EXTILineConfig
08001f22 g     F .text	00000016 TIM_SetIC1Prescaler
0800217c g     F .text	0000009c USART_DeInit
08000d7c g     F .text	0000001c EXTI_GetITStatus
08001c26 g     F .text	00000014 TIM_ForcedOC4Config
080004f0  w    F .text	00000002 SPI2_IRQHandler
0800040c g     F .text	00000002 __retarget_lock_acquire_recursive
08000da4 g     F .text	00000014 FLASH_SetLatency
08000244 g     F .text	000000a4 memset
080006c8 g     F .text	00000002 MemManage_Handler
080025b8 g     F .text	00000014 RCC_AdjustHSICalibrationValue
0800286c g     F .text	00000074 main
080022d0 g     F .text	00000020 USART_ClockInit
08001b02 g     F .text	0000001a TIM_ITRxExternalClockConfig
080003fc g     F .text	00000002 __retarget_lock_init_recursive
200004a0 g     O .bss	00000004 system_time_ms
08001db2 g     F .text	00000014 TIM_OC3PolarityConfig
08002dbc g       *ABS*	00000000 _siccmram
080006ce g     F .text	00000002 SVC_Handler
080023d8 g     F .text	0000000c USART_SendBreak
08000538 g     F .text	00000006 __set_CONTROL
08001af4 g     F .text	0000000e TIM_InternalClockConfig
08001d6a g     F .text	00000010 TIM_OC1PolarityConfig
08001cf2 g     F .text	00000014 TIM_OC2FastConfig
08002630 g     F .text	00000014 RCC_PCLK1Config
080028fc g       .initcalldata.init	00000000 __data_initcall_start
080028fc g       .initcallmodule.init	00000000 __module_initcall_end
08000d3c g     F .text	0000000e EXTI_StructInit
080028fc g       .initcallmodule.init	00000000 __module_initcall_start
08001f08 g     F .text	00000004 TIM_SetCounter
080004f0  w    F .text	00000002 DMA1_Channel5_IRQHandler
08002670 g     F .text	0000000c RCC_USBCLKConfig
080004f0  w    F .text	00000002 EXTI4_IRQHandler
080004f0  w    F .text	00000002 USB_LP_CAN1_RX0_IRQHandler
08002644 g     F .text	00000014 RCC_PCLK2Config
08001f1c g     F .text	00000006 TIM_SetCompare4
08002128 g     F .text	00000006 TIM_GetCapture2
08000500 g     F .text	00000008 __get_MSP
080024ba g     F .text	00000008 USART_ClearFlag
08002142 g     F .text	00000006 TIM_GetPrescaler
08001d3a g     F .text	00000010 TIM_ClearOC2Ref
0800057c g     F .text	000000f0 SystemInit
080003f8 g     F .text	00000002 __retarget_lock_init
08001fdc g     F .text	00000130 TIM_ICInit
08001280 g     F .text	000000b8 GPIO_DeInit
080028f0 g     F .text	00000000 _fini
08000a54 g     F .text	00000010 ADC_InjectedSequencerLengthConfig
080004f0  w    F .text	00000002 USB_HP_CAN1_TX_IRQHandler
08002510 g     F .text	00000040 RCC_DeInit
080028fc g       .initcalldata.init	00000000 __data_initcall_end
08001a7c g     F .text	00000010 TIM_ICStructInit
080003c0 g     F .text	0000000c atexit
08001f52 g     F .text	0000005a TIM_PWMIConfig
10000000 g       .ccmram	00000000 _eccmram
080004f0  w    F .text	00000002 DMA1_Channel3_IRQHandler
08000e14 g     F .text	00000004 FLASH_LockBank1
08000848 g     F .text	00000010 ADC_StructInit
08000542 g     F .text	00000004 __REV16
0800087c g     F .text	00000012 ADC_ITConfig
20000004 g     O .data	00000004 _impure_ptr
080004f0  w    F .text	00000002 TIM1_UP_IRQHandler
08001d9e g     F .text	00000014 TIM_OC2NPolarityConfig
08000770 g     F .text	00000018 NVIC_SystemLPConfig
08001d2a g     F .text	00000010 TIM_ClearOC1Ref
080028fc g       .loopermodule.looper	00000000 __module_looper_end
080004f0  w    F .text	00000002 WWDG_IRQHandler
080027c4 g     F .text	00000018 RCC_APB1PeriphResetCmd
08000adc g     F .text	00000006 ADC_ClearFlag
08000508 g     F .text	00000006 __set_MSP
08000c60 g     F .text	00000010 DMA_ITConfig
08002858 g     F .text	00000012 Delay
080004f0  w    F .text	00000002 TIM2_IRQHandler
08001e80 g     F .text	00000018 TIM_UpdateRequestConfig
08001c16 g     F .text	00000010 TIM_ForcedOC3Config
08001b1c g     F .text	00000034 TIM_TIxExternalClockConfig
0800236c g     F .text	00000016 USART_WakeUpConfig
080013f0 g     F .text	0000000e GPIO_StructInit
080007a0 g     F .text	00000060 ADC_DeInit
08001a8c g     F .text	00000012 TIM_BDTRStructInit
08001a68 g     F .text	00000014 TIM_OCStructInit
08000e30 g     F .text	00000010 FLASH_GetReadOutProtectionStatus
08001dc6 g     F .text	00000014 TIM_OC3NPolarityConfig
080009d0 g     F .text	00000012 ADC_ExternalTrigInjectedConvCmd
080004f0  w    F .text	00000002 TIM1_BRK_IRQHandler
080028fc g       .loopermodule.looper	00000000 __module_looper_start
08000800 g     F .text	00000048 ADC_Init
080023c8 g     F .text	00000008 USART_SendData
20004fff g       .text	00000000 _estack
08001e0a g     F .text	0000001c TIM_CCxNCmd
08000a64 g     F .text	00000016 ADC_SetInjectedOffset
080004f0  w    F .text	00000002 EXTI1_IRQHandler
20005000 g       .heap	00000000 _eheap
08000514 g     F .text	00000006 __set_BASEPRI
08001ef2 g     F .text	00000016 TIM_SelectMasterSlaveMode
08000ab8 g     F .text	00000018 ADC_TempSensorVrefintCmd
20000460 g       .data	00000000 _edata
08002382 g     F .text	00000018 USART_ReceiverWakeUpCmd
08002134 g     F .text	00000008 TIM_GetCapture4
080022bc g     F .text	00000014 USART_StructInit
10000000 g       .ccmram	00000000 _sccmram
20000480 g     O .bss	00000001 __lock___at_quick_exit_mutex
080017b4 g     F .text	00000094 TIM_TimeBaseInit
080004f0  w    F .text	00000002 RTCAlarm_IRQHandler
08000a7a g     F .text	0000001a ADC_GetInjectedConversionValue
080004f0  w    F .text	00000002 USART2_IRQHandler
08002420 g     F .text	00000018 USART_SmartCardNACKCmd
080001dc g     F .text	00000020 exit
08000000 g     O .text	00000000 g_pfnVectors
0800056e g     F .text	00000008 __STREXH
0800066c g     F .text	00000058 SystemCoreClockUpdate
080023b0 g     F .text	00000018 USART_LINCmd
08001ae8 g     F .text	00000008 TIM_DMAConfig
080008dc g     F .text	00000012 ADC_DiscModeCmd
08000558 g     F .text	00000008 __LDREXH
080004f0  w    F .text	00000002 I2C2_ER_IRQHandler
080004f0  w    F .text	00000002 DMA1_Channel2_IRQHandler
08001ae4 g     F .text	00000004 TIM_GenerateEvent
08000c98 g     F .text	00000014 DMA_ClearFlag
08000408 g     F .text	00000002 __retarget_lock_acquire
08001a34 g     F .text	00000022 TIM_BDTRConfig
080010e4 g     F .text	000000a8 FLASH_EnableWriteProtection
08000418 g     F .text	00000002 __retarget_lock_release
080004f0  w    F .text	00000002 CAN1_SCE_IRQHandler
080004f0  w    F .text	00000002 FLASH_IRQHandler
080028fc g       .text	00000000 _exit
08001438 g     F .text	00000010 GPIO_PinLockConfig
080006ca g     F .text	00000002 BusFault_Handler
080004f0  w    F .text	00000002 USART1_IRQHandler
20000488 g     O .bss	00000001 __lock___dd_hash_mutex
2000049c g     O .bss	00000001 __lock___tz_mutex
080026b8 g     F .text	0000000c RCC_LSICmd
08001f38 g     F .text	0000001a TIM_SetIC2Prescaler
08001b50 g     F .text	00000014 TIM_ETRConfig
0800050e g     F .text	00000006 __get_BASEPRI
080022f0 g     F .text	0000000c USART_ClockStructInit
080027ac g     F .text	00000018 RCC_APB2PeriphResetCmd
08001edc g     F .text	00000016 TIM_SelectSlaveMode
080004f0  w    F .text	00000002 I2C1_ER_IRQHandler
080006f0 g     F .text	00000014 NVIC_PriorityGroupConfig
08000b00 g     F .text	000000f4 DMA_DeInit
08001d5a g     F .text	00000010 TIM_ClearOC4Ref
08001eb0 g     F .text	00000016 TIM_SelectOnePulseMode
08000566 g     F .text	00000008 __STREXB
08001bb4 g     F .text	0000003e TIM_EncoderInterfaceConfig
080009f4 g     F .text	00000008 ADC_GetSoftwareStartInjectedConvCmdStatus
08001f10 g     F .text	00000004 TIM_SetCompare1
08001d8a g     F .text	00000014 TIM_OC2PolarityConfig
08001e68 g     F .text	00000018 TIM_UpdateDisableConfig
080013fe g     F .text	0000000c GPIO_ReadInputDataBit
08000ebc g     F .text	00000028 FLASH_GetBank1Status
08002344 g     F .text	00000012 USART_DMACmd
08001d16 g     F .text	00000014 TIM_OC4FastConfig
080004f0  w    F .text	00000002 USBWakeUp_IRQHandler
0800261c g     F .text	00000014 RCC_HCLKConfig
08000e00 g     F .text	00000004 FLASH_UnlockBank1
20000494 g     O .bss	00000001 __lock___sfp_recursive_mutex
08001b94 g     F .text	00000010 TIM_CounterModeConfig



Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	ff 4f 00 20 ad 04 00 08 c5 06 00 08 c7 06 00 08     .O. ............
 8000010:	c9 06 00 08 cb 06 00 08 cd 06 00 08 00 00 00 00     ................
	...
 800002c:	cf 06 00 08 d1 06 00 08 00 00 00 00 d3 06 00 08     ................
 800003c:	d5 06 00 08 f1 04 00 08 f1 04 00 08 f1 04 00 08     ................
 800004c:	f1 04 00 08 f1 04 00 08 f1 04 00 08 f1 04 00 08     ................
 800005c:	f1 04 00 08 f1 04 00 08 f1 04 00 08 f1 04 00 08     ................
 800006c:	f1 04 00 08 f1 04 00 08 f1 04 00 08 f1 04 00 08     ................
 800007c:	f1 04 00 08 f1 04 00 08 f1 04 00 08 f1 04 00 08     ................
 800008c:	f1 04 00 08 f1 04 00 08 f1 04 00 08 f1 04 00 08     ................
 800009c:	f1 04 00 08 f1 04 00 08 f1 04 00 08 f1 04 00 08     ................
 80000ac:	f1 04 00 08 f1 04 00 08 f1 04 00 08 f1 04 00 08     ................
 80000bc:	f1 04 00 08 f1 04 00 08 f1 04 00 08 f1 04 00 08     ................
 80000cc:	f1 04 00 08 f1 04 00 08 f1 04 00 08 f1 04 00 08     ................
 80000dc:	f1 04 00 08 f1 04 00 08 f1 04 00 08 f1 04 00 08     ................
	...
 8000108:	5f f8 08 f1                                         _...

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000460 	.word	0x20000460
 8000128:	00000000 	.word	0x00000000
 800012c:	080028e0 	.word	0x080028e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000464 	.word	0x20000464
 8000148:	080028e0 	.word	0x080028e0

0800014c <_stack_init>:
 800014c:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 8000150:	4770      	bx	lr
 8000152:	bf00      	nop

08000154 <_mainCRTStartup>:
 8000154:	4b17      	ldr	r3, [pc, #92]	; (80001b4 <_mainCRTStartup+0x60>)
 8000156:	2b00      	cmp	r3, #0
 8000158:	bf08      	it	eq
 800015a:	4b13      	ldreq	r3, [pc, #76]	; (80001a8 <_mainCRTStartup+0x54>)
 800015c:	469d      	mov	sp, r3
 800015e:	f7ff fff5 	bl	800014c <_stack_init>
 8000162:	2100      	movs	r1, #0
 8000164:	468b      	mov	fp, r1
 8000166:	460f      	mov	r7, r1
 8000168:	4813      	ldr	r0, [pc, #76]	; (80001b8 <_mainCRTStartup+0x64>)
 800016a:	4a14      	ldr	r2, [pc, #80]	; (80001bc <_mainCRTStartup+0x68>)
 800016c:	1a12      	subs	r2, r2, r0
 800016e:	f000 f869 	bl	8000244 <memset>
 8000172:	4b0e      	ldr	r3, [pc, #56]	; (80001ac <_mainCRTStartup+0x58>)
 8000174:	2b00      	cmp	r3, #0
 8000176:	d000      	beq.n	800017a <_mainCRTStartup+0x26>
 8000178:	4798      	blx	r3
 800017a:	4b0d      	ldr	r3, [pc, #52]	; (80001b0 <_mainCRTStartup+0x5c>)
 800017c:	2b00      	cmp	r3, #0
 800017e:	d000      	beq.n	8000182 <_mainCRTStartup+0x2e>
 8000180:	4798      	blx	r3
 8000182:	2000      	movs	r0, #0
 8000184:	2100      	movs	r1, #0
 8000186:	0004      	movs	r4, r0
 8000188:	000d      	movs	r5, r1
 800018a:	480d      	ldr	r0, [pc, #52]	; (80001c0 <_mainCRTStartup+0x6c>)
 800018c:	2800      	cmp	r0, #0
 800018e:	d002      	beq.n	8000196 <_mainCRTStartup+0x42>
 8000190:	480c      	ldr	r0, [pc, #48]	; (80001c4 <_mainCRTStartup+0x70>)
 8000192:	f000 f915 	bl	80003c0 <atexit>
 8000196:	f000 f831 	bl	80001fc <__libc_init_array>
 800019a:	0020      	movs	r0, r4
 800019c:	0029      	movs	r1, r5
 800019e:	f002 fb65 	bl	800286c <main>
 80001a2:	f000 f81b 	bl	80001dc <exit>
 80001a6:	bf00      	nop
 80001a8:	00080000 	.word	0x00080000
	...
 80001b8:	20000460 	.word	0x20000460
 80001bc:	200004a4 	.word	0x200004a4
 80001c0:	080003c1 	.word	0x080003c1
 80001c4:	080003cd 	.word	0x080003cd
 80001c8:	0800295c 	.word	0x0800295c
 80001cc:	20000000 	.word	0x20000000
 80001d0:	20000460 	.word	0x20000460
 80001d4:	20000460 	.word	0x20000460
 80001d8:	200004a4 	.word	0x200004a4

080001dc <exit>:
 80001dc:	b508      	push	{r3, lr}
 80001de:	2100      	movs	r1, #0
 80001e0:	4604      	mov	r4, r0
 80001e2:	f000 f88b 	bl	80002fc <__call_exitprocs>
 80001e6:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <exit+0x1c>)
 80001e8:	6818      	ldr	r0, [r3, #0]
 80001ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80001ec:	b103      	cbz	r3, 80001f0 <exit+0x14>
 80001ee:	4798      	blx	r3
 80001f0:	4620      	mov	r0, r4
 80001f2:	f002 fb83 	bl	80028fc <_etext>
 80001f6:	bf00      	nop
 80001f8:	08002944 	.word	0x08002944

080001fc <__libc_init_array>:
 80001fc:	b570      	push	{r4, r5, r6, lr}
 80001fe:	4e0d      	ldr	r6, [pc, #52]	; (8000234 <__libc_init_array+0x38>)
 8000200:	4d0d      	ldr	r5, [pc, #52]	; (8000238 <__libc_init_array+0x3c>)
 8000202:	1b76      	subs	r6, r6, r5
 8000204:	10b6      	asrs	r6, r6, #2
 8000206:	d006      	beq.n	8000216 <__libc_init_array+0x1a>
 8000208:	2400      	movs	r4, #0
 800020a:	f855 3b04 	ldr.w	r3, [r5], #4
 800020e:	3401      	adds	r4, #1
 8000210:	4798      	blx	r3
 8000212:	42a6      	cmp	r6, r4
 8000214:	d1f9      	bne.n	800020a <__libc_init_array+0xe>
 8000216:	4e09      	ldr	r6, [pc, #36]	; (800023c <__libc_init_array+0x40>)
 8000218:	4d09      	ldr	r5, [pc, #36]	; (8000240 <__libc_init_array+0x44>)
 800021a:	f002 fb63 	bl	80028e4 <_init>
 800021e:	1b76      	subs	r6, r6, r5
 8000220:	10b6      	asrs	r6, r6, #2
 8000222:	d006      	beq.n	8000232 <__libc_init_array+0x36>
 8000224:	2400      	movs	r4, #0
 8000226:	f855 3b04 	ldr.w	r3, [r5], #4
 800022a:	3401      	adds	r4, #1
 800022c:	4798      	blx	r3
 800022e:	42a6      	cmp	r6, r4
 8000230:	d1f9      	bne.n	8000226 <__libc_init_array+0x2a>
 8000232:	bd70      	pop	{r4, r5, r6, pc}
 8000234:	08002950 	.word	0x08002950
 8000238:	08002950 	.word	0x08002950
 800023c:	08002958 	.word	0x08002958
 8000240:	08002950 	.word	0x08002950

08000244 <memset>:
 8000244:	0783      	lsls	r3, r0, #30
 8000246:	b530      	push	{r4, r5, lr}
 8000248:	d048      	beq.n	80002dc <memset+0x98>
 800024a:	1e54      	subs	r4, r2, #1
 800024c:	2a00      	cmp	r2, #0
 800024e:	d03f      	beq.n	80002d0 <memset+0x8c>
 8000250:	4603      	mov	r3, r0
 8000252:	b2ca      	uxtb	r2, r1
 8000254:	e001      	b.n	800025a <memset+0x16>
 8000256:	3c01      	subs	r4, #1
 8000258:	d33a      	bcc.n	80002d0 <memset+0x8c>
 800025a:	f803 2b01 	strb.w	r2, [r3], #1
 800025e:	079d      	lsls	r5, r3, #30
 8000260:	d1f9      	bne.n	8000256 <memset+0x12>
 8000262:	2c03      	cmp	r4, #3
 8000264:	d92d      	bls.n	80002c2 <memset+0x7e>
 8000266:	b2cd      	uxtb	r5, r1
 8000268:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800026c:	2c0f      	cmp	r4, #15
 800026e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000272:	d936      	bls.n	80002e2 <memset+0x9e>
 8000274:	f1a4 0210 	sub.w	r2, r4, #16
 8000278:	f022 0c0f 	bic.w	ip, r2, #15
 800027c:	f103 0e20 	add.w	lr, r3, #32
 8000280:	44e6      	add	lr, ip
 8000282:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8000286:	f103 0210 	add.w	r2, r3, #16
 800028a:	e942 5504 	strd	r5, r5, [r2, #-16]
 800028e:	e942 5502 	strd	r5, r5, [r2, #-8]
 8000292:	3210      	adds	r2, #16
 8000294:	4572      	cmp	r2, lr
 8000296:	d1f8      	bne.n	800028a <memset+0x46>
 8000298:	f10c 0201 	add.w	r2, ip, #1
 800029c:	f014 0f0c 	tst.w	r4, #12
 80002a0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002a4:	f004 0c0f 	and.w	ip, r4, #15
 80002a8:	d013      	beq.n	80002d2 <memset+0x8e>
 80002aa:	f1ac 0304 	sub.w	r3, ip, #4
 80002ae:	f023 0303 	bic.w	r3, r3, #3
 80002b2:	3304      	adds	r3, #4
 80002b4:	4413      	add	r3, r2
 80002b6:	f842 5b04 	str.w	r5, [r2], #4
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d1fb      	bne.n	80002b6 <memset+0x72>
 80002be:	f00c 0403 	and.w	r4, ip, #3
 80002c2:	b12c      	cbz	r4, 80002d0 <memset+0x8c>
 80002c4:	b2ca      	uxtb	r2, r1
 80002c6:	441c      	add	r4, r3
 80002c8:	f803 2b01 	strb.w	r2, [r3], #1
 80002cc:	429c      	cmp	r4, r3
 80002ce:	d1fb      	bne.n	80002c8 <memset+0x84>
 80002d0:	bd30      	pop	{r4, r5, pc}
 80002d2:	4664      	mov	r4, ip
 80002d4:	4613      	mov	r3, r2
 80002d6:	2c00      	cmp	r4, #0
 80002d8:	d1f4      	bne.n	80002c4 <memset+0x80>
 80002da:	e7f9      	b.n	80002d0 <memset+0x8c>
 80002dc:	4603      	mov	r3, r0
 80002de:	4614      	mov	r4, r2
 80002e0:	e7bf      	b.n	8000262 <memset+0x1e>
 80002e2:	461a      	mov	r2, r3
 80002e4:	46a4      	mov	ip, r4
 80002e6:	e7e0      	b.n	80002aa <memset+0x66>

080002e8 <register_fini>:
 80002e8:	4b02      	ldr	r3, [pc, #8]	; (80002f4 <register_fini+0xc>)
 80002ea:	b113      	cbz	r3, 80002f2 <register_fini+0xa>
 80002ec:	4802      	ldr	r0, [pc, #8]	; (80002f8 <register_fini+0x10>)
 80002ee:	f000 b867 	b.w	80003c0 <atexit>
 80002f2:	4770      	bx	lr
 80002f4:	00000000 	.word	0x00000000
 80002f8:	080003cd 	.word	0x080003cd

080002fc <__call_exitprocs>:
 80002fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000300:	4683      	mov	fp, r0
 8000302:	4b2d      	ldr	r3, [pc, #180]	; (80003b8 <__call_exitprocs+0xbc>)
 8000304:	b083      	sub	sp, #12
 8000306:	6818      	ldr	r0, [r3, #0]
 8000308:	460f      	mov	r7, r1
 800030a:	f8cd b004 	str.w	fp, [sp, #4]
 800030e:	f000 f87d 	bl	800040c <__retarget_lock_acquire_recursive>
 8000312:	4b2a      	ldr	r3, [pc, #168]	; (80003bc <__call_exitprocs+0xc0>)
 8000314:	f8d3 8000 	ldr.w	r8, [r3]
 8000318:	f8d8 6148 	ldr.w	r6, [r8, #328]	; 0x148
 800031c:	b19e      	cbz	r6, 8000346 <__call_exitprocs+0x4a>
 800031e:	f04f 0901 	mov.w	r9, #1
 8000322:	f04f 0a00 	mov.w	sl, #0
 8000326:	6874      	ldr	r4, [r6, #4]
 8000328:	1e65      	subs	r5, r4, #1
 800032a:	d40c      	bmi.n	8000346 <__call_exitprocs+0x4a>
 800032c:	3401      	adds	r4, #1
 800032e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8000332:	b17f      	cbz	r7, 8000354 <__call_exitprocs+0x58>
 8000334:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8000338:	42bb      	cmp	r3, r7
 800033a:	d00b      	beq.n	8000354 <__call_exitprocs+0x58>
 800033c:	3d01      	subs	r5, #1
 800033e:	1c6b      	adds	r3, r5, #1
 8000340:	f1a4 0404 	sub.w	r4, r4, #4
 8000344:	d1f5      	bne.n	8000332 <__call_exitprocs+0x36>
 8000346:	4b1c      	ldr	r3, [pc, #112]	; (80003b8 <__call_exitprocs+0xbc>)
 8000348:	6818      	ldr	r0, [r3, #0]
 800034a:	b003      	add	sp, #12
 800034c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000350:	f000 b864 	b.w	800041c <__retarget_lock_release_recursive>
 8000354:	6873      	ldr	r3, [r6, #4]
 8000356:	6822      	ldr	r2, [r4, #0]
 8000358:	3b01      	subs	r3, #1
 800035a:	42ab      	cmp	r3, r5
 800035c:	bf0c      	ite	eq
 800035e:	6075      	streq	r5, [r6, #4]
 8000360:	f8c4 a000 	strne.w	sl, [r4]
 8000364:	2a00      	cmp	r2, #0
 8000366:	d0e9      	beq.n	800033c <__call_exitprocs+0x40>
 8000368:	f8d6 0188 	ldr.w	r0, [r6, #392]	; 0x188
 800036c:	fa09 f105 	lsl.w	r1, r9, r5
 8000370:	4201      	tst	r1, r0
 8000372:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8000376:	d10b      	bne.n	8000390 <__call_exitprocs+0x94>
 8000378:	4790      	blx	r2
 800037a:	6872      	ldr	r2, [r6, #4]
 800037c:	455a      	cmp	r2, fp
 800037e:	d112      	bne.n	80003a6 <__call_exitprocs+0xaa>
 8000380:	f8d8 3148 	ldr.w	r3, [r8, #328]	; 0x148
 8000384:	42b3      	cmp	r3, r6
 8000386:	d0d9      	beq.n	800033c <__call_exitprocs+0x40>
 8000388:	461e      	mov	r6, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1cb      	bne.n	8000326 <__call_exitprocs+0x2a>
 800038e:	e7da      	b.n	8000346 <__call_exitprocs+0x4a>
 8000390:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 8000394:	4201      	tst	r1, r0
 8000396:	d10b      	bne.n	80003b0 <__call_exitprocs+0xb4>
 8000398:	9801      	ldr	r0, [sp, #4]
 800039a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800039e:	4790      	blx	r2
 80003a0:	6872      	ldr	r2, [r6, #4]
 80003a2:	455a      	cmp	r2, fp
 80003a4:	d0ec      	beq.n	8000380 <__call_exitprocs+0x84>
 80003a6:	f8d8 6148 	ldr.w	r6, [r8, #328]	; 0x148
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d1bb      	bne.n	8000326 <__call_exitprocs+0x2a>
 80003ae:	e7ca      	b.n	8000346 <__call_exitprocs+0x4a>
 80003b0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80003b4:	4790      	blx	r2
 80003b6:	e7e0      	b.n	800037a <__call_exitprocs+0x7e>
 80003b8:	20000430 	.word	0x20000430
 80003bc:	08002944 	.word	0x08002944

080003c0 <atexit>:
 80003c0:	2300      	movs	r3, #0
 80003c2:	4601      	mov	r1, r0
 80003c4:	461a      	mov	r2, r3
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 b82a 	b.w	8000420 <__register_exitproc>

080003cc <__libc_fini_array>:
 80003cc:	b538      	push	{r3, r4, r5, lr}
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <__libc_fini_array+0x24>)
 80003d0:	4d08      	ldr	r5, [pc, #32]	; (80003f4 <__libc_fini_array+0x28>)
 80003d2:	1b5b      	subs	r3, r3, r5
 80003d4:	109c      	asrs	r4, r3, #2
 80003d6:	d007      	beq.n	80003e8 <__libc_fini_array+0x1c>
 80003d8:	3b04      	subs	r3, #4
 80003da:	441d      	add	r5, r3
 80003dc:	3c01      	subs	r4, #1
 80003de:	f855 3904 	ldr.w	r3, [r5], #-4
 80003e2:	4798      	blx	r3
 80003e4:	2c00      	cmp	r4, #0
 80003e6:	d1f9      	bne.n	80003dc <__libc_fini_array+0x10>
 80003e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80003ec:	f002 ba80 	b.w	80028f0 <_fini>
 80003f0:	0800295c 	.word	0x0800295c
 80003f4:	08002958 	.word	0x08002958

080003f8 <__retarget_lock_init>:
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop

080003fc <__retarget_lock_init_recursive>:
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop

08000400 <__retarget_lock_close>:
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop

08000404 <__retarget_lock_close_recursive>:
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop

08000408 <__retarget_lock_acquire>:
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop

0800040c <__retarget_lock_acquire_recursive>:
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop

08000410 <__retarget_lock_try_acquire>:
 8000410:	2001      	movs	r0, #1
 8000412:	4770      	bx	lr

08000414 <__retarget_lock_try_acquire_recursive>:
 8000414:	2001      	movs	r0, #1
 8000416:	4770      	bx	lr

08000418 <__retarget_lock_release>:
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop

0800041c <__retarget_lock_release_recursive>:
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop

08000420 <__register_exitproc>:
 8000420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000424:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80004a4 <__register_exitproc+0x84>
 8000428:	4606      	mov	r6, r0
 800042a:	f8da 0000 	ldr.w	r0, [sl]
 800042e:	4698      	mov	r8, r3
 8000430:	460f      	mov	r7, r1
 8000432:	4691      	mov	r9, r2
 8000434:	f7ff ffea 	bl	800040c <__retarget_lock_acquire_recursive>
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <__register_exitproc+0x88>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8000440:	b324      	cbz	r4, 800048c <__register_exitproc+0x6c>
 8000442:	6865      	ldr	r5, [r4, #4]
 8000444:	2d1f      	cmp	r5, #31
 8000446:	dc26      	bgt.n	8000496 <__register_exitproc+0x76>
 8000448:	b95e      	cbnz	r6, 8000462 <__register_exitproc+0x42>
 800044a:	1c6b      	adds	r3, r5, #1
 800044c:	3502      	adds	r5, #2
 800044e:	f8da 0000 	ldr.w	r0, [sl]
 8000452:	6063      	str	r3, [r4, #4]
 8000454:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8000458:	f7ff ffe0 	bl	800041c <__retarget_lock_release_recursive>
 800045c:	2000      	movs	r0, #0
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	2301      	movs	r3, #1
 8000464:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8000468:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800046c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8000470:	40ab      	lsls	r3, r5
 8000472:	431a      	orrs	r2, r3
 8000474:	2e02      	cmp	r6, #2
 8000476:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 800047a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800047e:	d1e4      	bne.n	800044a <__register_exitproc+0x2a>
 8000480:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8000484:	4313      	orrs	r3, r2
 8000486:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 800048a:	e7de      	b.n	800044a <__register_exitproc+0x2a>
 800048c:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8000490:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8000494:	e7d5      	b.n	8000442 <__register_exitproc+0x22>
 8000496:	f8da 0000 	ldr.w	r0, [sl]
 800049a:	f7ff ffbf 	bl	800041c <__retarget_lock_release_recursive>
 800049e:	f04f 30ff 	mov.w	r0, #4294967295
 80004a2:	e7dc      	b.n	800045e <__register_exitproc+0x3e>
 80004a4:	20000430 	.word	0x20000430
 80004a8:	08002944 	.word	0x08002944

080004ac <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
 80004ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004ae:	e003      	b.n	80004b8 <LoopCopyDataInit>

080004b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004b0:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
 80004b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004b6:	3104      	adds	r1, #4

080004b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
 80004b8:	4809      	ldr	r0, [pc, #36]	; (80004e0 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
 80004bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004c0:	d3f6      	bcc.n	80004b0 <CopyDataInit>
	ldr	r2, =_sbss
 80004c2:	4a09      	ldr	r2, [pc, #36]	; (80004e8 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
 80004c4:	e002      	b.n	80004cc <LoopFillZerobss>

080004c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
 80004c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004c8:	f842 3b04 	str.w	r3, [r2], #4

080004cc <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <LoopFillZerobss+0x20>)
	cmp	r2, r3
 80004ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80004d0:	d3f9      	bcc.n	80004c6 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
 80004d2:	f000 f853 	bl	800057c <SystemInit>
/* Call the application's entry point.*/
	bl	main
 80004d6:	f002 f9c9 	bl	800286c <main>
	bx	lr    
 80004da:	4770      	bx	lr
	ldr	r3, =_sidata
 80004dc:	0800295c 	.word	0x0800295c
	ldr	r0, =_sdata
 80004e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80004e4:	20000460 	.word	0x20000460
	ldr	r2, =_sbss
 80004e8:	20000460 	.word	0x20000460
	ldr	r3, = _ebss
 80004ec:	200004a4 	.word	0x200004a4

080004f0 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004f0:	e7fe      	b.n	80004f0 <ADC1_2_IRQHandler>

080004f2 <__get_PSP>:
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, psp\n\t" 
 80004f2:	f3ef 8009 	mrs	r0, PSP
 80004f6:	4600      	mov	r0, r0
 80004f8:	4770      	bx	lr

080004fa <__set_PSP>:
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n\t"
 80004fa:	f380 8809 	msr	PSP, r0
 80004fe:	4770      	bx	lr

08000500 <__get_MSP>:
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, msp\n\t" 
 8000500:	f3ef 8008 	mrs	r0, MSP
 8000504:	4600      	mov	r0, r0
 8000506:	4770      	bx	lr

08000508 <__set_MSP>:
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n\t"
 8000508:	f380 8808 	msr	MSP, r0
 800050c:	4770      	bx	lr

0800050e <__get_BASEPRI>:
 */
uint32_t __get_BASEPRI(void)
{
  uint32_t result=0;
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 800050e:	f3ef 8012 	mrs	r0, BASEPRI_MAX
  return(result);
}
 8000512:	4770      	bx	lr

08000514 <__set_BASEPRI>:
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
 8000514:	f380 8811 	msr	BASEPRI, r0
}
 8000518:	4770      	bx	lr

0800051a <__get_PRIMASK>:
 */
uint32_t __get_PRIMASK(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800051a:	f3ef 8010 	mrs	r0, PRIMASK
  return(result);
}
 800051e:	4770      	bx	lr

08000520 <__set_PRIMASK>:
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 8000520:	f380 8810 	msr	PRIMASK, r0
}
 8000524:	4770      	bx	lr

08000526 <__get_FAULTMASK>:
 */
uint32_t __get_FAULTMASK(void)
{
  uint32_t result=0;
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 8000526:	f3ef 8013 	mrs	r0, FAULTMASK
  return(result);
}
 800052a:	4770      	bx	lr

0800052c <__set_FAULTMASK>:
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
 800052c:	f380 8813 	msr	FAULTMASK, r0
}
 8000530:	4770      	bx	lr

08000532 <__get_CONTROL>:
 */
uint32_t __get_CONTROL(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000532:	f3ef 8014 	mrs	r0, CONTROL
  return(result);
}
 8000536:	4770      	bx	lr

08000538 <__set_CONTROL>:
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) );
 8000538:	f380 8814 	msr	CONTROL, r0
}
 800053c:	4770      	bx	lr

0800053e <__REV>:
 */
uint32_t __REV(uint32_t value)
{
  uint32_t result=0;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800053e:	ba00      	rev	r0, r0
  return(result);
}
 8000540:	4770      	bx	lr

08000542 <__REV16>:
 */
uint32_t __REV16(uint16_t value)
{
  uint32_t result=0;
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 8000542:	ba40      	rev16	r0, r0
  return(result);
}
 8000544:	4770      	bx	lr

08000546 <__REVSH>:
 */
int32_t __REVSH(int16_t value)
{
  uint32_t result=0;
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 8000546:	bac0      	revsh	r0, r0
  return(result);
}
 8000548:	4770      	bx	lr

0800054a <__RBIT>:
 */
uint32_t __RBIT(uint32_t value)
{
  uint32_t result=0;
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800054a:	fa90 f0a0 	rbit	r0, r0
   return(result);
}
 800054e:	4770      	bx	lr

08000550 <__LDREXB>:
 */
uint8_t __LDREXB(uint8_t *addr)
{
    uint8_t result=0;
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
 8000550:	e8d0 0f4f 	ldrexb	r0, [r0]
   return(result);
}
 8000554:	b2c0      	uxtb	r0, r0
 8000556:	4770      	bx	lr

08000558 <__LDREXH>:
 */
uint16_t __LDREXH(uint16_t *addr)
{
    uint16_t result=0;
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
 8000558:	e8d0 0f5f 	ldrexh	r0, [r0]
   return(result);
}
 800055c:	b280      	uxth	r0, r0
 800055e:	4770      	bx	lr

08000560 <__LDREXW>:
 */
uint32_t __LDREXW(uint32_t *addr)
{
    uint32_t result=0;
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
 8000560:	e850 0f00 	ldrex	r0, [r0]
   return(result);
}
 8000564:	4770      	bx	lr

08000566 <__STREXB>:
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
   //uint32_t result=0;
   register uint32_t result asm ("r2");
   __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 8000566:	e8c1 0f42 	strexb	r2, r0, [r1]
   return(result);
}
 800056a:	4610      	mov	r0, r2
 800056c:	4770      	bx	lr

0800056e <__STREXH>:
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
   //uint32_t result=0;
   register uint32_t result asm ("r2");
   __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 800056e:	e8c1 0f52 	strexh	r2, r0, [r1]
   return(result);
}
 8000572:	4610      	mov	r0, r2
 8000574:	4770      	bx	lr

08000576 <__STREXW>:
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
   uint32_t result=0;
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 8000576:	e841 0000 	strex	r0, r0, [r1]
   return(result);
}
 800057a:	4770      	bx	lr

0800057c <SystemInit>:
 800057c:	4b37      	ldr	r3, [pc, #220]	; (800065c <SystemInit+0xe0>)
 800057e:	b082      	sub	sp, #8
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	f042 0201 	orr.w	r2, r2, #1
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	6859      	ldr	r1, [r3, #4]
 800058a:	4a35      	ldr	r2, [pc, #212]	; (8000660 <SystemInit+0xe4>)
 800058c:	400a      	ands	r2, r1
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000596:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	685a      	ldr	r2, [r3, #4]
 80005a6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	2200      	movs	r2, #0
 80005b4:	9200      	str	r2, [sp, #0]
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80005c6:	9201      	str	r2, [sp, #4]
 80005c8:	9a00      	ldr	r2, [sp, #0]
 80005ca:	3201      	adds	r2, #1
 80005cc:	9200      	str	r2, [sp, #0]
 80005ce:	9a01      	ldr	r2, [sp, #4]
 80005d0:	b91a      	cbnz	r2, 80005da <SystemInit+0x5e>
 80005d2:	9a00      	ldr	r2, [sp, #0]
 80005d4:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80005d8:	d1f2      	bne.n	80005c0 <SystemInit+0x44>
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80005e0:	bf18      	it	ne
 80005e2:	2201      	movne	r2, #1
 80005e4:	9201      	str	r2, [sp, #4]
 80005e6:	9a01      	ldr	r2, [sp, #4]
 80005e8:	2a01      	cmp	r2, #1
 80005ea:	d130      	bne.n	800064e <SystemInit+0xd2>
 80005ec:	4a1d      	ldr	r2, [pc, #116]	; (8000664 <SystemInit+0xe8>)
 80005ee:	6811      	ldr	r1, [r2, #0]
 80005f0:	f041 0110 	orr.w	r1, r1, #16
 80005f4:	6011      	str	r1, [r2, #0]
 80005f6:	6811      	ldr	r1, [r2, #0]
 80005f8:	f021 0103 	bic.w	r1, r1, #3
 80005fc:	6011      	str	r1, [r2, #0]
 80005fe:	6811      	ldr	r1, [r2, #0]
 8000600:	f041 0102 	orr.w	r1, r1, #2
 8000604:	6011      	str	r1, [r2, #0]
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	685a      	ldr	r2, [r3, #4]
 8000610:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	685a      	ldr	r2, [r3, #4]
 8000618:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	685a      	ldr	r2, [r3, #4]
 8000620:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	0192      	lsls	r2, r2, #6
 8000632:	d5fc      	bpl.n	800062e <SystemInit+0xb2>
 8000634:	685a      	ldr	r2, [r3, #4]
 8000636:	f022 0203 	bic.w	r2, r2, #3
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	685a      	ldr	r2, [r3, #4]
 800063e:	f042 0202 	orr.w	r2, r2, #2
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	f002 020c 	and.w	r2, r2, #12
 800064a:	2a08      	cmp	r2, #8
 800064c:	d1fa      	bne.n	8000644 <SystemInit+0xc8>
 800064e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <SystemInit+0xec>)
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	b002      	add	sp, #8
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000
 8000660:	f8ff0000 	.word	0xf8ff0000
 8000664:	40022000 	.word	0x40022000
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <SystemCoreClockUpdate>:
 800066c:	4910      	ldr	r1, [pc, #64]	; (80006b0 <SystemCoreClockUpdate+0x44>)
 800066e:	4a11      	ldr	r2, [pc, #68]	; (80006b4 <SystemCoreClockUpdate+0x48>)
 8000670:	684b      	ldr	r3, [r1, #4]
 8000672:	f003 030c 	and.w	r3, r3, #12
 8000676:	2b08      	cmp	r3, #8
 8000678:	d00a      	beq.n	8000690 <SystemCoreClockUpdate+0x24>
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <SystemCoreClockUpdate+0x4c>)
 800067c:	6013      	str	r3, [r2, #0]
 800067e:	684b      	ldr	r3, [r1, #4]
 8000680:	490e      	ldr	r1, [pc, #56]	; (80006bc <SystemCoreClockUpdate+0x50>)
 8000682:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000686:	5cc9      	ldrb	r1, [r1, r3]
 8000688:	6813      	ldr	r3, [r2, #0]
 800068a:	40cb      	lsrs	r3, r1
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	4770      	bx	lr
 8000690:	684b      	ldr	r3, [r1, #4]
 8000692:	6848      	ldr	r0, [r1, #4]
 8000694:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8000698:	03c0      	lsls	r0, r0, #15
 800069a:	f103 0302 	add.w	r3, r3, #2
 800069e:	d402      	bmi.n	80006a6 <SystemCoreClockUpdate+0x3a>
 80006a0:	4807      	ldr	r0, [pc, #28]	; (80006c0 <SystemCoreClockUpdate+0x54>)
 80006a2:	4343      	muls	r3, r0
 80006a4:	e7ea      	b.n	800067c <SystemCoreClockUpdate+0x10>
 80006a6:	6848      	ldr	r0, [r1, #4]
 80006a8:	0380      	lsls	r0, r0, #14
 80006aa:	d4f9      	bmi.n	80006a0 <SystemCoreClockUpdate+0x34>
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <SystemCoreClockUpdate+0x4c>)
 80006ae:	e7f8      	b.n	80006a2 <SystemCoreClockUpdate+0x36>
 80006b0:	40021000 	.word	0x40021000
 80006b4:	20000444 	.word	0x20000444
 80006b8:	007a1200 	.word	0x007a1200
 80006bc:	20000434 	.word	0x20000434
 80006c0:	003d0900 	.word	0x003d0900

080006c4 <NMI_Handler>:
 80006c4:	4770      	bx	lr

080006c6 <HardFault_Handler>:
 80006c6:	e7fe      	b.n	80006c6 <HardFault_Handler>

080006c8 <MemManage_Handler>:
 80006c8:	e7fe      	b.n	80006c8 <MemManage_Handler>

080006ca <BusFault_Handler>:
 80006ca:	e7fe      	b.n	80006ca <BusFault_Handler>

080006cc <UsageFault_Handler>:
 80006cc:	e7fe      	b.n	80006cc <UsageFault_Handler>

080006ce <SVC_Handler>:
 80006ce:	4770      	bx	lr

080006d0 <DebugMon_Handler>:
 80006d0:	4770      	bx	lr

080006d2 <PendSV_Handler>:
 80006d2:	4770      	bx	lr

080006d4 <SysTick_Handler>:
 80006d4:	4a02      	ldr	r2, [pc, #8]	; (80006e0 <SysTick_Handler+0xc>)
 80006d6:	6813      	ldr	r3, [r2, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	200004a0 	.word	0x200004a0

080006e4 <SMART_Get_SystemTime>:
 80006e4:	4b01      	ldr	r3, [pc, #4]	; (80006ec <SMART_Get_SystemTime+0x8>)
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	200004a0 	.word	0x200004a0

080006f0 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <NVIC_PriorityGroupConfig+0x10>)
 80006f2:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80006f6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80006fa:	60d8      	str	r0, [r3, #12]
}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000704:	b570      	push	{r4, r5, r6, lr}
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000706:	2501      	movs	r5, #1
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000708:	7801      	ldrb	r1, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800070a:	f001 031f 	and.w	r3, r1, #31
 800070e:	409d      	lsls	r5, r3
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000710:	78c3      	ldrb	r3, [r0, #3]
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000712:	094c      	lsrs	r4, r1, #5
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000714:	b1c3      	cbz	r3, 8000748 <NVIC_Init+0x44>
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <NVIC_Init+0x50>)
 8000718:	68da      	ldr	r2, [r3, #12]
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800071a:	7843      	ldrb	r3, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800071c:	43d2      	mvns	r2, r2
 800071e:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8000722:	f1c2 0604 	rsb	r6, r2, #4
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000726:	fa03 f606 	lsl.w	r6, r3, r6
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800072a:	7883      	ldrb	r3, [r0, #2]
    tmpsub = tmpsub >> tmppriority;
 800072c:	200f      	movs	r0, #15
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000732:	4013      	ands	r3, r2
 8000734:	4333      	orrs	r3, r6
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000736:	4a08      	ldr	r2, [pc, #32]	; (8000758 <NVIC_Init+0x54>)
    tmppriority = tmppriority << 0x04;
 8000738:	011b      	lsls	r3, r3, #4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4411      	add	r1, r2
 800073e:	f881 3300 	strb.w	r3, [r1, #768]	; 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000742:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000746:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <NVIC_Init+0x54>)
 800074a:	3420      	adds	r4, #32
 800074c:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
}
 8000750:	e7f9      	b.n	8000746 <NVIC_Init+0x42>
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	e000e100 	.word	0xe000e100

0800075c <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800075c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <NVIC_SetVectorTable+0x10>)
 8000762:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000766:	4301      	orrs	r1, r0
 8000768:	6099      	str	r1, [r3, #8]
}
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <NVIC_SystemLPConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <NVIC_SystemLPConfig+0x14>)
  {
    SCB->SCR |= LowPowerMode;
 8000772:	691a      	ldr	r2, [r3, #16]
  if (NewState != DISABLE)
 8000774:	b111      	cbz	r1, 800077c <NVIC_SystemLPConfig+0xc>
    SCB->SCR |= LowPowerMode;
 8000776:	4310      	orrs	r0, r2
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000778:	6118      	str	r0, [r3, #16]
  }
}
 800077a:	4770      	bx	lr
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800077c:	ea22 0000 	bic.w	r0, r2, r0
 8000780:	e7fa      	b.n	8000778 <NVIC_SystemLPConfig+0x8>
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <SysTick_CLKSourceConfig>:
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000788:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800078c:	691a      	ldr	r2, [r3, #16]
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800078e:	2804      	cmp	r0, #4
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000790:	bf0c      	ite	eq
 8000792:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000796:	f022 0204 	bicne.w	r2, r2, #4
 800079a:	611a      	str	r2, [r3, #16]
  }
}
 800079c:	4770      	bx	lr
	...

080007a0 <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 80007a0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <ADC_DeInit+0x54>)
 80007a4:	4298      	cmp	r0, r3
 80007a6:	d10b      	bne.n	80007c0 <ADC_DeInit+0x20>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 80007a8:	2101      	movs	r1, #1
 80007aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ae:	f001 fffd 	bl	80027ac <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 80007b2:	2100      	movs	r1, #0
 80007b4:	f44f 7000 	mov.w	r0, #512	; 0x200
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
    }
  }
}
 80007b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 80007bc:	f001 bff6 	b.w	80027ac <RCC_APB2PeriphResetCmd>
  else if (ADCx == ADC2)
 80007c0:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <ADC_DeInit+0x58>)
 80007c2:	4298      	cmp	r0, r3
 80007c4:	d108      	bne.n	80007d8 <ADC_DeInit+0x38>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
 80007c6:	2101      	movs	r1, #1
 80007c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80007cc:	f001 ffee 	bl	80027ac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
 80007d0:	2100      	movs	r1, #0
 80007d2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80007d6:	e7ef      	b.n	80007b8 <ADC_DeInit+0x18>
    if (ADCx == ADC3)
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <ADC_DeInit+0x5c>)
 80007da:	4298      	cmp	r0, r3
 80007dc:	d108      	bne.n	80007f0 <ADC_DeInit+0x50>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
 80007de:	2101      	movs	r1, #1
 80007e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80007e4:	f001 ffe2 	bl	80027ac <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 80007e8:	2100      	movs	r1, #0
 80007ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80007ee:	e7e3      	b.n	80007b8 <ADC_DeInit+0x18>
}
 80007f0:	bd08      	pop	{r3, pc}
 80007f2:	bf00      	nop
 80007f4:	40012400 	.word	0x40012400
 80007f8:	40012800 	.word	0x40012800
 80007fc:	40013c00 	.word	0x40013c00

08000800 <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000800:	6843      	ldr	r3, [r0, #4]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8000802:	790a      	ldrb	r2, [r1, #4]
  tmpreg1 &= CR1_CLEAR_Mask;
 8000804:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800080c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8000810:	680a      	ldr	r2, [r1, #0]
{
 8000812:	b510      	push	{r4, lr}
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8000814:	4313      	orrs	r3, r2
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000816:	6043      	str	r3, [r0, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000818:	6884      	ldr	r4, [r0, #8]
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 800081a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800081e:	4313      	orrs	r3, r2
  tmpreg1 &= CR2_CLEAR_Mask;
 8000820:	4a08      	ldr	r2, [pc, #32]	; (8000844 <ADC_Init+0x44>)
 8000822:	4022      	ands	r2, r4
 8000824:	4313      	orrs	r3, r2
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000826:	794a      	ldrb	r2, [r1, #5]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000828:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800082c:	6083      	str	r3, [r0, #8]
  tmpreg1 = ADCx->SQR1;
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 800082e:	7c0a      	ldrb	r2, [r1, #16]
  tmpreg1 = ADCx->SQR1;
 8000830:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 8000832:	3a01      	subs	r2, #1
  tmpreg1 &= SQR1_CLEAR_Mask;
 8000834:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800083e:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8000840:	bd10      	pop	{r4, pc}
 8000842:	bf00      	nop
 8000844:	fff1f7fd 	.word	0xfff1f7fd

08000848 <ADC_StructInit>:
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 8000848:	2300      	movs	r3, #0
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800084a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 800084e:	6003      	str	r3, [r0, #0]
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000850:	8083      	strh	r3, [r0, #4]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	7403      	strb	r3, [r0, #16]
}
 8000856:	4770      	bx	lr

08000858 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8000858:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 800085a:	b119      	cbz	r1, 8000864 <ADC_Cmd+0xc>
    ADCx->CR2 |= CR2_ADON_Set;
 800085c:	f043 0301 	orr.w	r3, r3, #1
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
 8000860:	6083      	str	r3, [r0, #8]
  }
}
 8000862:	4770      	bx	lr
    ADCx->CR2 &= CR2_ADON_Reset;
 8000864:	f023 0301 	bic.w	r3, r3, #1
 8000868:	e7fa      	b.n	8000860 <ADC_Cmd+0x8>

0800086a <ADC_DMACmd>:
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 800086a:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 800086c:	b119      	cbz	r1, 8000876 <ADC_DMACmd+0xc>
    ADCx->CR2 |= CR2_DMA_Set;
 800086e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
 8000872:	6083      	str	r3, [r0, #8]
  }
}
 8000874:	4770      	bx	lr
    ADCx->CR2 &= CR2_DMA_Reset;
 8000876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800087a:	e7fa      	b.n	8000872 <ADC_DMACmd+0x8>

0800087c <ADC_ITConfig>:
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 800087c:	6843      	ldr	r3, [r0, #4]
 800087e:	b2c9      	uxtb	r1, r1
  if (NewState != DISABLE)
 8000880:	b112      	cbz	r2, 8000888 <ADC_ITConfig+0xc>
    ADCx->CR1 |= itmask;
 8000882:	4319      	orrs	r1, r3
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000884:	6041      	str	r1, [r0, #4]
  }
}
 8000886:	4770      	bx	lr
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000888:	ea23 0101 	bic.w	r1, r3, r1
 800088c:	e7fa      	b.n	8000884 <ADC_ITConfig+0x8>

0800088e <ADC_ResetCalibration>:
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 800088e:	6883      	ldr	r3, [r0, #8]
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	6083      	str	r3, [r0, #8]
}
 8000896:	4770      	bx	lr

08000898 <ADC_GetResetCalibrationStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 8000898:	6880      	ldr	r0, [r0, #8]
    /* RSTCAL bit is reset */
    bitstatus = RESET;
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
}
 800089a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800089e:	4770      	bx	lr

080008a0 <ADC_StartCalibration>:
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 80008a0:	6883      	ldr	r3, [r0, #8]
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	6083      	str	r3, [r0, #8]
}
 80008a8:	4770      	bx	lr

080008aa <ADC_GetCalibrationStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 80008aa:	6880      	ldr	r0, [r0, #8]
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
  }
  /* Return the CAL bit status */
  return  bitstatus;
}
 80008ac:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80008b0:	4770      	bx	lr

080008b2 <ADC_SoftwareStartConvCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80008b2:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 80008b4:	b119      	cbz	r1, 80008be <ADC_SoftwareStartConvCmd+0xc>
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80008b6:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 80008ba:	6083      	str	r3, [r0, #8]
  }
}
 80008bc:	4770      	bx	lr
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 80008be:	f423 03a0 	bic.w	r3, r3, #5242880	; 0x500000
 80008c2:	e7fa      	b.n	80008ba <ADC_SoftwareStartConvCmd+0x8>

080008c4 <ADC_GetSoftwareStartConvStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
 80008c4:	6880      	ldr	r0, [r0, #8]
    /* SWSTART bit is reset */
    bitstatus = RESET;
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
}
 80008c6:	f3c0 5080 	ubfx	r0, r0, #22, #1
 80008ca:	4770      	bx	lr

080008cc <ADC_DiscModeChannelCountConfig>:
  uint32_t tmpreg2 = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 80008cc:	6843      	ldr	r3, [r0, #4]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 80008ce:	3901      	subs	r1, #1
  tmpreg1 &= CR1_DISCNUM_Reset;
 80008d0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
  tmpreg1 |= tmpreg2 << 13;
 80008d4:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 80008d8:	6043      	str	r3, [r0, #4]
}
 80008da:	4770      	bx	lr

080008dc <ADC_DiscModeCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
 80008dc:	6843      	ldr	r3, [r0, #4]
  if (NewState != DISABLE)
 80008de:	b119      	cbz	r1, 80008e8 <ADC_DiscModeCmd+0xc>
    ADCx->CR1 |= CR1_DISCEN_Set;
 80008e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
 80008e4:	6043      	str	r3, [r0, #4]
  }
}
 80008e6:	4770      	bx	lr
    ADCx->CR1 &= CR1_DISCEN_Reset;
 80008e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80008ec:	e7fa      	b.n	80008e4 <ADC_DiscModeCmd+0x8>

080008ee <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80008ee:	2909      	cmp	r1, #9
{
 80008f0:	b570      	push	{r4, r5, r6, lr}
  if (ADC_Channel > ADC_Channel_9)
 80008f2:	d91b      	bls.n	800092c <ADC_RegularChannelConfig+0x3e>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 80008f4:	2607      	movs	r6, #7
 80008f6:	f1a1 040a 	sub.w	r4, r1, #10
    tmpreg1 = ADCx->SMPR1;
 80008fa:	68c5      	ldr	r5, [r0, #12]
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 80008fc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000900:	40a6      	lsls	r6, r4
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000902:	ea25 0506 	bic.w	r5, r5, r6
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000906:	fa03 f404 	lsl.w	r4, r3, r4
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 800090a:	432c      	orrs	r4, r5
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800090c:	60c4      	str	r4, [r0, #12]
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800090e:	2a06      	cmp	r2, #6
 8000910:	d818      	bhi.n	8000944 <ADC_RegularChannelConfig+0x56>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8000912:	1e53      	subs	r3, r2, #1
 8000914:	221f      	movs	r2, #31
    tmpreg1 = ADCx->SQR3;
 8000916:	6b44      	ldr	r4, [r0, #52]	; 0x34
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8000918:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800091c:	409a      	lsls	r2, r3
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800091e:	ea24 0402 	bic.w	r4, r4, r2
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000922:	fa01 f203 	lsl.w	r2, r1, r3
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000926:	4322      	orrs	r2, r4
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000928:	6342      	str	r2, [r0, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800092a:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 800092c:	2407      	movs	r4, #7
    tmpreg1 = ADCx->SMPR2;
 800092e:	6905      	ldr	r5, [r0, #16]
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8000930:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8000934:	40b4      	lsls	r4, r6
    tmpreg1 &= ~tmpreg2;
 8000936:	ea25 0504 	bic.w	r5, r5, r4
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800093a:	fa03 f406 	lsl.w	r4, r3, r6
    tmpreg1 |= tmpreg2;
 800093e:	432c      	orrs	r4, r5
    ADCx->SMPR2 = tmpreg1;
 8000940:	6104      	str	r4, [r0, #16]
 8000942:	e7e4      	b.n	800090e <ADC_RegularChannelConfig+0x20>
  else if (Rank < 13)
 8000944:	2a0c      	cmp	r2, #12
 8000946:	d80c      	bhi.n	8000962 <ADC_RegularChannelConfig+0x74>
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 8000948:	241f      	movs	r4, #31
 800094a:	3a07      	subs	r2, #7
    tmpreg1 = ADCx->SQR2;
 800094c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 800094e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000952:	4094      	lsls	r4, r2
    tmpreg1 &= ~tmpreg2;
 8000954:	ea23 0304 	bic.w	r3, r3, r4
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000958:	fa01 f202 	lsl.w	r2, r1, r2
    tmpreg1 |= tmpreg2;
 800095c:	431a      	orrs	r2, r3
    ADCx->SQR2 = tmpreg1;
 800095e:	6302      	str	r2, [r0, #48]	; 0x30
 8000960:	e7e3      	b.n	800092a <ADC_RegularChannelConfig+0x3c>
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 8000962:	241f      	movs	r4, #31
 8000964:	3a0d      	subs	r2, #13
    tmpreg1 = ADCx->SQR1;
 8000966:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 8000968:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800096c:	4094      	lsls	r4, r2
    tmpreg1 &= ~tmpreg2;
 800096e:	ea23 0304 	bic.w	r3, r3, r4
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000972:	fa01 f202 	lsl.w	r2, r1, r2
    tmpreg1 |= tmpreg2;
 8000976:	431a      	orrs	r2, r3
    ADCx->SQR1 = tmpreg1;
 8000978:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 800097a:	e7d6      	b.n	800092a <ADC_RegularChannelConfig+0x3c>

0800097c <ADC_ExternalTrigConvCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
 800097c:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 800097e:	b119      	cbz	r1, 8000988 <ADC_ExternalTrigConvCmd+0xc>
    ADCx->CR2 |= CR2_EXTTRIG_Set;
 8000980:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
 8000984:	6083      	str	r3, [r0, #8]
  }
}
 8000986:	4770      	bx	lr
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
 8000988:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800098c:	e7fa      	b.n	8000984 <ADC_ExternalTrigConvCmd+0x8>

0800098e <ADC_GetConversionValue>:
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 800098e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
 8000990:	b280      	uxth	r0, r0
 8000992:	4770      	bx	lr

08000994 <ADC_GetDualModeConversionValue>:
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
 8000994:	4b01      	ldr	r3, [pc, #4]	; (800099c <ADC_GetDualModeConversionValue+0x8>)
 8000996:	f8d3 044c 	ldr.w	r0, [r3, #1100]	; 0x44c
}
 800099a:	4770      	bx	lr
 800099c:	40012000 	.word	0x40012000

080009a0 <ADC_AutoInjectedConvCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
 80009a0:	6843      	ldr	r3, [r0, #4]
  if (NewState != DISABLE)
 80009a2:	b119      	cbz	r1, 80009ac <ADC_AutoInjectedConvCmd+0xc>
    ADCx->CR1 |= CR1_JAUTO_Set;
 80009a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
 80009a8:	6043      	str	r3, [r0, #4]
  }
}
 80009aa:	4770      	bx	lr
    ADCx->CR1 &= CR1_JAUTO_Reset;
 80009ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80009b0:	e7fa      	b.n	80009a8 <ADC_AutoInjectedConvCmd+0x8>

080009b2 <ADC_InjectedDiscModeCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
 80009b2:	6843      	ldr	r3, [r0, #4]
  if (NewState != DISABLE)
 80009b4:	b119      	cbz	r1, 80009be <ADC_InjectedDiscModeCmd+0xc>
    ADCx->CR1 |= CR1_JDISCEN_Set;
 80009b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
 80009ba:	6043      	str	r3, [r0, #4]
  }
}
 80009bc:	4770      	bx	lr
    ADCx->CR1 &= CR1_JDISCEN_Reset;
 80009be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009c2:	e7fa      	b.n	80009ba <ADC_InjectedDiscModeCmd+0x8>

080009c4 <ADC_ExternalTrigInjectedConvConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 80009c4:	6883      	ldr	r3, [r0, #8]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
 80009c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 80009ca:	430b      	orrs	r3, r1
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 80009cc:	6083      	str	r3, [r0, #8]
}
 80009ce:	4770      	bx	lr

080009d0 <ADC_ExternalTrigInjectedConvCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
 80009d0:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 80009d2:	b119      	cbz	r1, 80009dc <ADC_ExternalTrigInjectedConvCmd+0xc>
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
 80009d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  }
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
 80009d8:	6083      	str	r3, [r0, #8]
  }
}
 80009da:	4770      	bx	lr
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
 80009dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009e0:	e7fa      	b.n	80009d8 <ADC_ExternalTrigInjectedConvCmd+0x8>

080009e2 <ADC_SoftwareStartInjectedConvCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 80009e2:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 80009e4:	b119      	cbz	r1, 80009ee <ADC_SoftwareStartInjectedConvCmd+0xc>
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 80009e6:	f443 1302 	orr.w	r3, r3, #2129920	; 0x208000
  }
  else
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
 80009ea:	6083      	str	r3, [r0, #8]
  }
}
 80009ec:	4770      	bx	lr
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
 80009ee:	f423 1302 	bic.w	r3, r3, #2129920	; 0x208000
 80009f2:	e7fa      	b.n	80009ea <ADC_SoftwareStartInjectedConvCmd+0x8>

080009f4 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
 80009f4:	6880      	ldr	r0, [r0, #8]
    /* JSWSTART bit is reset */
    bitstatus = RESET;
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
}
 80009f6:	f3c0 5040 	ubfx	r0, r0, #21, #1
 80009fa:	4770      	bx	lr

080009fc <ADC_InjectedChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80009fc:	2909      	cmp	r1, #9
{
 80009fe:	b570      	push	{r4, r5, r6, lr}
  if (ADC_Channel > ADC_Channel_9)
 8000a00:	d91c      	bls.n	8000a3c <ADC_InjectedChannelConfig+0x40>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
 8000a02:	2607      	movs	r6, #7
 8000a04:	f1a1 040a 	sub.w	r4, r1, #10
    tmpreg1 = ADCx->SMPR1;
 8000a08:	68c5      	ldr	r5, [r0, #12]
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
 8000a0a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000a0e:	40a6      	lsls	r6, r4
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000a10:	ea25 0506 	bic.w	r5, r5, r6
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8000a14:	fa03 f404 	lsl.w	r4, r3, r4
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000a18:	432c      	orrs	r4, r5
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000a1a:	60c4      	str	r4, [r0, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000a1c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8000a1e:	1c93      	adds	r3, r2, #2
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
 8000a20:	f3c4 5201 	ubfx	r2, r4, #20, #2
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8000a24:	1a9b      	subs	r3, r3, r2
 8000a26:	221f      	movs	r2, #31
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a2e:	409a      	lsls	r2, r3
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8000a30:	ea24 0402 	bic.w	r4, r4, r2
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8000a34:	4099      	lsls	r1, r3
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8000a36:	4321      	orrs	r1, r4
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8000a38:	6381      	str	r1, [r0, #56]	; 0x38
}
 8000a3a:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8000a3c:	2407      	movs	r4, #7
    tmpreg1 = ADCx->SMPR2;
 8000a3e:	6905      	ldr	r5, [r0, #16]
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8000a40:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8000a44:	40b4      	lsls	r4, r6
    tmpreg1 &= ~tmpreg2;
 8000a46:	ea25 0504 	bic.w	r5, r5, r4
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000a4a:	fa03 f406 	lsl.w	r4, r3, r6
    tmpreg1 |= tmpreg2;
 8000a4e:	432c      	orrs	r4, r5
    ADCx->SMPR2 = tmpreg1;
 8000a50:	6104      	str	r4, [r0, #16]
 8000a52:	e7e3      	b.n	8000a1c <ADC_InjectedChannelConfig+0x20>

08000a54 <ADC_InjectedSequencerLengthConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000a54:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
 8000a56:	3901      	subs	r1, #1
  tmpreg1 &= JSQR_JL_Reset;
 8000a58:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  tmpreg1 |= tmpreg2 << 20;
 8000a5c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8000a60:	6383      	str	r3, [r0, #56]	; 0x38
}
 8000a62:	4770      	bx	lr

08000a64 <ADC_SetInjectedOffset>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
  __IO uint32_t tmp = 0;
 8000a64:	2300      	movs	r3, #0
{
 8000a66:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000a68:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
 8000a6a:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel;
 8000a6c:	9b01      	ldr	r3, [sp, #4]
 8000a6e:	4419      	add	r1, r3
 8000a70:	9101      	str	r1, [sp, #4]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8000a72:	9b01      	ldr	r3, [sp, #4]
 8000a74:	601a      	str	r2, [r3, #0]
}
 8000a76:	b002      	add	sp, #8
 8000a78:	4770      	bx	lr

08000a7a <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
  __IO uint32_t tmp = 0;
 8000a7a:	2300      	movs	r3, #0
{
 8000a7c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000a7e:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8000a80:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel + JDR_Offset;
 8000a82:	9b01      	ldr	r3, [sp, #4]
 8000a84:	3328      	adds	r3, #40	; 0x28
 8000a86:	440b      	add	r3, r1
 8000a88:	9301      	str	r3, [sp, #4]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
 8000a8a:	9b01      	ldr	r3, [sp, #4]
 8000a8c:	6818      	ldr	r0, [r3, #0]
}
 8000a8e:	b280      	uxth	r0, r0
 8000a90:	b002      	add	sp, #8
 8000a92:	4770      	bx	lr

08000a94 <ADC_AnalogWatchdogCmd>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8000a94:	6843      	ldr	r3, [r0, #4]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
 8000a96:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000a9a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8000a9e:	430b      	orrs	r3, r1
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000aa0:	6043      	str	r3, [r0, #4]
}
 8000aa2:	4770      	bx	lr

08000aa4 <ADC_AnalogWatchdogThresholdsConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8000aa4:	6241      	str	r1, [r0, #36]	; 0x24
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 8000aa6:	6282      	str	r2, [r0, #40]	; 0x28
}
 8000aa8:	4770      	bx	lr

08000aaa <ADC_AnalogWatchdogSingleChannelConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8000aaa:	6843      	ldr	r3, [r0, #4]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
 8000aac:	f023 031f 	bic.w	r3, r3, #31
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 8000ab0:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000ab2:	6041      	str	r1, [r0, #4]
}
 8000ab4:	4770      	bx	lr
	...

08000ab8 <ADC_TempSensorVrefintCmd>:
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <ADC_TempSensorVrefintCmd+0x14>)
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
 8000aba:	689a      	ldr	r2, [r3, #8]
  if (NewState != DISABLE)
 8000abc:	b118      	cbz	r0, 8000ac6 <ADC_TempSensorVrefintCmd+0xe>
    ADC1->CR2 |= CR2_TSVREFE_Set;
 8000abe:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
 8000ac2:	609a      	str	r2, [r3, #8]
  }
}
 8000ac4:	4770      	bx	lr
    ADC1->CR2 &= CR2_TSVREFE_Reset;
 8000ac6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000aca:	e7fa      	b.n	8000ac2 <ADC_TempSensorVrefintCmd+0xa>
 8000acc:	40012400 	.word	0x40012400

08000ad0 <ADC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000ad0:	6803      	ldr	r3, [r0, #0]
 8000ad2:	4219      	tst	r1, r3
    /* ADC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
}
 8000ad4:	bf14      	ite	ne
 8000ad6:	2001      	movne	r0, #1
 8000ad8:	2000      	moveq	r0, #0
 8000ada:	4770      	bx	lr

08000adc <ADC_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8000adc:	43c9      	mvns	r1, r1
 8000ade:	6001      	str	r1, [r0, #0]
}
 8000ae0:	4770      	bx	lr

08000ae2 <ADC_GetITStatus>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
 8000ae2:	6843      	ldr	r3, [r0, #4]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8000ae4:	6800      	ldr	r0, [r0, #0]
 8000ae6:	ea10 2011 	ands.w	r0, r0, r1, lsr #8
 8000aea:	d004      	beq.n	8000af6 <ADC_GetITStatus+0x14>
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
 8000aec:	b2c9      	uxtb	r1, r1
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8000aee:	4219      	tst	r1, r3
    bitstatus = SET;
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 8000af0:	bf14      	ite	ne
 8000af2:	2001      	movne	r0, #1
 8000af4:	2000      	moveq	r0, #0
  }
  /* Return the ADC_IT status */
  return  bitstatus;
}
 8000af6:	4770      	bx	lr

08000af8 <ADC_ClearITPendingBit>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000af8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8000afc:	6001      	str	r1, [r0, #0]
}
 8000afe:	4770      	bx	lr

08000b00 <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000b00:	6803      	ldr	r3, [r0, #0]
 8000b02:	f023 0301 	bic.w	r3, r3, #1
 8000b06:	041b      	lsls	r3, r3, #16
 8000b08:	0c1b      	lsrs	r3, r3, #16
 8000b0a:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000b10:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000b12:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000b14:	60c3      	str	r3, [r0, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8000b16:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <DMA_DeInit+0xbc>)
 8000b18:	4298      	cmp	r0, r3
 8000b1a:	d104      	bne.n	8000b26 <DMA_DeInit+0x26>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8000b1c:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <DMA_DeInit+0xc0>)
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
  }
  else if (DMAy_Channelx == DMA2_Channel1)
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8000b1e:	6853      	ldr	r3, [r2, #4]
 8000b20:	f043 030f 	orr.w	r3, r3, #15
 8000b24:	e026      	b.n	8000b74 <DMA_DeInit+0x74>
  else if (DMAy_Channelx == DMA1_Channel2)
 8000b26:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <DMA_DeInit+0xc4>)
 8000b28:	4298      	cmp	r0, r3
 8000b2a:	d104      	bne.n	8000b36 <DMA_DeInit+0x36>
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8000b2c:	4a24      	ldr	r2, [pc, #144]	; (8000bc0 <DMA_DeInit+0xc0>)
  }
  else if (DMAy_Channelx == DMA2_Channel2)
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8000b2e:	6853      	ldr	r3, [r2, #4]
 8000b30:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000b34:	e01e      	b.n	8000b74 <DMA_DeInit+0x74>
  else if (DMAy_Channelx == DMA1_Channel3)
 8000b36:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <DMA_DeInit+0xc8>)
 8000b38:	4298      	cmp	r0, r3
 8000b3a:	d104      	bne.n	8000b46 <DMA_DeInit+0x46>
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8000b3c:	4a20      	ldr	r2, [pc, #128]	; (8000bc0 <DMA_DeInit+0xc0>)
  }
  else if (DMAy_Channelx == DMA2_Channel3)
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8000b3e:	6853      	ldr	r3, [r2, #4]
 8000b40:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000b44:	e016      	b.n	8000b74 <DMA_DeInit+0x74>
  else if (DMAy_Channelx == DMA1_Channel4)
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <DMA_DeInit+0xcc>)
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	d104      	bne.n	8000b56 <DMA_DeInit+0x56>
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8000b4c:	4a1c      	ldr	r2, [pc, #112]	; (8000bc0 <DMA_DeInit+0xc0>)
  }
  else if (DMAy_Channelx == DMA2_Channel4)
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8000b4e:	6853      	ldr	r3, [r2, #4]
 8000b50:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000b54:	e00e      	b.n	8000b74 <DMA_DeInit+0x74>
  else if (DMAy_Channelx == DMA1_Channel5)
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <DMA_DeInit+0xd0>)
 8000b58:	4298      	cmp	r0, r3
 8000b5a:	d104      	bne.n	8000b66 <DMA_DeInit+0x66>
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 8000b5c:	4a18      	ldr	r2, [pc, #96]	; (8000bc0 <DMA_DeInit+0xc0>)
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8000b5e:	6853      	ldr	r3, [r2, #4]
 8000b60:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000b64:	e006      	b.n	8000b74 <DMA_DeInit+0x74>
  else if (DMAy_Channelx == DMA1_Channel6)
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <DMA_DeInit+0xd4>)
 8000b68:	4298      	cmp	r0, r3
 8000b6a:	d105      	bne.n	8000b78 <DMA_DeInit+0x78>
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <DMA_DeInit+0xc0>)
 8000b6e:	6853      	ldr	r3, [r2, #4]
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8000b74:	6053      	str	r3, [r2, #4]
    }
  }
}
 8000b76:	4770      	bx	lr
  else if (DMAy_Channelx == DMA1_Channel7)
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <DMA_DeInit+0xd8>)
 8000b7a:	4298      	cmp	r0, r3
 8000b7c:	d104      	bne.n	8000b88 <DMA_DeInit+0x88>
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8000b7e:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <DMA_DeInit+0xc0>)
 8000b80:	6853      	ldr	r3, [r2, #4]
 8000b82:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000b86:	e7f5      	b.n	8000b74 <DMA_DeInit+0x74>
  else if (DMAy_Channelx == DMA2_Channel1)
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <DMA_DeInit+0xdc>)
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d101      	bne.n	8000b92 <DMA_DeInit+0x92>
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8000b8e:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <DMA_DeInit+0xe0>)
 8000b90:	e7c5      	b.n	8000b1e <DMA_DeInit+0x1e>
  else if (DMAy_Channelx == DMA2_Channel2)
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <DMA_DeInit+0xe4>)
 8000b94:	4298      	cmp	r0, r3
 8000b96:	d101      	bne.n	8000b9c <DMA_DeInit+0x9c>
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8000b98:	4a11      	ldr	r2, [pc, #68]	; (8000be0 <DMA_DeInit+0xe0>)
 8000b9a:	e7c8      	b.n	8000b2e <DMA_DeInit+0x2e>
  else if (DMAy_Channelx == DMA2_Channel3)
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <DMA_DeInit+0xe8>)
 8000b9e:	4298      	cmp	r0, r3
 8000ba0:	d101      	bne.n	8000ba6 <DMA_DeInit+0xa6>
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <DMA_DeInit+0xe0>)
 8000ba4:	e7cb      	b.n	8000b3e <DMA_DeInit+0x3e>
  else if (DMAy_Channelx == DMA2_Channel4)
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <DMA_DeInit+0xec>)
 8000ba8:	4298      	cmp	r0, r3
 8000baa:	d101      	bne.n	8000bb0 <DMA_DeInit+0xb0>
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8000bac:	4a0c      	ldr	r2, [pc, #48]	; (8000be0 <DMA_DeInit+0xe0>)
 8000bae:	e7ce      	b.n	8000b4e <DMA_DeInit+0x4e>
    if (DMAy_Channelx == DMA2_Channel5)
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <DMA_DeInit+0xf0>)
 8000bb2:	4298      	cmp	r0, r3
 8000bb4:	d1df      	bne.n	8000b76 <DMA_DeInit+0x76>
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <DMA_DeInit+0xe0>)
 8000bb8:	e7d1      	b.n	8000b5e <DMA_DeInit+0x5e>
 8000bba:	bf00      	nop
 8000bbc:	40020008 	.word	0x40020008
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	4002001c 	.word	0x4002001c
 8000bc8:	40020030 	.word	0x40020030
 8000bcc:	40020044 	.word	0x40020044
 8000bd0:	40020058 	.word	0x40020058
 8000bd4:	4002006c 	.word	0x4002006c
 8000bd8:	40020080 	.word	0x40020080
 8000bdc:	40020408 	.word	0x40020408
 8000be0:	40020400 	.word	0x40020400
 8000be4:	4002041c 	.word	0x4002041c
 8000be8:	40020430 	.word	0x40020430
 8000bec:	40020444 	.word	0x40020444
 8000bf0:	40020458 	.word	0x40020458

08000bf4 <DMA_Init>:
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000bf4:	688b      	ldr	r3, [r1, #8]
{
 8000bf6:	b510      	push	{r4, lr}
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000bf8:	6a0c      	ldr	r4, [r1, #32]
  tmpreg = DMAy_Channelx->CCR;
 8000bfa:	6802      	ldr	r2, [r0, #0]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000bfc:	4323      	orrs	r3, r4
 8000bfe:	690c      	ldr	r4, [r1, #16]
  tmpreg &= CCR_CLEAR_Mask;
 8000c00:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000c04:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c06:	694c      	ldr	r4, [r1, #20]
  tmpreg &= CCR_CLEAR_Mask;
 8000c08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c0c:	4323      	orrs	r3, r4
 8000c0e:	698c      	ldr	r4, [r1, #24]
 8000c10:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c12:	69cc      	ldr	r4, [r1, #28]
 8000c14:	4323      	orrs	r3, r4
 8000c16:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8000c18:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000c1a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8000c1c:	4323      	orrs	r3, r4
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000c1e:	4313      	orrs	r3, r2

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000c20:	6003      	str	r3, [r0, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000c22:	68cb      	ldr	r3, [r1, #12]
 8000c24:	6043      	str	r3, [r0, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000c26:	680b      	ldr	r3, [r1, #0]
 8000c28:	6083      	str	r3, [r0, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000c2a:	684b      	ldr	r3, [r1, #4]
 8000c2c:	60c3      	str	r3, [r0, #12]
}
 8000c2e:	bd10      	pop	{r4, pc}

08000c30 <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8000c30:	2300      	movs	r3, #0
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 8000c32:	e9c0 3300 	strd	r3, r3, [r0]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8000c36:	e9c0 3302 	strd	r3, r3, [r0, #8]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8000c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8000c3e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8000c42:	e9c0 3308 	strd	r3, r3, [r0, #32]
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8000c46:	6283      	str	r3, [r0, #40]	; 0x28
}
 8000c48:	4770      	bx	lr

08000c4a <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000c4a:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8000c4c:	b119      	cbz	r1, 8000c56 <DMA_Cmd+0xc>
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000c52:	6003      	str	r3, [r0, #0]
  }
}
 8000c54:	4770      	bx	lr
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000c56:	f023 0301 	bic.w	r3, r3, #1
 8000c5a:	041b      	lsls	r3, r3, #16
 8000c5c:	0c1b      	lsrs	r3, r3, #16
 8000c5e:	e7f8      	b.n	8000c52 <DMA_Cmd+0x8>

08000c60 <DMA_ITConfig>:
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8000c60:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8000c62:	b112      	cbz	r2, 8000c6a <DMA_ITConfig+0xa>
    DMAy_Channelx->CCR |= DMA_IT;
 8000c64:	4319      	orrs	r1, r3
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8000c66:	6001      	str	r1, [r0, #0]
  }
}
 8000c68:	4770      	bx	lr
    DMAy_Channelx->CCR &= ~DMA_IT;
 8000c6a:	ea23 0101 	bic.w	r1, r3, r1
 8000c6e:	e7fa      	b.n	8000c66 <DMA_ITConfig+0x6>

08000c70 <DMA_SetCurrDataCounter>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 8000c70:	6041      	str	r1, [r0, #4]
}
 8000c72:	4770      	bx	lr

08000c74 <DMA_GetCurrDataCounter>:
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8000c74:	6840      	ldr	r0, [r0, #4]
}
 8000c76:	b280      	uxth	r0, r0
 8000c78:	4770      	bx	lr
	...

08000c7c <DMA_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000c7c:	00c3      	lsls	r3, r0, #3
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8000c7e:	bf4c      	ite	mi
 8000c80:	4b03      	ldrmi	r3, [pc, #12]	; (8000c90 <DMA_GetFlagStatus+0x14>)
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 8000c82:	4b04      	ldrpl	r3, [pc, #16]	; (8000c94 <DMA_GetFlagStatus+0x18>)
 8000c84:	681b      	ldr	r3, [r3, #0]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8000c86:	4203      	tst	r3, r0
    bitstatus = RESET;
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
}
 8000c88:	bf14      	ite	ne
 8000c8a:	2001      	movne	r0, #1
 8000c8c:	2000      	moveq	r0, #0
 8000c8e:	4770      	bx	lr
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40020000 	.word	0x40020000

08000c98 <DMA_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000c98:	00c3      	lsls	r3, r0, #3
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8000c9a:	bf4c      	ite	mi
 8000c9c:	4b01      	ldrmi	r3, [pc, #4]	; (8000ca4 <DMA_ClearFlag+0xc>)
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8000c9e:	4b02      	ldrpl	r3, [pc, #8]	; (8000ca8 <DMA_ClearFlag+0x10>)
 8000ca0:	6058      	str	r0, [r3, #4]
  }
}
 8000ca2:	4770      	bx	lr
 8000ca4:	40020400 	.word	0x40020400
 8000ca8:	40020000 	.word	0x40020000

08000cac <DMA_GetITStatus>:
 8000cac:	f7ff bfe6 	b.w	8000c7c <DMA_GetFlagStatus>

08000cb0 <DMA_ClearITPendingBit>:
 8000cb0:	f7ff bff2 	b.w	8000c98 <DMA_ClearFlag>

08000cb4 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <EXTI_DeInit+0x14>)
 8000cb8:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8000cba:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
 8000cbc:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
 8000cbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
 8000cc0:	4a02      	ldr	r2, [pc, #8]	; (8000ccc <EXTI_DeInit+0x18>)
 8000cc2:	615a      	str	r2, [r3, #20]
}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40010400 	.word	0x40010400
 8000ccc:	000fffff 	.word	0x000fffff

08000cd0 <EXTI_Init>:
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000cd0:	7902      	ldrb	r2, [r0, #4]
{
 8000cd2:	b530      	push	{r4, r5, lr}
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000cd4:	7983      	ldrb	r3, [r0, #6]
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000cd6:	6805      	ldr	r5, [r0, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000cd8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000cdc:	43e9      	mvns	r1, r5
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000cde:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000ce2:	b323      	cbz	r3, 8000d2e <EXTI_Init+0x5e>
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <EXTI_Init+0x68>)
 8000ce6:	681c      	ldr	r4, [r3, #0]
 8000ce8:	400c      	ands	r4, r1
 8000cea:	601c      	str	r4, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000cec:	685c      	ldr	r4, [r3, #4]
 8000cee:	4021      	ands	r1, r4
 8000cf0:	6059      	str	r1, [r3, #4]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000cf2:	6811      	ldr	r1, [r2, #0]
 8000cf4:	4329      	orrs	r1, r5
 8000cf6:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000cf8:	6899      	ldr	r1, [r3, #8]
 8000cfa:	6802      	ldr	r2, [r0, #0]
 8000cfc:	ea21 0102 	bic.w	r1, r1, r2
 8000d00:	6099      	str	r1, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000d02:	68d9      	ldr	r1, [r3, #12]
 8000d04:	ea21 0102 	bic.w	r1, r1, r2
 8000d08:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000d0a:	7941      	ldrb	r1, [r0, #5]
 8000d0c:	2910      	cmp	r1, #16
 8000d0e:	d106      	bne.n	8000d1e <EXTI_Init+0x4e>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000d10:	6899      	ldr	r1, [r3, #8]
 8000d12:	4311      	orrs	r1, r2
 8000d14:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000d16:	68d9      	ldr	r1, [r3, #12]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	60da      	str	r2, [r3, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000d1c:	bd30      	pop	{r4, r5, pc}
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000d1e:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8000d22:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000d26:	6819      	ldr	r1, [r3, #0]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e7f6      	b.n	8000d1c <EXTI_Init+0x4c>
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000d2e:	6813      	ldr	r3, [r2, #0]
 8000d30:	400b      	ands	r3, r1
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	e7f2      	b.n	8000d1c <EXTI_Init+0x4c>
 8000d36:	bf00      	nop
 8000d38:	40010400 	.word	0x40010400

08000d3c <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8000d3c:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8000d3e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8000d42:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8000d44:	8082      	strh	r2, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8000d46:	7183      	strb	r3, [r0, #6]
}
 8000d48:	4770      	bx	lr
	...

08000d4c <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8000d4c:	4a02      	ldr	r2, [pc, #8]	; (8000d58 <EXTI_GenerateSWInterrupt+0xc>)
 8000d4e:	6913      	ldr	r3, [r2, #16]
 8000d50:	4303      	orrs	r3, r0
 8000d52:	6113      	str	r3, [r2, #16]
}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40010400 	.word	0x40010400

08000d5c <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <EXTI_GetFlagStatus+0x10>)
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	4203      	tst	r3, r0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8000d62:	bf14      	ite	ne
 8000d64:	2001      	movne	r0, #1
 8000d66:	2000      	moveq	r0, #0
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40010400 	.word	0x40010400

08000d70 <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000d70:	4b01      	ldr	r3, [pc, #4]	; (8000d78 <EXTI_ClearFlag+0x8>)
 8000d72:	6158      	str	r0, [r3, #20]
}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40010400 	.word	0x40010400

08000d7c <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000d7c:	4602      	mov	r2, r0
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <EXTI_GetITStatus+0x18>)
 8000d80:	6819      	ldr	r1, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000d82:	6958      	ldr	r0, [r3, #20]
 8000d84:	4010      	ands	r0, r2
 8000d86:	d003      	beq.n	8000d90 <EXTI_GetITStatus+0x14>
 8000d88:	4211      	tst	r1, r2
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8000d8a:	bf14      	ite	ne
 8000d8c:	2001      	movne	r0, #1
 8000d8e:	2000      	moveq	r0, #0
  }
  return bitstatus;
}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40010400 	.word	0x40010400

08000d98 <EXTI_ClearITPendingBit>:
 8000d98:	4b01      	ldr	r3, [pc, #4]	; (8000da0 <EXTI_ClearITPendingBit+0x8>)
 8000d9a:	6158      	str	r0, [r3, #20]
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40010400 	.word	0x40010400

08000da4 <FLASH_SetLatency>:
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 8000da4:	4a03      	ldr	r2, [pc, #12]	; (8000db4 <FLASH_SetLatency+0x10>)
 8000da6:	6813      	ldr	r3, [r2, #0]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 8000da8:	f003 0338 	and.w	r3, r3, #56	; 0x38
  tmpreg |= FLASH_Latency;
 8000dac:	4303      	orrs	r3, r0
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40022000 	.word	0x40022000

08000db8 <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <FLASH_HalfCycleAccessCmd+0x14>)
 8000dba:	6819      	ldr	r1, [r3, #0]
 8000dbc:	f021 0108 	bic.w	r1, r1, #8
 8000dc0:	6019      	str	r1, [r3, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4302      	orrs	r2, r0
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40022000 	.word	0x40022000

08000dd0 <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <FLASH_PrefetchBufferCmd+0x14>)
 8000dd2:	6819      	ldr	r1, [r3, #0]
 8000dd4:	f021 0110 	bic.w	r1, r1, #16
 8000dd8:	6019      	str	r1, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4302      	orrs	r2, r0
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40022000 	.word	0x40022000

08000de8 <FLASH_Unlock>:
  * @retval None
  */
void FLASH_Unlock(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <FLASH_Unlock+0x10>)
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <FLASH_Unlock+0x14>)
 8000dec:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8000dee:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000df2:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40022000 	.word	0x40022000
 8000dfc:	45670123 	.word	0x45670123

08000e00 <FLASH_UnlockBank1>:
 8000e00:	f7ff bff2 	b.w	8000de8 <FLASH_Unlock>

08000e04 <FLASH_Lock>:
  * @retval None
  */
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
  FLASH->CR |= CR_LOCK_Set;
 8000e04:	4a02      	ldr	r2, [pc, #8]	; (8000e10 <FLASH_Lock+0xc>)
 8000e06:	6913      	ldr	r3, [r2, #16]
 8000e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0c:	6113      	str	r3, [r2, #16]

#ifdef STM32F10X_XL
  /* Set the Lock Bit to lock the FPEC and the CR of  Bank2 */
  FLASH->CR2 |= CR_LOCK_Set;
#endif /* STM32F10X_XL */
}
 8000e0e:	4770      	bx	lr
 8000e10:	40022000 	.word	0x40022000

08000e14 <FLASH_LockBank1>:
 8000e14:	f7ff bff6 	b.w	8000e04 <FLASH_Lock>

08000e18 <FLASH_GetUserOptionByte>:
  *         and RST_STDBY(Bit2).
  */
uint32_t FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (uint32_t)(FLASH->OBR >> 2);
 8000e18:	4b01      	ldr	r3, [pc, #4]	; (8000e20 <FLASH_GetUserOptionByte+0x8>)
 8000e1a:	69d8      	ldr	r0, [r3, #28]
}
 8000e1c:	0880      	lsrs	r0, r0, #2
 8000e1e:	4770      	bx	lr
 8000e20:	40022000 	.word	0x40022000

08000e24 <FLASH_GetWriteProtectionOptionByte>:
  * @retval The FLASH Write Protection  Option Bytes Register value
  */
uint32_t FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Flash write protection Register value */
  return (uint32_t)(FLASH->WRPR);
 8000e24:	4b01      	ldr	r3, [pc, #4]	; (8000e2c <FLASH_GetWriteProtectionOptionByte+0x8>)
 8000e26:	6a18      	ldr	r0, [r3, #32]
}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40022000 	.word	0x40022000

08000e30 <FLASH_GetReadOutProtectionStatus>:
  * @retval FLASH ReadOut Protection Status(SET or RESET)
  */
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;
  if ((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
 8000e30:	4b02      	ldr	r3, [pc, #8]	; (8000e3c <FLASH_GetReadOutProtectionStatus+0xc>)
 8000e32:	69d8      	ldr	r0, [r3, #28]
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 8000e34:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40022000 	.word	0x40022000

08000e40 <FLASH_GetPrefetchBufferStatus>:
  */
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (uint32_t)RESET)
 8000e40:	4b02      	ldr	r3, [pc, #8]	; (8000e4c <FLASH_GetPrefetchBufferStatus+0xc>)
 8000e42:	6818      	ldr	r0, [r3, #0]
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 8000e44:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40022000 	.word	0x40022000

08000e50 <FLASH_ITConfig>:
#else
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <FLASH_ITConfig+0x14>)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8000e52:	691a      	ldr	r2, [r3, #16]
  if(NewState != DISABLE)
 8000e54:	b111      	cbz	r1, 8000e5c <FLASH_ITConfig+0xc>
    FLASH->CR |= FLASH_IT;
 8000e56:	4310      	orrs	r0, r2
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8000e58:	6118      	str	r0, [r3, #16]
  }
#endif /* STM32F10X_XL */
}
 8000e5a:	4770      	bx	lr
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8000e5c:	ea22 0000 	bic.w	r0, r2, r0
 8000e60:	e7fa      	b.n	8000e58 <FLASH_ITConfig+0x8>
 8000e62:	bf00      	nop
 8000e64:	40022000 	.word	0x40022000

08000e68 <FLASH_GetFlagStatus>:
    }
  }
#else
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 8000e68:	2801      	cmp	r0, #1
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <FLASH_GetFlagStatus+0x1c>)
 8000e6c:	d103      	bne.n	8000e76 <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
 8000e6e:	69d8      	ldr	r0, [r3, #28]
 8000e70:	f000 0001 	and.w	r0, r0, #1
 8000e74:	4770      	bx	lr
      bitstatus = RESET;
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	4203      	tst	r3, r0
      bitstatus = SET;
 8000e7a:	bf14      	ite	ne
 8000e7c:	2001      	movne	r0, #1
 8000e7e:	2000      	moveq	r0, #0
  }
#endif /* STM32F10X_XL */

  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40022000 	.word	0x40022000

08000e88 <FLASH_ClearFlag>:
#else
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8000e88:	4b01      	ldr	r3, [pc, #4]	; (8000e90 <FLASH_ClearFlag+0x8>)
 8000e8a:	60d8      	str	r0, [r3, #12]
#endif /* STM32F10X_XL */
}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40022000 	.word	0x40022000

08000e94 <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <FLASH_GetStatus+0x24>)
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	07d1      	lsls	r1, r2, #31
 8000e9a:	d409      	bmi.n	8000eb0 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	0752      	lsls	r2, r2, #29
 8000ea0:	d408      	bmi.n	8000eb4 <FLASH_GetStatus+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
 8000ea2:	68db      	ldr	r3, [r3, #12]
      {
        flashstatus = FLASH_ERROR_WRP;
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8000ea4:	f013 0f10 	tst.w	r3, #16
 8000ea8:	bf14      	ite	ne
 8000eaa:	2003      	movne	r0, #3
 8000eac:	2004      	moveq	r0, #4
 8000eae:	4770      	bx	lr
    flashstatus = FLASH_BUSY;
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	4770      	bx	lr
      flashstatus = FLASH_ERROR_PG;
 8000eb4:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 8000eb6:	4770      	bx	lr
 8000eb8:	40022000 	.word	0x40022000

08000ebc <FLASH_GetBank1Status>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <FLASH_GetBank1Status+0x24>)
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	07d1      	lsls	r1, r2, #31
 8000ec2:	d409      	bmi.n	8000ed8 <FLASH_GetBank1Status+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000ec4:	68da      	ldr	r2, [r3, #12]
 8000ec6:	0752      	lsls	r2, r2, #29
 8000ec8:	d408      	bmi.n	8000edc <FLASH_GetBank1Status+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000eca:	68db      	ldr	r3, [r3, #12]
      {
        flashstatus = FLASH_ERROR_WRP;
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8000ecc:	f013 0f10 	tst.w	r3, #16
 8000ed0:	bf14      	ite	ne
 8000ed2:	2003      	movne	r0, #3
 8000ed4:	2004      	moveq	r0, #4
 8000ed6:	4770      	bx	lr
    flashstatus = FLASH_BUSY;
 8000ed8:	2001      	movs	r0, #1
 8000eda:	4770      	bx	lr
      flashstatus = FLASH_ERROR_PG;
 8000edc:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 8000ede:	4770      	bx	lr
 8000ee0:	40022000 	.word	0x40022000

08000ee4 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000ee4:	b510      	push	{r4, lr}
 8000ee6:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 8000ee8:	f7ff ffe8 	bl	8000ebc <FLASH_GetBank1Status>
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000eec:	2801      	cmp	r0, #1
 8000eee:	d106      	bne.n	8000efe <FLASH_WaitForLastOperation+0x1a>
 8000ef0:	b90c      	cbnz	r4, 8000ef6 <FLASH_WaitForLastOperation+0x12>
    status = FLASH_GetBank1Status();
    Timeout--;
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8000ef2:	2005      	movs	r0, #5
  }
  /* Return the operation status */
  return status;
}
 8000ef4:	bd10      	pop	{r4, pc}
    status = FLASH_GetBank1Status();
 8000ef6:	f7ff ffe1 	bl	8000ebc <FLASH_GetBank1Status>
    Timeout--;
 8000efa:	3c01      	subs	r4, #1
 8000efc:	e7f6      	b.n	8000eec <FLASH_WaitForLastOperation+0x8>
    status = FLASH_TIMEOUT;
 8000efe:	2c00      	cmp	r4, #0
 8000f00:	bf08      	it	eq
 8000f02:	2005      	moveq	r0, #5
 8000f04:	e7f6      	b.n	8000ef4 <FLASH_WaitForLastOperation+0x10>
	...

08000f08 <FLASH_ErasePage>:
{
 8000f08:	b538      	push	{r3, r4, r5, lr}
 8000f0a:	4605      	mov	r5, r0
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8000f0c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000f10:	f7ff ffe8 	bl	8000ee4 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8000f14:	2804      	cmp	r0, #4
 8000f16:	d113      	bne.n	8000f40 <FLASH_ErasePage+0x38>
    FLASH->CR|= CR_PER_Set;
 8000f18:	4c0a      	ldr	r4, [pc, #40]	; (8000f44 <FLASH_ErasePage+0x3c>)
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8000f1a:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
    FLASH->CR|= CR_PER_Set;
 8000f1e:	6923      	ldr	r3, [r4, #16]
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 8000f26:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 8000f28:	6923      	ldr	r3, [r4, #16]
 8000f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f2e:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8000f30:	f7ff ffd8 	bl	8000ee4 <FLASH_WaitForLastOperation>
    FLASH->CR &= CR_PER_Reset;
 8000f34:	6923      	ldr	r3, [r4, #16]
 8000f36:	f023 0302 	bic.w	r3, r3, #2
 8000f3a:	04db      	lsls	r3, r3, #19
 8000f3c:	0cdb      	lsrs	r3, r3, #19
 8000f3e:	6123      	str	r3, [r4, #16]
}
 8000f40:	bd38      	pop	{r3, r4, r5, pc}
 8000f42:	bf00      	nop
 8000f44:	40022000 	.word	0x40022000

08000f48 <FLASH_EraseAllPages>:
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8000f48:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
{
 8000f4c:	b510      	push	{r4, lr}
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8000f4e:	f7ff ffc9 	bl	8000ee4 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8000f52:	2804      	cmp	r0, #4
 8000f54:	d112      	bne.n	8000f7c <FLASH_EraseAllPages+0x34>
     FLASH->CR |= CR_MER_Set;
 8000f56:	4c0a      	ldr	r4, [pc, #40]	; (8000f80 <FLASH_EraseAllPages+0x38>)
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8000f58:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
     FLASH->CR |= CR_MER_Set;
 8000f5c:	6923      	ldr	r3, [r4, #16]
 8000f5e:	f043 0304 	orr.w	r3, r3, #4
 8000f62:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 8000f64:	6923      	ldr	r3, [r4, #16]
 8000f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f6a:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8000f6c:	f7ff ffba 	bl	8000ee4 <FLASH_WaitForLastOperation>
    FLASH->CR &= CR_MER_Reset;
 8000f70:	6923      	ldr	r3, [r4, #16]
 8000f72:	f023 0304 	bic.w	r3, r3, #4
 8000f76:	04db      	lsls	r3, r3, #19
 8000f78:	0cdb      	lsrs	r3, r3, #19
 8000f7a:	6123      	str	r3, [r4, #16]
}
 8000f7c:	bd10      	pop	{r4, pc}
 8000f7e:	bf00      	nop
 8000f80:	40022000 	.word	0x40022000

08000f84 <FLASH_EraseAllBank1Pages>:
 8000f84:	f7ff bfe0 	b.w	8000f48 <FLASH_EraseAllPages>

08000f88 <FLASH_EraseOptionBytes>:
{
 8000f88:	b538      	push	{r3, r4, r5, lr}
  if(FLASH_GetReadOutProtectionStatus() != RESET)
 8000f8a:	f7ff ff51 	bl	8000e30 <FLASH_GetReadOutProtectionStatus>
    rdptmp = 0x00;  
 8000f8e:	2800      	cmp	r0, #0
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8000f90:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
    rdptmp = 0x00;  
 8000f94:	bf0c      	ite	eq
 8000f96:	25a5      	moveq	r5, #165	; 0xa5
 8000f98:	2500      	movne	r5, #0
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8000f9a:	f7ff ffa3 	bl	8000ee4 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8000f9e:	2804      	cmp	r0, #4
 8000fa0:	d12b      	bne.n	8000ffa <FLASH_EraseOptionBytes+0x72>
    FLASH->OPTKEYR = FLASH_KEY1;
 8000fa2:	4c16      	ldr	r4, [pc, #88]	; (8000ffc <FLASH_EraseOptionBytes+0x74>)
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <FLASH_EraseOptionBytes+0x78>)
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8000fa6:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
    FLASH->OPTKEYR = FLASH_KEY1;
 8000faa:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8000fac:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8000fb0:	60a3      	str	r3, [r4, #8]
    FLASH->CR |= CR_OPTER_Set;
 8000fb2:	6923      	ldr	r3, [r4, #16]
 8000fb4:	f043 0320 	orr.w	r3, r3, #32
 8000fb8:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 8000fba:	6923      	ldr	r3, [r4, #16]
 8000fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc0:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8000fc2:	f7ff ff8f 	bl	8000ee4 <FLASH_WaitForLastOperation>
    if(status == FLASH_COMPLETE)
 8000fc6:	2804      	cmp	r0, #4
 8000fc8:	d10f      	bne.n	8000fea <FLASH_EraseOptionBytes+0x62>
      FLASH->CR &= CR_OPTER_Reset;
 8000fca:	6923      	ldr	r3, [r4, #16]
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000fcc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      FLASH->CR &= CR_OPTER_Reset;
 8000fd0:	f023 0320 	bic.w	r3, r3, #32
 8000fd4:	04db      	lsls	r3, r3, #19
 8000fd6:	0cdb      	lsrs	r3, r3, #19
 8000fd8:	6123      	str	r3, [r4, #16]
      FLASH->CR |= CR_OPTPG_Set;
 8000fda:	6923      	ldr	r3, [r4, #16]
 8000fdc:	f043 0310 	orr.w	r3, r3, #16
 8000fe0:	6123      	str	r3, [r4, #16]
      OB->RDP = (uint16_t)rdptmp; 
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <FLASH_EraseOptionBytes+0x7c>)
 8000fe4:	801d      	strh	r5, [r3, #0]
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000fe6:	f7ff ff7d 	bl	8000ee4 <FLASH_WaitForLastOperation>
      if (status != FLASH_TIMEOUT)
 8000fea:	2805      	cmp	r0, #5
 8000fec:	d005      	beq.n	8000ffa <FLASH_EraseOptionBytes+0x72>
        FLASH->CR &= CR_OPTPG_Reset;
 8000fee:	6923      	ldr	r3, [r4, #16]
 8000ff0:	f023 0310 	bic.w	r3, r3, #16
 8000ff4:	04db      	lsls	r3, r3, #19
 8000ff6:	0cdb      	lsrs	r3, r3, #19
 8000ff8:	6123      	str	r3, [r4, #16]
}
 8000ffa:	bd38      	pop	{r3, r4, r5, pc}
 8000ffc:	40022000 	.word	0x40022000
 8001000:	45670123 	.word	0x45670123
 8001004:	1ffff800 	.word	0x1ffff800

08001008 <FLASH_ProgramWord>:
  __IO uint32_t tmp = 0;
 8001008:	2300      	movs	r3, #0
{
 800100a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800100c:	4606      	mov	r6, r0
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800100e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
{
 8001012:	460d      	mov	r5, r1
  __IO uint32_t tmp = 0;
 8001014:	9301      	str	r3, [sp, #4]
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001016:	f7ff ff65 	bl	8000ee4 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 800101a:	2804      	cmp	r0, #4
 800101c:	d11b      	bne.n	8001056 <FLASH_ProgramWord+0x4e>
    FLASH->CR |= CR_PG_Set;
 800101e:	4c0f      	ldr	r4, [pc, #60]	; (800105c <FLASH_ProgramWord+0x54>)
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001020:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    FLASH->CR |= CR_PG_Set;
 8001024:	6923      	ldr	r3, [r4, #16]
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6123      	str	r3, [r4, #16]
    *(__IO uint16_t*)Address = (uint16_t)Data;
 800102c:	b2ab      	uxth	r3, r5
 800102e:	8033      	strh	r3, [r6, #0]
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001030:	f7ff ff58 	bl	8000ee4 <FLASH_WaitForLastOperation>
    if(status == FLASH_COMPLETE)
 8001034:	2804      	cmp	r0, #4
 8001036:	d108      	bne.n	800104a <FLASH_ProgramWord+0x42>
      tmp = Address + 2;
 8001038:	3602      	adds	r6, #2
 800103a:	9601      	str	r6, [sp, #4]
      *(__IO uint16_t*) tmp = Data >> 16;
 800103c:	9b01      	ldr	r3, [sp, #4]
 800103e:	0c2d      	lsrs	r5, r5, #16
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001040:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      *(__IO uint16_t*) tmp = Data >> 16;
 8001044:	801d      	strh	r5, [r3, #0]
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001046:	f7ff ff4d 	bl	8000ee4 <FLASH_WaitForLastOperation>
      FLASH->CR &= CR_PG_Reset;
 800104a:	6923      	ldr	r3, [r4, #16]
 800104c:	f023 0301 	bic.w	r3, r3, #1
 8001050:	04db      	lsls	r3, r3, #19
 8001052:	0cdb      	lsrs	r3, r3, #19
 8001054:	6123      	str	r3, [r4, #16]
}
 8001056:	b002      	add	sp, #8
 8001058:	bd70      	pop	{r4, r5, r6, pc}
 800105a:	bf00      	nop
 800105c:	40022000 	.word	0x40022000

08001060 <FLASH_ProgramHalfWord>:
{
 8001060:	b570      	push	{r4, r5, r6, lr}
 8001062:	4605      	mov	r5, r0
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001064:	f44f 5000 	mov.w	r0, #8192	; 0x2000
{
 8001068:	460e      	mov	r6, r1
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800106a:	f7ff ff3b 	bl	8000ee4 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 800106e:	2804      	cmp	r0, #4
 8001070:	d10f      	bne.n	8001092 <FLASH_ProgramHalfWord+0x32>
    FLASH->CR |= CR_PG_Set;
 8001072:	4c08      	ldr	r4, [pc, #32]	; (8001094 <FLASH_ProgramHalfWord+0x34>)
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001074:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    FLASH->CR |= CR_PG_Set;
 8001078:	6923      	ldr	r3, [r4, #16]
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6123      	str	r3, [r4, #16]
    *(__IO uint16_t*)Address = Data;
 8001080:	802e      	strh	r6, [r5, #0]
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001082:	f7ff ff2f 	bl	8000ee4 <FLASH_WaitForLastOperation>
    FLASH->CR &= CR_PG_Reset;
 8001086:	6923      	ldr	r3, [r4, #16]
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	04db      	lsls	r3, r3, #19
 800108e:	0cdb      	lsrs	r3, r3, #19
 8001090:	6123      	str	r3, [r4, #16]
}
 8001092:	bd70      	pop	{r4, r5, r6, pc}
 8001094:	40022000 	.word	0x40022000

08001098 <FLASH_ProgramOptionByteData>:
{
 8001098:	b570      	push	{r4, r5, r6, lr}
 800109a:	4606      	mov	r6, r0
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800109c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
{
 80010a0:	460d      	mov	r5, r1
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80010a2:	f7ff ff1f 	bl	8000ee4 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 80010a6:	2804      	cmp	r0, #4
 80010a8:	d117      	bne.n	80010da <FLASH_ProgramOptionByteData+0x42>
    FLASH->OPTKEYR = FLASH_KEY1;
 80010aa:	4c0c      	ldr	r4, [pc, #48]	; (80010dc <FLASH_ProgramOptionByteData+0x44>)
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <FLASH_ProgramOptionByteData+0x48>)
    *(__IO uint16_t*)Address = Data;
 80010ae:	b2ad      	uxth	r5, r5
    FLASH->OPTKEYR = FLASH_KEY1;
 80010b0:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80010b2:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80010b6:	60a3      	str	r3, [r4, #8]
    FLASH->CR |= CR_OPTPG_Set; 
 80010b8:	6923      	ldr	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80010ba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    FLASH->CR |= CR_OPTPG_Set; 
 80010be:	f043 0310 	orr.w	r3, r3, #16
 80010c2:	6123      	str	r3, [r4, #16]
    *(__IO uint16_t*)Address = Data;
 80010c4:	8035      	strh	r5, [r6, #0]
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80010c6:	f7ff ff0d 	bl	8000ee4 <FLASH_WaitForLastOperation>
    if(status != FLASH_TIMEOUT)
 80010ca:	2805      	cmp	r0, #5
 80010cc:	d005      	beq.n	80010da <FLASH_ProgramOptionByteData+0x42>
      FLASH->CR &= CR_OPTPG_Reset;
 80010ce:	6923      	ldr	r3, [r4, #16]
 80010d0:	f023 0310 	bic.w	r3, r3, #16
 80010d4:	04db      	lsls	r3, r3, #19
 80010d6:	0cdb      	lsrs	r3, r3, #19
 80010d8:	6123      	str	r3, [r4, #16]
}
 80010da:	bd70      	pop	{r4, r5, r6, pc}
 80010dc:	40022000 	.word	0x40022000
 80010e0:	45670123 	.word	0x45670123

080010e4 <FLASH_EnableWriteProtection>:
{
 80010e4:	b510      	push	{r4, lr}
 80010e6:	4604      	mov	r4, r0
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80010e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010ec:	f7ff fefa 	bl	8000ee4 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 80010f0:	2804      	cmp	r0, #4
 80010f2:	d13b      	bne.n	800116c <FLASH_EnableWriteProtection+0x88>
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
 80010f4:	43e4      	mvns	r4, r4
    FLASH->OPTKEYR = FLASH_KEY1;
 80010f6:	4b22      	ldr	r3, [pc, #136]	; (8001180 <FLASH_EnableWriteProtection+0x9c>)
 80010f8:	4a22      	ldr	r2, [pc, #136]	; (8001184 <FLASH_EnableWriteProtection+0xa0>)
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
 80010fa:	b2e1      	uxtb	r1, r4
    FLASH->OPTKEYR = FLASH_KEY1;
 80010fc:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80010fe:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001102:	609a      	str	r2, [r3, #8]
    FLASH->CR |= CR_OPTPG_Set;
 8001104:	691a      	ldr	r2, [r3, #16]
    if(WRP0_Data != 0xFF)
 8001106:	29ff      	cmp	r1, #255	; 0xff
    FLASH->CR |= CR_OPTPG_Set;
 8001108:	f042 0210 	orr.w	r2, r2, #16
 800110c:	611a      	str	r2, [r3, #16]
    if(WRP0_Data != 0xFF)
 800110e:	d123      	bne.n	8001158 <FLASH_EnableWriteProtection+0x74>
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
 8001110:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8001114:	2bff      	cmp	r3, #255	; 0xff
 8001116:	d007      	beq.n	8001128 <FLASH_EnableWriteProtection+0x44>
      OB->WRP1 = WRP1_Data;
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <FLASH_EnableWriteProtection+0xa4>)
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800111a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      OB->WRP1 = WRP1_Data;
 800111e:	8153      	strh	r3, [r2, #10]
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001120:	f7ff fee0 	bl	8000ee4 <FLASH_WaitForLastOperation>
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 8001124:	2804      	cmp	r0, #4
 8001126:	d11f      	bne.n	8001168 <FLASH_EnableWriteProtection+0x84>
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
 8001128:	f3c4 4307 	ubfx	r3, r4, #16, #8
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 800112c:	2bff      	cmp	r3, #255	; 0xff
 800112e:	d007      	beq.n	8001140 <FLASH_EnableWriteProtection+0x5c>
      OB->WRP2 = WRP2_Data;
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <FLASH_EnableWriteProtection+0xa4>)
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001132:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      OB->WRP2 = WRP2_Data;
 8001136:	8193      	strh	r3, [r2, #12]
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001138:	f7ff fed4 	bl	8000ee4 <FLASH_WaitForLastOperation>
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 800113c:	2804      	cmp	r0, #4
 800113e:	d113      	bne.n	8001168 <FLASH_EnableWriteProtection+0x84>
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
 8001140:	0e24      	lsrs	r4, r4, #24
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8001142:	2cff      	cmp	r4, #255	; 0xff
 8001144:	d113      	bne.n	800116e <FLASH_EnableWriteProtection+0x8a>
 8001146:	2004      	movs	r0, #4
      FLASH->CR &= CR_OPTPG_Reset;
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <FLASH_EnableWriteProtection+0x9c>)
 800114a:	6913      	ldr	r3, [r2, #16]
 800114c:	f023 0310 	bic.w	r3, r3, #16
 8001150:	04db      	lsls	r3, r3, #19
 8001152:	0cdb      	lsrs	r3, r3, #19
 8001154:	6113      	str	r3, [r2, #16]
 8001156:	e009      	b.n	800116c <FLASH_EnableWriteProtection+0x88>
      OB->WRP0 = WRP0_Data;
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <FLASH_EnableWriteProtection+0xa4>)
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800115a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      OB->WRP0 = WRP0_Data;
 800115e:	8119      	strh	r1, [r3, #8]
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001160:	f7ff fec0 	bl	8000ee4 <FLASH_WaitForLastOperation>
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8001164:	2804      	cmp	r0, #4
 8001166:	d0d3      	beq.n	8001110 <FLASH_EnableWriteProtection+0x2c>
    if(status != FLASH_TIMEOUT)
 8001168:	2805      	cmp	r0, #5
 800116a:	d1ed      	bne.n	8001148 <FLASH_EnableWriteProtection+0x64>
}
 800116c:	bd10      	pop	{r4, pc}
      OB->WRP3 = WRP3_Data;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <FLASH_EnableWriteProtection+0xa4>)
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
 8001170:	b2a4      	uxth	r4, r4
      OB->WRP3 = WRP3_Data;
 8001172:	81dc      	strh	r4, [r3, #14]
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001174:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001178:	f7ff feb4 	bl	8000ee4 <FLASH_WaitForLastOperation>
 800117c:	e7f4      	b.n	8001168 <FLASH_EnableWriteProtection+0x84>
 800117e:	bf00      	nop
 8001180:	40022000 	.word	0x40022000
 8001184:	45670123 	.word	0x45670123
 8001188:	1ffff800 	.word	0x1ffff800

0800118c <FLASH_ReadOutProtection>:
{
 800118c:	b538      	push	{r3, r4, r5, lr}
 800118e:	4605      	mov	r5, r0
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8001190:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001194:	f7ff fea6 	bl	8000ee4 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8001198:	2804      	cmp	r0, #4
 800119a:	d12e      	bne.n	80011fa <FLASH_ReadOutProtection+0x6e>
    FLASH->OPTKEYR = FLASH_KEY1;
 800119c:	4c1d      	ldr	r4, [pc, #116]	; (8001214 <FLASH_ReadOutProtection+0x88>)
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <FLASH_ReadOutProtection+0x8c>)
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80011a0:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
    FLASH->OPTKEYR = FLASH_KEY1;
 80011a4:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80011a6:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80011aa:	60a3      	str	r3, [r4, #8]
    FLASH->CR |= CR_OPTER_Set;
 80011ac:	6923      	ldr	r3, [r4, #16]
 80011ae:	f043 0320 	orr.w	r3, r3, #32
 80011b2:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 80011b4:	6923      	ldr	r3, [r4, #16]
 80011b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ba:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80011bc:	f7ff fe92 	bl	8000ee4 <FLASH_WaitForLastOperation>
    if(status == FLASH_COMPLETE)
 80011c0:	2804      	cmp	r0, #4
 80011c2:	d11d      	bne.n	8001200 <FLASH_ReadOutProtection+0x74>
      FLASH->CR &= CR_OPTER_Reset;
 80011c4:	6923      	ldr	r3, [r4, #16]
 80011c6:	f023 0320 	bic.w	r3, r3, #32
 80011ca:	04db      	lsls	r3, r3, #19
 80011cc:	0cdb      	lsrs	r3, r3, #19
 80011ce:	6123      	str	r3, [r4, #16]
      FLASH->CR |= CR_OPTPG_Set; 
 80011d0:	6923      	ldr	r3, [r4, #16]
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6123      	str	r3, [r4, #16]
      if(NewState != DISABLE)
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <FLASH_ReadOutProtection+0x90>)
 80011da:	b17d      	cbz	r5, 80011fc <FLASH_ReadOutProtection+0x70>
        OB->RDP = 0x00;
 80011dc:	2200      	movs	r2, #0
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 80011de:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
        OB->RDP = RDP_Key;  
 80011e2:	801a      	strh	r2, [r3, #0]
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 80011e4:	f7ff fe7e 	bl	8000ee4 <FLASH_WaitForLastOperation>
      if(status != FLASH_TIMEOUT)
 80011e8:	2805      	cmp	r0, #5
 80011ea:	d006      	beq.n	80011fa <FLASH_ReadOutProtection+0x6e>
        FLASH->CR &= CR_OPTPG_Reset;
 80011ec:	4a09      	ldr	r2, [pc, #36]	; (8001214 <FLASH_ReadOutProtection+0x88>)
 80011ee:	6913      	ldr	r3, [r2, #16]
 80011f0:	f023 0310 	bic.w	r3, r3, #16
 80011f4:	04db      	lsls	r3, r3, #19
 80011f6:	0cdb      	lsrs	r3, r3, #19
 80011f8:	6113      	str	r3, [r2, #16]
}
 80011fa:	bd38      	pop	{r3, r4, r5, pc}
        OB->RDP = RDP_Key;  
 80011fc:	22a5      	movs	r2, #165	; 0xa5
 80011fe:	e7ee      	b.n	80011de <FLASH_ReadOutProtection+0x52>
      if(status != FLASH_TIMEOUT)
 8001200:	2805      	cmp	r0, #5
 8001202:	d0fa      	beq.n	80011fa <FLASH_ReadOutProtection+0x6e>
        FLASH->CR &= CR_OPTER_Reset;
 8001204:	6923      	ldr	r3, [r4, #16]
 8001206:	f023 0320 	bic.w	r3, r3, #32
 800120a:	04db      	lsls	r3, r3, #19
 800120c:	0cdb      	lsrs	r3, r3, #19
 800120e:	6123      	str	r3, [r4, #16]
 8001210:	e7f3      	b.n	80011fa <FLASH_ReadOutProtection+0x6e>
 8001212:	bf00      	nop
 8001214:	40022000 	.word	0x40022000
 8001218:	45670123 	.word	0x45670123
 800121c:	1ffff800 	.word	0x1ffff800

08001220 <FLASH_UserOptionByteConfig>:
{
 8001220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  FLASH->OPTKEYR = FLASH_KEY1;
 8001222:	4d13      	ldr	r5, [pc, #76]	; (8001270 <FLASH_UserOptionByteConfig+0x50>)
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <FLASH_UserOptionByteConfig+0x54>)
{
 8001226:	4607      	mov	r7, r0
  FLASH->OPTKEYR = FLASH_KEY1;
 8001228:	60ab      	str	r3, [r5, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 800122a:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800122e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  FLASH->OPTKEYR = FLASH_KEY2;
 8001232:	60ab      	str	r3, [r5, #8]
{
 8001234:	460c      	mov	r4, r1
 8001236:	4616      	mov	r6, r2
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001238:	f7ff fe54 	bl	8000ee4 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 800123c:	2804      	cmp	r0, #4
 800123e:	d115      	bne.n	800126c <FLASH_UserOptionByteConfig+0x4c>
    FLASH->CR |= CR_OPTPG_Set; 
 8001240:	692b      	ldr	r3, [r5, #16]
    OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
 8001242:	433e      	orrs	r6, r7
    FLASH->CR |= CR_OPTPG_Set; 
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	612b      	str	r3, [r5, #16]
    OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
 800124a:	4334      	orrs	r4, r6
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <FLASH_UserOptionByteConfig+0x58>)
 800124e:	f044 04f8 	orr.w	r4, r4, #248	; 0xf8
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001252:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
 8001256:	805c      	strh	r4, [r3, #2]
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001258:	f7ff fe44 	bl	8000ee4 <FLASH_WaitForLastOperation>
    if(status != FLASH_TIMEOUT)
 800125c:	2805      	cmp	r0, #5
 800125e:	d005      	beq.n	800126c <FLASH_UserOptionByteConfig+0x4c>
      FLASH->CR &= CR_OPTPG_Reset;
 8001260:	692b      	ldr	r3, [r5, #16]
 8001262:	f023 0310 	bic.w	r3, r3, #16
 8001266:	04db      	lsls	r3, r3, #19
 8001268:	0cdb      	lsrs	r3, r3, #19
 800126a:	612b      	str	r3, [r5, #16]
}
 800126c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800126e:	bf00      	nop
 8001270:	40022000 	.word	0x40022000
 8001274:	45670123 	.word	0x45670123
 8001278:	1ffff800 	.word	0x1ffff800

0800127c <FLASH_WaitForLastBank1Operation>:
 800127c:	f7ff be32 	b.w	8000ee4 <FLASH_WaitForLastOperation>

08001280 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8001280:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <GPIO_DeInit+0x9c>)
 8001284:	4298      	cmp	r0, r3
 8001286:	d109      	bne.n	800129c <GPIO_DeInit+0x1c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8001288:	2101      	movs	r1, #1
 800128a:	2004      	movs	r0, #4
 800128c:	f001 fa8e 	bl	80027ac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8001290:	2100      	movs	r1, #0
 8001292:	2004      	movs	r0, #4
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 8001294:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8001298:	f001 ba88 	b.w	80027ac <RCC_APB2PeriphResetCmd>
  else if (GPIOx == GPIOB)
 800129c:	4b20      	ldr	r3, [pc, #128]	; (8001320 <GPIO_DeInit+0xa0>)
 800129e:	4298      	cmp	r0, r3
 80012a0:	d106      	bne.n	80012b0 <GPIO_DeInit+0x30>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80012a2:	2101      	movs	r1, #1
 80012a4:	2008      	movs	r0, #8
 80012a6:	f001 fa81 	bl	80027ac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 80012aa:	2100      	movs	r1, #0
 80012ac:	2008      	movs	r0, #8
 80012ae:	e7f1      	b.n	8001294 <GPIO_DeInit+0x14>
  else if (GPIOx == GPIOC)
 80012b0:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <GPIO_DeInit+0xa4>)
 80012b2:	4298      	cmp	r0, r3
 80012b4:	d106      	bne.n	80012c4 <GPIO_DeInit+0x44>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80012b6:	2101      	movs	r1, #1
 80012b8:	2010      	movs	r0, #16
 80012ba:	f001 fa77 	bl	80027ac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 80012be:	2100      	movs	r1, #0
 80012c0:	2010      	movs	r0, #16
 80012c2:	e7e7      	b.n	8001294 <GPIO_DeInit+0x14>
  else if (GPIOx == GPIOD)
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <GPIO_DeInit+0xa8>)
 80012c6:	4298      	cmp	r0, r3
 80012c8:	d106      	bne.n	80012d8 <GPIO_DeInit+0x58>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 80012ca:	2101      	movs	r1, #1
 80012cc:	2020      	movs	r0, #32
 80012ce:	f001 fa6d 	bl	80027ac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 80012d2:	2100      	movs	r1, #0
 80012d4:	2020      	movs	r0, #32
 80012d6:	e7dd      	b.n	8001294 <GPIO_DeInit+0x14>
  else if (GPIOx == GPIOE)
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <GPIO_DeInit+0xac>)
 80012da:	4298      	cmp	r0, r3
 80012dc:	d106      	bne.n	80012ec <GPIO_DeInit+0x6c>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 80012de:	2101      	movs	r1, #1
 80012e0:	2040      	movs	r0, #64	; 0x40
 80012e2:	f001 fa63 	bl	80027ac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 80012e6:	2100      	movs	r1, #0
 80012e8:	2040      	movs	r0, #64	; 0x40
 80012ea:	e7d3      	b.n	8001294 <GPIO_DeInit+0x14>
  else if (GPIOx == GPIOF)
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <GPIO_DeInit+0xb0>)
 80012ee:	4298      	cmp	r0, r3
 80012f0:	d106      	bne.n	8001300 <GPIO_DeInit+0x80>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 80012f2:	2101      	movs	r1, #1
 80012f4:	2080      	movs	r0, #128	; 0x80
 80012f6:	f001 fa59 	bl	80027ac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 80012fa:	2100      	movs	r1, #0
 80012fc:	2080      	movs	r0, #128	; 0x80
 80012fe:	e7c9      	b.n	8001294 <GPIO_DeInit+0x14>
    if (GPIOx == GPIOG)
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <GPIO_DeInit+0xb4>)
 8001302:	4298      	cmp	r0, r3
 8001304:	d108      	bne.n	8001318 <GPIO_DeInit+0x98>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 8001306:	2101      	movs	r1, #1
 8001308:	f44f 7080 	mov.w	r0, #256	; 0x100
 800130c:	f001 fa4e 	bl	80027ac <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8001310:	2100      	movs	r1, #0
 8001312:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001316:	e7bd      	b.n	8001294 <GPIO_DeInit+0x14>
}
 8001318:	bd08      	pop	{r3, pc}
 800131a:	bf00      	nop
 800131c:	40010800 	.word	0x40010800
 8001320:	40010c00 	.word	0x40010c00
 8001324:	40011000 	.word	0x40011000
 8001328:	40011400 	.word	0x40011400
 800132c:	40011800 	.word	0x40011800
 8001330:	40011c00 	.word	0x40011c00
 8001334:	40012000 	.word	0x40012000

08001338 <GPIO_AFIODeInit>:
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8001338:	2101      	movs	r1, #1
{
 800133a:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 800133c:	4608      	mov	r0, r1
 800133e:	f001 fa35 	bl	80027ac <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
}
 8001342:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8001346:	2100      	movs	r1, #0
 8001348:	2001      	movs	r0, #1
 800134a:	f001 ba2f 	b.w	80027ac <RCC_APB2PeriphResetCmd>

0800134e <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800134e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001352:	78cb      	ldrb	r3, [r1, #3]
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001354:	880f      	ldrh	r7, [r1, #0]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001356:	06da      	lsls	r2, r3, #27
 8001358:	bf48      	it	mi
 800135a:	788a      	ldrbmi	r2, [r1, #2]
 800135c:	f003 050f 	and.w	r5, r3, #15
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001360:	bf48      	it	mi
 8001362:	4315      	orrmi	r5, r2
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001364:	780a      	ldrb	r2, [r1, #0]
 8001366:	b1d2      	cbz	r2, 800139e <GPIO_Init+0x50>
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001368:	2100      	movs	r1, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 800136a:	f04f 0c01 	mov.w	ip, #1
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800136e:	f04f 0e0f 	mov.w	lr, #15
    tmpreg = GPIOx->CRL;
 8001372:	6802      	ldr	r2, [r0, #0]
      pos = ((uint32_t)0x01) << pinpos;
 8001374:	fa0c f601 	lsl.w	r6, ip, r1
      if (currentpin == pos)
 8001378:	ea36 0407 	bics.w	r4, r6, r7
 800137c:	d10b      	bne.n	8001396 <GPIO_Init+0x48>
        pos = pinpos << 2;
 800137e:	008c      	lsls	r4, r1, #2
        pinmask = ((uint32_t)0x0F) << pos;
 8001380:	fa0e f804 	lsl.w	r8, lr, r4
        tmpreg &= ~pinmask;
 8001384:	ea22 0208 	bic.w	r2, r2, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001388:	fa05 f404 	lsl.w	r4, r5, r4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800138c:	2b28      	cmp	r3, #40	; 0x28
        tmpreg |= (currentmode << pos);
 800138e:	ea42 0204 	orr.w	r2, r2, r4
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001392:	d125      	bne.n	80013e0 <GPIO_Init+0x92>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001394:	6146      	str	r6, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001396:	3101      	adds	r1, #1
 8001398:	2908      	cmp	r1, #8
 800139a:	d1eb      	bne.n	8001374 <GPIO_Init+0x26>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800139c:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800139e:	2fff      	cmp	r7, #255	; 0xff
 80013a0:	d91c      	bls.n	80013dc <GPIO_Init+0x8e>
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80013a2:	2100      	movs	r1, #0
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80013a4:	f04f 0c01 	mov.w	ip, #1
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80013a8:	f04f 0e0f 	mov.w	lr, #15
    tmpreg = GPIOx->CRH;
 80013ac:	6842      	ldr	r2, [r0, #4]
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80013ae:	f101 0408 	add.w	r4, r1, #8
 80013b2:	fa0c f404 	lsl.w	r4, ip, r4
      if (currentpin == pos)
 80013b6:	ea34 0607 	bics.w	r6, r4, r7
 80013ba:	d10b      	bne.n	80013d4 <GPIO_Init+0x86>
        pos = pinpos << 2;
 80013bc:	008e      	lsls	r6, r1, #2
        pinmask = ((uint32_t)0x0F) << pos;
 80013be:	fa0e f806 	lsl.w	r8, lr, r6
        tmpreg &= ~pinmask;
 80013c2:	ea22 0208 	bic.w	r2, r2, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80013c6:	fa05 f606 	lsl.w	r6, r5, r6
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80013ca:	2b28      	cmp	r3, #40	; 0x28
        tmpreg |= (currentmode << pos);
 80013cc:	ea42 0206 	orr.w	r2, r2, r6
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80013d0:	d10a      	bne.n	80013e8 <GPIO_Init+0x9a>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80013d2:	6144      	str	r4, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80013d4:	3101      	adds	r1, #1
 80013d6:	2908      	cmp	r1, #8
 80013d8:	d1e9      	bne.n	80013ae <GPIO_Init+0x60>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80013da:	6042      	str	r2, [r0, #4]
  }
}
 80013dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80013e0:	2b48      	cmp	r3, #72	; 0x48
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80013e2:	bf08      	it	eq
 80013e4:	6106      	streq	r6, [r0, #16]
 80013e6:	e7d6      	b.n	8001396 <GPIO_Init+0x48>
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80013e8:	2b48      	cmp	r3, #72	; 0x48
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80013ea:	bf08      	it	eq
 80013ec:	6104      	streq	r4, [r0, #16]
 80013ee:	e7f1      	b.n	80013d4 <GPIO_Init+0x86>

080013f0 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80013f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013f4:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80013f6:	f240 4302 	movw	r3, #1026	; 0x402
 80013fa:	8043      	strh	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
}
 80013fc:	4770      	bx	lr

080013fe <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80013fe:	6883      	ldr	r3, [r0, #8]
 8001400:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001402:	bf14      	ite	ne
 8001404:	2001      	movne	r0, #1
 8001406:	2000      	moveq	r0, #0
 8001408:	4770      	bx	lr

0800140a <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 800140a:	6880      	ldr	r0, [r0, #8]
}
 800140c:	b280      	uxth	r0, r0
 800140e:	4770      	bx	lr

08001410 <GPIO_ReadOutputDataBit>:
  uint8_t bitstatus = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001410:	68c3      	ldr	r3, [r0, #12]
 8001412:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001414:	bf14      	ite	ne
 8001416:	2001      	movne	r0, #1
 8001418:	2000      	moveq	r0, #0
 800141a:	4770      	bx	lr

0800141c <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 800141c:	68c0      	ldr	r0, [r0, #12]
}
 800141e:	b280      	uxth	r0, r0
 8001420:	4770      	bx	lr

08001422 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8001422:	6101      	str	r1, [r0, #16]
}
 8001424:	4770      	bx	lr

08001426 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8001426:	6141      	str	r1, [r0, #20]
}
 8001428:	4770      	bx	lr

0800142a <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 800142a:	b10a      	cbz	r2, 8001430 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142c:	6101      	str	r1, [r0, #16]
 800142e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8001430:	6141      	str	r1, [r0, #20]
  }
}
 8001432:	4770      	bx	lr

08001434 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8001434:	60c1      	str	r1, [r0, #12]
}
 8001436:	4770      	bx	lr

08001438 <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8001438:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800143c:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800143e:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001440:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001442:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001444:	6983      	ldr	r3, [r0, #24]
}
 8001446:	4770      	bx	lr

08001448 <GPIO_EventOutputConfig>:
  uint32_t tmpreg = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8001448:	4a05      	ldr	r2, [pc, #20]	; (8001460 <GPIO_EventOutputConfig+0x18>)
 800144a:	6813      	ldr	r3, [r2, #0]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 800144c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001450:	041b      	lsls	r3, r3, #16
 8001452:	0c1b      	lsrs	r3, r3, #16
 8001454:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 8001456:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  AFIO->EVCR = tmpreg;
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40010000 	.word	0x40010000

08001464 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 8001464:	4b01      	ldr	r3, [pc, #4]	; (800146c <GPIO_EventOutputCmd+0x8>)
 8001466:	61d8      	str	r0, [r3, #28]
}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	42200000 	.word	0x42200000

08001470 <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001470:	2800      	cmp	r0, #0
 8001472:	4a16      	ldr	r2, [pc, #88]	; (80014cc <GPIO_PinRemapConfig+0x5c>)
{
 8001474:	b530      	push	{r4, r5, lr}
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001476:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
    tmpreg = AFIO->MAPR2;
 800147a:	bfb4      	ite	lt
 800147c:	69d3      	ldrlt	r3, [r2, #28]
    tmpreg = AFIO->MAPR;
 800147e:	6853      	ldrge	r3, [r2, #4]
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001480:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
  tmp = GPIO_Remap & LSB_MASK;
 8001484:	b284      	uxth	r4, r0
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001486:	d110      	bne.n	80014aa <GPIO_PinRemapConfig+0x3a>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001488:	6855      	ldr	r5, [r2, #4]
    tmpreg &= DBGAFR_SWJCFG_MASK;
 800148a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800148e:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8001492:	6055      	str	r5, [r2, #4]
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }

  if (NewState != DISABLE)
 8001494:	b119      	cbz	r1, 800149e <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001496:	0d42      	lsrs	r2, r0, #21
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	4094      	lsls	r4, r2
 800149c:	4323      	orrs	r3, r4
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <GPIO_PinRemapConfig+0x5c>)
 80014a0:	2800      	cmp	r0, #0
  {
    AFIO->MAPR2 = tmpreg;
 80014a2:	bfb4      	ite	lt
 80014a4:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 80014a6:	6053      	strge	r3, [r2, #4]
  }  
}
 80014a8:	bd30      	pop	{r4, r5, pc}
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80014aa:	02c2      	lsls	r2, r0, #11
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80014ac:	bf4d      	iteet	mi
 80014ae:	2203      	movmi	r2, #3
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80014b0:	0d42      	lsrpl	r2, r0, #21
 80014b2:	0112      	lslpl	r2, r2, #4
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80014b4:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80014b8:	bf4c      	ite	mi
 80014ba:	40aa      	lslmi	r2, r5
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80014bc:	fa04 f202 	lslpl.w	r2, r4, r2
 80014c0:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80014c4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80014c8:	e7e4      	b.n	8001494 <GPIO_PinRemapConfig+0x24>
 80014ca:	bf00      	nop
 80014cc:	40010000 	.word	0x40010000

080014d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80014d0:	b510      	push	{r4, lr}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80014d2:	240f      	movs	r4, #15
 80014d4:	f001 0303 	and.w	r3, r1, #3
 80014d8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80014dc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80014e0:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80014e4:	688a      	ldr	r2, [r1, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	409c      	lsls	r4, r3
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80014ea:	ea22 0204 	bic.w	r2, r2, r4
 80014ee:	608a      	str	r2, [r1, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80014f0:	688a      	ldr	r2, [r1, #8]
 80014f2:	4098      	lsls	r0, r3
 80014f4:	4310      	orrs	r0, r2
 80014f6:	6088      	str	r0, [r1, #8]
}
 80014f8:	bd10      	pop	{r4, pc}
	...

080014fc <GPIO_ETH_MediaInterfaceConfig>:
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 80014fc:	4b01      	ldr	r3, [pc, #4]	; (8001504 <GPIO_ETH_MediaInterfaceConfig+0x8>)
 80014fe:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
}
 8001502:	4770      	bx	lr
 8001504:	42200000 	.word	0x42200000

08001508 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001508:	b570      	push	{r4, r5, r6, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 800150a:	8c06      	ldrh	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800150c:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8001510:	f026 0601 	bic.w	r6, r6, #1
 8001514:	0436      	lsls	r6, r6, #16
 8001516:	0c36      	lsrs	r6, r6, #16
 8001518:	8406      	strh	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800151a:	8b04      	ldrh	r4, [r0, #24]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <TI1_Config+0x6c>)
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 800151e:	f024 04f3 	bic.w	r4, r4, #243	; 0xf3
 8001522:	0424      	lsls	r4, r4, #16
  tmpccer = TIMx->CCER;
 8001524:	8c05      	ldrh	r5, [r0, #32]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8001526:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001528:	4314      	orrs	r4, r2
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800152a:	4298      	cmp	r0, r3
  tmpccer = TIMx->CCER;
 800152c:	b2ad      	uxth	r5, r5
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800152e:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001530:	d012      	beq.n	8001558 <TI1_Config+0x50>
 8001532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001536:	4298      	cmp	r0, r3
 8001538:	d00e      	beq.n	8001558 <TI1_Config+0x50>
 800153a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800153e:	d00b      	beq.n	8001558 <TI1_Config+0x50>
 8001540:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8001544:	4298      	cmp	r0, r3
 8001546:	d007      	beq.n	8001558 <TI1_Config+0x50>
 8001548:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800154c:	4298      	cmp	r0, r3
 800154e:	d003      	beq.n	8001558 <TI1_Config+0x50>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001550:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001554:	4298      	cmp	r0, r3
 8001556:	d108      	bne.n	800156a <TI1_Config+0x62>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 8001558:	f025 0302 	bic.w	r3, r5, #2
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800155c:	ea41 0503 	orr.w	r5, r1, r3
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001560:	f045 0501 	orr.w	r5, r5, #1
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001564:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001566:	8405      	strh	r5, [r0, #32]
}
 8001568:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800156a:	f025 050a 	bic.w	r5, r5, #10
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800156e:	430d      	orrs	r5, r1
 8001570:	e7f6      	b.n	8001560 <TI1_Config+0x58>
 8001572:	bf00      	nop
 8001574:	40012c00 	.word	0x40012c00

08001578 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001578:	b570      	push	{r4, r5, r6, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 800157a:	8c04      	ldrh	r4, [r0, #32]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800157c:	0212      	lsls	r2, r2, #8
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 800157e:	f024 0410 	bic.w	r4, r4, #16
 8001582:	0424      	lsls	r4, r4, #16
 8001584:	0c24      	lsrs	r4, r4, #16
 8001586:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001588:	8b05      	ldrh	r5, [r0, #24]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800158a:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 800158e:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <TI2_Config+0x70>)
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8001594:	052d      	lsls	r5, r5, #20
  tmpccer = TIMx->CCER;
 8001596:	8c04      	ldrh	r4, [r0, #32]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8001598:	0d2d      	lsrs	r5, r5, #20
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 800159a:	010e      	lsls	r6, r1, #4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800159c:	4315      	orrs	r5, r2
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800159e:	4298      	cmp	r0, r3
  tmpccer = TIMx->CCER;
 80015a0:	b2a4      	uxth	r4, r4
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80015a2:	b2b6      	uxth	r6, r6
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80015a4:	b2ad      	uxth	r5, r5
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80015a6:	d012      	beq.n	80015ce <TI2_Config+0x56>
 80015a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ac:	4298      	cmp	r0, r3
 80015ae:	d00e      	beq.n	80015ce <TI2_Config+0x56>
 80015b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80015b4:	d00b      	beq.n	80015ce <TI2_Config+0x56>
 80015b6:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 80015ba:	4298      	cmp	r0, r3
 80015bc:	d007      	beq.n	80015ce <TI2_Config+0x56>
 80015be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015c2:	4298      	cmp	r0, r3
 80015c4:	d003      	beq.n	80015ce <TI2_Config+0x56>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80015c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015ca:	4298      	cmp	r0, r3
 80015cc:	d108      	bne.n	80015e0 <TI2_Config+0x68>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 80015ce:	f024 0420 	bic.w	r4, r4, #32
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80015d2:	ea46 0104 	orr.w	r1, r6, r4
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 80015d6:	f041 0110 	orr.w	r1, r1, #16
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80015da:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 80015dc:	8401      	strh	r1, [r0, #32]
}
 80015de:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80015e0:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 80015e4:	4321      	orrs	r1, r4
 80015e6:	e7f6      	b.n	80015d6 <TI2_Config+0x5e>
 80015e8:	40012c00 	.word	0x40012c00

080015ec <TIM_DeInit>:
{
 80015ec:	b508      	push	{r3, lr}
  if (TIMx == TIM1)
 80015ee:	4b61      	ldr	r3, [pc, #388]	; (8001774 <TIM_DeInit+0x188>)
 80015f0:	4298      	cmp	r0, r3
 80015f2:	d10b      	bne.n	800160c <TIM_DeInit+0x20>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80015f4:	2101      	movs	r1, #1
 80015f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80015fa:	f001 f8d7 	bl	80027ac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80015fe:	2100      	movs	r1, #0
 8001600:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8001604:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 8001608:	f001 b8d0 	b.w	80027ac <RCC_APB2PeriphResetCmd>
  else if (TIMx == TIM2)
 800160c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001610:	d109      	bne.n	8001626 <TIM_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001612:	2101      	movs	r1, #1
 8001614:	4608      	mov	r0, r1
 8001616:	f001 f8d5 	bl	80027c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800161a:	2100      	movs	r1, #0
 800161c:	2001      	movs	r0, #1
}
 800161e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001622:	f001 b8cf 	b.w	80027c4 <RCC_APB1PeriphResetCmd>
  else if (TIMx == TIM3)
 8001626:	4b54      	ldr	r3, [pc, #336]	; (8001778 <TIM_DeInit+0x18c>)
 8001628:	4298      	cmp	r0, r3
 800162a:	d106      	bne.n	800163a <TIM_DeInit+0x4e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800162c:	2101      	movs	r1, #1
 800162e:	2002      	movs	r0, #2
 8001630:	f001 f8c8 	bl	80027c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001634:	2100      	movs	r1, #0
 8001636:	2002      	movs	r0, #2
 8001638:	e7f1      	b.n	800161e <TIM_DeInit+0x32>
  else if (TIMx == TIM4)
 800163a:	4b50      	ldr	r3, [pc, #320]	; (800177c <TIM_DeInit+0x190>)
 800163c:	4298      	cmp	r0, r3
 800163e:	d106      	bne.n	800164e <TIM_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001640:	2101      	movs	r1, #1
 8001642:	2004      	movs	r0, #4
 8001644:	f001 f8be 	bl	80027c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001648:	2100      	movs	r1, #0
 800164a:	2004      	movs	r0, #4
 800164c:	e7e7      	b.n	800161e <TIM_DeInit+0x32>
  else if (TIMx == TIM5)
 800164e:	4b4c      	ldr	r3, [pc, #304]	; (8001780 <TIM_DeInit+0x194>)
 8001650:	4298      	cmp	r0, r3
 8001652:	d106      	bne.n	8001662 <TIM_DeInit+0x76>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001654:	2101      	movs	r1, #1
 8001656:	2008      	movs	r0, #8
 8001658:	f001 f8b4 	bl	80027c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800165c:	2100      	movs	r1, #0
 800165e:	2008      	movs	r0, #8
 8001660:	e7dd      	b.n	800161e <TIM_DeInit+0x32>
  else if (TIMx == TIM6)
 8001662:	4b48      	ldr	r3, [pc, #288]	; (8001784 <TIM_DeInit+0x198>)
 8001664:	4298      	cmp	r0, r3
 8001666:	d106      	bne.n	8001676 <TIM_DeInit+0x8a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001668:	2101      	movs	r1, #1
 800166a:	2010      	movs	r0, #16
 800166c:	f001 f8aa 	bl	80027c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001670:	2100      	movs	r1, #0
 8001672:	2010      	movs	r0, #16
 8001674:	e7d3      	b.n	800161e <TIM_DeInit+0x32>
  else if (TIMx == TIM7)
 8001676:	4b44      	ldr	r3, [pc, #272]	; (8001788 <TIM_DeInit+0x19c>)
 8001678:	4298      	cmp	r0, r3
 800167a:	d106      	bne.n	800168a <TIM_DeInit+0x9e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800167c:	2101      	movs	r1, #1
 800167e:	2020      	movs	r0, #32
 8001680:	f001 f8a0 	bl	80027c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8001684:	2100      	movs	r1, #0
 8001686:	2020      	movs	r0, #32
 8001688:	e7c9      	b.n	800161e <TIM_DeInit+0x32>
  else if (TIMx == TIM8)
 800168a:	4b40      	ldr	r3, [pc, #256]	; (800178c <TIM_DeInit+0x1a0>)
 800168c:	4298      	cmp	r0, r3
 800168e:	d108      	bne.n	80016a2 <TIM_DeInit+0xb6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8001690:	2101      	movs	r1, #1
 8001692:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001696:	f001 f889 	bl	80027ac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 800169a:	2100      	movs	r1, #0
 800169c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016a0:	e7b0      	b.n	8001604 <TIM_DeInit+0x18>
  else if (TIMx == TIM9)
 80016a2:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <TIM_DeInit+0x1a4>)
 80016a4:	4298      	cmp	r0, r3
 80016a6:	d108      	bne.n	80016ba <TIM_DeInit+0xce>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80016a8:	2101      	movs	r1, #1
 80016aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80016ae:	f001 f87d 	bl	80027ac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80016b2:	2100      	movs	r1, #0
 80016b4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80016b8:	e7a4      	b.n	8001604 <TIM_DeInit+0x18>
  else if (TIMx == TIM10)
 80016ba:	4b36      	ldr	r3, [pc, #216]	; (8001794 <TIM_DeInit+0x1a8>)
 80016bc:	4298      	cmp	r0, r3
 80016be:	d108      	bne.n	80016d2 <TIM_DeInit+0xe6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 80016c0:	2101      	movs	r1, #1
 80016c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80016c6:	f001 f871 	bl	80027ac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80016ca:	2100      	movs	r1, #0
 80016cc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80016d0:	e798      	b.n	8001604 <TIM_DeInit+0x18>
  else if (TIMx == TIM11) 
 80016d2:	4b31      	ldr	r3, [pc, #196]	; (8001798 <TIM_DeInit+0x1ac>)
 80016d4:	4298      	cmp	r0, r3
 80016d6:	d108      	bne.n	80016ea <TIM_DeInit+0xfe>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 80016d8:	2101      	movs	r1, #1
 80016da:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80016de:	f001 f865 	bl	80027ac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80016e2:	2100      	movs	r1, #0
 80016e4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80016e8:	e78c      	b.n	8001604 <TIM_DeInit+0x18>
  else if (TIMx == TIM12)
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <TIM_DeInit+0x1b0>)
 80016ec:	4298      	cmp	r0, r3
 80016ee:	d106      	bne.n	80016fe <TIM_DeInit+0x112>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 80016f0:	2101      	movs	r1, #1
 80016f2:	2040      	movs	r0, #64	; 0x40
 80016f4:	f001 f866 	bl	80027c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 80016f8:	2100      	movs	r1, #0
 80016fa:	2040      	movs	r0, #64	; 0x40
 80016fc:	e78f      	b.n	800161e <TIM_DeInit+0x32>
  else if (TIMx == TIM13) 
 80016fe:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <TIM_DeInit+0x1b4>)
 8001700:	4298      	cmp	r0, r3
 8001702:	d106      	bne.n	8001712 <TIM_DeInit+0x126>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001704:	2101      	movs	r1, #1
 8001706:	2080      	movs	r0, #128	; 0x80
 8001708:	f001 f85c 	bl	80027c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800170c:	2100      	movs	r1, #0
 800170e:	2080      	movs	r0, #128	; 0x80
 8001710:	e785      	b.n	800161e <TIM_DeInit+0x32>
  else if (TIMx == TIM14) 
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <TIM_DeInit+0x1b8>)
 8001714:	4298      	cmp	r0, r3
 8001716:	d108      	bne.n	800172a <TIM_DeInit+0x13e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8001718:	2101      	movs	r1, #1
 800171a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800171e:	f001 f851 	bl	80027c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 8001722:	2100      	movs	r1, #0
 8001724:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001728:	e779      	b.n	800161e <TIM_DeInit+0x32>
  else if (TIMx == TIM15)
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <TIM_DeInit+0x1bc>)
 800172c:	4298      	cmp	r0, r3
 800172e:	d108      	bne.n	8001742 <TIM_DeInit+0x156>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 8001730:	2101      	movs	r1, #1
 8001732:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001736:	f001 f839 	bl	80027ac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 800173a:	2100      	movs	r1, #0
 800173c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001740:	e760      	b.n	8001604 <TIM_DeInit+0x18>
  else if (TIMx == TIM16)
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <TIM_DeInit+0x1c0>)
 8001744:	4298      	cmp	r0, r3
 8001746:	d108      	bne.n	800175a <TIM_DeInit+0x16e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8001748:	2101      	movs	r1, #1
 800174a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800174e:	f001 f82d 	bl	80027ac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 8001752:	2100      	movs	r1, #0
 8001754:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001758:	e754      	b.n	8001604 <TIM_DeInit+0x18>
    if (TIMx == TIM17)
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <TIM_DeInit+0x1c4>)
 800175c:	4298      	cmp	r0, r3
 800175e:	d108      	bne.n	8001772 <TIM_DeInit+0x186>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 8001760:	2101      	movs	r1, #1
 8001762:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001766:	f001 f821 	bl	80027ac <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 800176a:	2100      	movs	r1, #0
 800176c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001770:	e748      	b.n	8001604 <TIM_DeInit+0x18>
}
 8001772:	bd08      	pop	{r3, pc}
 8001774:	40012c00 	.word	0x40012c00
 8001778:	40000400 	.word	0x40000400
 800177c:	40000800 	.word	0x40000800
 8001780:	40000c00 	.word	0x40000c00
 8001784:	40001000 	.word	0x40001000
 8001788:	40001400 	.word	0x40001400
 800178c:	40013400 	.word	0x40013400
 8001790:	40014c00 	.word	0x40014c00
 8001794:	40015000 	.word	0x40015000
 8001798:	40015400 	.word	0x40015400
 800179c:	40001800 	.word	0x40001800
 80017a0:	40001c00 	.word	0x40001c00
 80017a4:	40002000 	.word	0x40002000
 80017a8:	40014000 	.word	0x40014000
 80017ac:	40014400 	.word	0x40014400
 80017b0:	40014800 	.word	0x40014800

080017b4 <TIM_TimeBaseInit>:
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80017b4:	4a22      	ldr	r2, [pc, #136]	; (8001840 <TIM_TimeBaseInit+0x8c>)
  tmpcr1 = TIMx->CR1;  
 80017b6:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80017b8:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;  
 80017ba:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80017bc:	d012      	beq.n	80017e4 <TIM_TimeBaseInit+0x30>
 80017be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c2:	4290      	cmp	r0, r2
 80017c4:	d00e      	beq.n	80017e4 <TIM_TimeBaseInit+0x30>
 80017c6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80017ca:	d00b      	beq.n	80017e4 <TIM_TimeBaseInit+0x30>
 80017cc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80017d0:	4290      	cmp	r0, r2
 80017d2:	d007      	beq.n	80017e4 <TIM_TimeBaseInit+0x30>
 80017d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017d8:	4290      	cmp	r0, r2
 80017da:	d003      	beq.n	80017e4 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80017dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017e0:	4290      	cmp	r0, r2
 80017e2:	d103      	bne.n	80017ec <TIM_TimeBaseInit+0x38>
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80017e4:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80017e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80017ea:	4313      	orrs	r3, r2
  if((TIMx != TIM6) && (TIMx != TIM7))
 80017ec:	4a15      	ldr	r2, [pc, #84]	; (8001844 <TIM_TimeBaseInit+0x90>)
 80017ee:	4290      	cmp	r0, r2
 80017f0:	d008      	beq.n	8001804 <TIM_TimeBaseInit+0x50>
 80017f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017f6:	4290      	cmp	r0, r2
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80017f8:	bf1f      	itttt	ne
 80017fa:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80017fe:	88ca      	ldrhne	r2, [r1, #6]
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001800:	b29b      	uxthne	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001802:	4313      	orrne	r3, r2
  TIMx->CR1 = tmpcr1;
 8001804:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001806:	888b      	ldrh	r3, [r1, #4]
 8001808:	8583      	strh	r3, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800180a:	880b      	ldrh	r3, [r1, #0]
 800180c:	8503      	strh	r3, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <TIM_TimeBaseInit+0x8c>)
 8001810:	4298      	cmp	r0, r3
 8001812:	d00f      	beq.n	8001834 <TIM_TimeBaseInit+0x80>
 8001814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001818:	4298      	cmp	r0, r3
 800181a:	d00b      	beq.n	8001834 <TIM_TimeBaseInit+0x80>
 800181c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001820:	4298      	cmp	r0, r3
 8001822:	d007      	beq.n	8001834 <TIM_TimeBaseInit+0x80>
 8001824:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001828:	4298      	cmp	r0, r3
 800182a:	d003      	beq.n	8001834 <TIM_TimeBaseInit+0x80>
 800182c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001830:	4298      	cmp	r0, r3
 8001832:	d101      	bne.n	8001838 <TIM_TimeBaseInit+0x84>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001834:	7a0b      	ldrb	r3, [r1, #8]
 8001836:	8603      	strh	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001838:	2301      	movs	r3, #1
 800183a:	8283      	strh	r3, [r0, #20]
}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40012c00 	.word	0x40012c00
 8001844:	40001000 	.word	0x40001000

08001848 <TIM_OC1Init>:
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001848:	8c03      	ldrh	r3, [r0, #32]
{
 800184a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	041b      	lsls	r3, r3, #16
 8001852:	0c1b      	lsrs	r3, r3, #16
 8001854:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001856:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001858:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800185a:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800185c:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 800185e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8001862:	0412      	lsls	r2, r2, #16
 8001864:	0c12      	lsrs	r2, r2, #16
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001866:	884e      	ldrh	r6, [r1, #2]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001868:	432a      	orrs	r2, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800186a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800186e:	890d      	ldrh	r5, [r1, #8]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001870:	041b      	lsls	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001872:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001874:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001876:	432b      	orrs	r3, r5
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001878:	4d14      	ldr	r5, [pc, #80]	; (80018cc <TIM_OC1Init+0x84>)
  tmpcr2 =  TIMx->CR2;
 800187a:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 800187c:	42a8      	cmp	r0, r5
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800187e:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001880:	d00f      	beq.n	80018a2 <TIM_OC1Init+0x5a>
 8001882:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001886:	42a8      	cmp	r0, r5
 8001888:	d00b      	beq.n	80018a2 <TIM_OC1Init+0x5a>
 800188a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800188e:	42a8      	cmp	r0, r5
 8001890:	d007      	beq.n	80018a2 <TIM_OC1Init+0x5a>
 8001892:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001896:	42a8      	cmp	r0, r5
 8001898:	d003      	beq.n	80018a2 <TIM_OC1Init+0x5a>
     (TIMx == TIM16)|| (TIMx == TIM17))
 800189a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800189e:	42a8      	cmp	r0, r5
 80018a0:	d10e      	bne.n	80018c0 <TIM_OC1Init+0x78>
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80018a2:	894d      	ldrh	r5, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 80018a4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80018a8:	432b      	orrs	r3, r5
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80018aa:	888d      	ldrh	r5, [r1, #4]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 80018ac:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80018b0:	89ce      	ldrh	r6, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80018b2:	432b      	orrs	r3, r5
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80018b4:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 80018b6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80018ba:	4335      	orrs	r5, r6
 80018bc:	432c      	orrs	r4, r5
 80018be:	b2a4      	uxth	r4, r4
  TIMx->CR2 = tmpcr2;
 80018c0:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80018c2:	8302      	strh	r2, [r0, #24]
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 80018c4:	88ca      	ldrh	r2, [r1, #6]
 80018c6:	8682      	strh	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80018c8:	8403      	strh	r3, [r0, #32]
}
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
 80018cc:	40012c00 	.word	0x40012c00

080018d0 <TIM_OC2Init>:
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 80018d0:	8c03      	ldrh	r3, [r0, #32]
{
 80018d2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 80018d4:	f023 0310 	bic.w	r3, r3, #16
 80018d8:	041b      	lsls	r3, r3, #16
 80018da:	0c1b      	lsrs	r3, r3, #16
 80018dc:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80018de:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80018e0:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80018e2:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80018e4:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 80018e6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80018ea:	0412      	lsls	r2, r2, #16
 80018ec:	0c12      	lsrs	r2, r2, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80018ee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80018f2:	884e      	ldrh	r6, [r1, #2]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80018f4:	890d      	ldrh	r5, [r1, #8]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 80018f6:	f023 0320 	bic.w	r3, r3, #32
 80018fa:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80018fc:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 80018fe:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001900:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001904:	4d11      	ldr	r5, [pc, #68]	; (800194c <TIM_OC2Init+0x7c>)
  tmpcr2 =  TIMx->CR2;
 8001906:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001908:	42a8      	cmp	r0, r5
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800190a:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800190c:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8))
 800190e:	d003      	beq.n	8001918 <TIM_OC2Init+0x48>
 8001910:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001914:	42a8      	cmp	r0, r5
 8001916:	d113      	bne.n	8001940 <TIM_OC2Init+0x70>
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001918:	894d      	ldrh	r5, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 800191a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800191e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8001922:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 8001926:	401d      	ands	r5, r3
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001928:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800192a:	89ce      	ldrh	r6, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800192c:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001930:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8001932:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001936:	4335      	orrs	r5, r6
 8001938:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800193c:	b29b      	uxth	r3, r3
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800193e:	b2a4      	uxth	r4, r4
  TIMx->CR2 = tmpcr2;
 8001940:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001942:	8302      	strh	r2, [r0, #24]
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001944:	88ca      	ldrh	r2, [r1, #6]
 8001946:	8702      	strh	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001948:	8403      	strh	r3, [r0, #32]
}
 800194a:	bd70      	pop	{r4, r5, r6, pc}
 800194c:	40012c00 	.word	0x40012c00

08001950 <TIM_OC3Init>:
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8001950:	8c03      	ldrh	r3, [r0, #32]
{
 8001952:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8001954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001958:	041b      	lsls	r3, r3, #16
 800195a:	0c1b      	lsrs	r3, r3, #16
 800195c:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800195e:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001960:	8882      	ldrh	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001962:	8b84      	ldrh	r4, [r0, #28]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001964:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8001966:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 800196a:	0424      	lsls	r4, r4, #16
 800196c:	0c24      	lsrs	r4, r4, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800196e:	884e      	ldrh	r6, [r1, #2]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001970:	432c      	orrs	r4, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8001972:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001976:	890d      	ldrh	r5, [r1, #8]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8001978:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800197a:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 800197c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800197e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001982:	4d11      	ldr	r5, [pc, #68]	; (80019c8 <TIM_OC3Init+0x78>)
  tmpcr2 =  TIMx->CR2;
 8001984:	b292      	uxth	r2, r2
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001986:	42a8      	cmp	r0, r5
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001988:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8))
 800198a:	d003      	beq.n	8001994 <TIM_OC3Init+0x44>
 800198c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001990:	42a8      	cmp	r0, r5
 8001992:	d113      	bne.n	80019bc <TIM_OC3Init+0x6c>
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001994:	894d      	ldrh	r5, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8001996:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800199a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 800199e:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 80019a2:	401d      	ands	r5, r3
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80019a4:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80019a6:	89ce      	ldrh	r6, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80019a8:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80019ac:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 80019ae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80019b2:	4335      	orrs	r5, r6
 80019b4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80019b8:	b29b      	uxth	r3, r3
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80019ba:	b292      	uxth	r2, r2
  TIMx->CR2 = tmpcr2;
 80019bc:	8082      	strh	r2, [r0, #4]
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80019be:	88ca      	ldrh	r2, [r1, #6]
  TIMx->CCMR2 = tmpccmrx;
 80019c0:	8384      	strh	r4, [r0, #28]
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80019c2:	8782      	strh	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80019c4:	8403      	strh	r3, [r0, #32]
}
 80019c6:	bd70      	pop	{r4, r5, r6, pc}
 80019c8:	40012c00 	.word	0x40012c00

080019cc <TIM_OC4Init>:
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 80019cc:	8c03      	ldrh	r3, [r0, #32]
{
 80019ce:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 80019d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	0c1b      	lsrs	r3, r3, #16
 80019d8:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80019da:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80019dc:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80019de:	8b82      	ldrh	r2, [r0, #28]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80019e0:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 80019e2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80019e6:	0412      	lsls	r2, r2, #16
 80019e8:	0c12      	lsrs	r2, r2, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80019ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80019ee:	884e      	ldrh	r6, [r1, #2]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80019f0:	890d      	ldrh	r5, [r1, #8]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 80019f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019f6:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80019f8:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 80019fa:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80019fc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001a00:	4d0b      	ldr	r5, [pc, #44]	; (8001a30 <TIM_OC4Init+0x64>)
  tmpcr2 =  TIMx->CR2;
 8001a02:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001a04:	42a8      	cmp	r0, r5
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001a06:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001a08:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001a0a:	d003      	beq.n	8001a14 <TIM_OC4Init+0x48>
 8001a0c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001a10:	42a8      	cmp	r0, r5
 8001a12:	d105      	bne.n	8001a20 <TIM_OC4Init+0x54>
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001a14:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8001a16:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001a1a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8001a1e:	b2a4      	uxth	r4, r4
  TIMx->CR2 = tmpcr2;
 8001a20:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001a22:	8382      	strh	r2, [r0, #28]
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001a24:	88ca      	ldrh	r2, [r1, #6]
 8001a26:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8001a2a:	8403      	strh	r3, [r0, #32]
}
 8001a2c:	bd70      	pop	{r4, r5, r6, pc}
 8001a2e:	bf00      	nop
 8001a30:	40012c00 	.word	0x40012c00

08001a34 <TIM_BDTRConfig>:
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001a34:	884a      	ldrh	r2, [r1, #2]
 8001a36:	880b      	ldrh	r3, [r1, #0]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	888a      	ldrh	r2, [r1, #4]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	88ca      	ldrh	r2, [r1, #6]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	890a      	ldrh	r2, [r1, #8]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	894a      	ldrh	r2, [r1, #10]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	898a      	ldrh	r2, [r1, #12]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
}
 8001a54:	4770      	bx	lr

08001a56 <TIM_TimeBaseStructInit>:
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8001a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a5a:	8083      	strh	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001a60:	80c3      	strh	r3, [r0, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001a62:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001a64:	7203      	strb	r3, [r0, #8]
}
 8001a66:	4770      	bx	lr

08001a68 <TIM_OCStructInit>:
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8001a6c:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8001a6e:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 8001a70:	80c3      	strh	r3, [r0, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8001a72:	8103      	strh	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8001a74:	8143      	strh	r3, [r0, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8001a76:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8001a78:	81c3      	strh	r3, [r0, #14]
}
 8001a7a:	4770      	bx	lr

08001a7c <TIM_ICStructInit>:
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001a7c:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001a7e:	2201      	movs	r2, #1
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001a80:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001a82:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001a84:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001a86:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8001a88:	8103      	strh	r3, [r0, #8]
}
 8001a8a:	4770      	bx	lr

08001a8c <TIM_BDTRStructInit>:
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8001a90:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8001a92:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8001a94:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8001a96:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8001a98:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8001a9a:	8183      	strh	r3, [r0, #12]
}
 8001a9c:	4770      	bx	lr

08001a9e <TIM_Cmd>:
    TIMx->CR1 |= TIM_CR1_CEN;
 8001a9e:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8001aa0:	b121      	cbz	r1, 8001aac <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001aa8:	8003      	strh	r3, [r0, #0]
}
 8001aaa:	4770      	bx	lr
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	041b      	lsls	r3, r3, #16
 8001ab2:	0c1b      	lsrs	r3, r3, #16
 8001ab4:	e7f8      	b.n	8001aa8 <TIM_Cmd+0xa>

08001ab6 <TIM_CtrlPWMOutputs>:
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001ab6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  if (NewState != DISABLE)
 8001aba:	b139      	cbz	r1, 8001acc <TIM_CtrlPWMOutputs+0x16>
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ac4:	b29b      	uxth	r3, r3
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8001ac6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
}
 8001aca:	4770      	bx	lr
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8001acc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ad0:	e7f9      	b.n	8001ac6 <TIM_CtrlPWMOutputs+0x10>

08001ad2 <TIM_ITConfig>:
    TIMx->DIER |= TIM_IT;
 8001ad2:	8983      	ldrh	r3, [r0, #12]
 8001ad4:	b29b      	uxth	r3, r3
  if (NewState != DISABLE)
 8001ad6:	b112      	cbz	r2, 8001ade <TIM_ITConfig+0xc>
    TIMx->DIER |= TIM_IT;
 8001ad8:	4319      	orrs	r1, r3
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001ada:	8181      	strh	r1, [r0, #12]
}
 8001adc:	4770      	bx	lr
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001ade:	ea23 0101 	bic.w	r1, r3, r1
 8001ae2:	e7fa      	b.n	8001ada <TIM_ITConfig+0x8>

08001ae4 <TIM_GenerateEvent>:
  TIMx->EGR = TIM_EventSource;
 8001ae4:	8281      	strh	r1, [r0, #20]
}
 8001ae6:	4770      	bx	lr

08001ae8 <TIM_DMAConfig>:
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
}
 8001aee:	4770      	bx	lr

08001af0 <TIM_DMACmd>:
 8001af0:	f7ff bfef 	b.w	8001ad2 <TIM_ITConfig>

08001af4 <TIM_InternalClockConfig>:
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001af4:	8903      	ldrh	r3, [r0, #8]
 8001af6:	f023 0307 	bic.w	r3, r3, #7
 8001afa:	041b      	lsls	r3, r3, #16
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	8103      	strh	r3, [r0, #8]
}
 8001b00:	4770      	bx	lr

08001b02 <TIM_ITRxExternalClockConfig>:
  tmpsmcr = TIMx->SMCR;
 8001b02:	8903      	ldrh	r3, [r0, #8]
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b08:	041b      	lsls	r3, r3, #16
 8001b0a:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr |= TIM_InputTriggerSource;
 8001b0c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001b0e:	8103      	strh	r3, [r0, #8]
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8001b10:	8903      	ldrh	r3, [r0, #8]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	f043 0307 	orr.w	r3, r3, #7
 8001b18:	8103      	strh	r3, [r0, #8]
}
 8001b1a:	4770      	bx	lr

08001b1c <TIM_TIxExternalClockConfig>:
{
 8001b1c:	b538      	push	{r3, r4, r5, lr}
 8001b1e:	460d      	mov	r5, r1
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8001b20:	2d60      	cmp	r5, #96	; 0x60
{
 8001b22:	4611      	mov	r1, r2
 8001b24:	4604      	mov	r4, r0
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8001b26:	f04f 0201 	mov.w	r2, #1
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8001b2a:	d10e      	bne.n	8001b4a <TIM_TIxExternalClockConfig+0x2e>
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8001b2c:	f7ff fd24 	bl	8001578 <TI2_Config>
  tmpsmcr = TIMx->SMCR;
 8001b30:	8923      	ldrh	r3, [r4, #8]
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b36:	041b      	lsls	r3, r3, #16
 8001b38:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr |= TIM_InputTriggerSource;
 8001b3a:	432b      	orrs	r3, r5
  TIMx->SMCR = tmpsmcr;
 8001b3c:	8123      	strh	r3, [r4, #8]
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8001b3e:	8923      	ldrh	r3, [r4, #8]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	f043 0307 	orr.w	r3, r3, #7
 8001b46:	8123      	strh	r3, [r4, #8]
}
 8001b48:	bd38      	pop	{r3, r4, r5, pc}
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8001b4a:	f7ff fcdd 	bl	8001508 <TI1_Config>
 8001b4e:	e7ef      	b.n	8001b30 <TIM_TIxExternalClockConfig+0x14>

08001b50 <TIM_ETRConfig>:
{
 8001b50:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8001b52:	8904      	ldrh	r4, [r0, #8]
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8001b54:	430a      	orrs	r2, r1
  tmpsmcr &= SMCR_ETR_Mask;
 8001b56:	b2e4      	uxtb	r4, r4
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8001b58:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001b5c:	4314      	orrs	r4, r2
 8001b5e:	b2a4      	uxth	r4, r4
  TIMx->SMCR = tmpsmcr;
 8001b60:	8104      	strh	r4, [r0, #8]
}
 8001b62:	bd10      	pop	{r4, pc}

08001b64 <TIM_ETRClockMode1Config>:
{
 8001b64:	b510      	push	{r4, lr}
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8001b66:	f7ff fff3 	bl	8001b50 <TIM_ETRConfig>
  tmpsmcr = TIMx->SMCR;
 8001b6a:	8903      	ldrh	r3, [r0, #8]
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001b6c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b70:	041b      	lsls	r3, r3, #16
 8001b72:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr |= TIM_TS_ETRF;
 8001b74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8001b78:	8103      	strh	r3, [r0, #8]
}
 8001b7a:	bd10      	pop	{r4, pc}

08001b7c <TIM_ETRClockMode2Config>:
{
 8001b7c:	b510      	push	{r4, lr}
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8001b7e:	f7ff ffe7 	bl	8001b50 <TIM_ETRConfig>
  TIMx->SMCR |= TIM_SMCR_ECE;
 8001b82:	8903      	ldrh	r3, [r0, #8]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8a:	8103      	strh	r3, [r0, #8]
}
 8001b8c:	bd10      	pop	{r4, pc}

08001b8e <TIM_PrescalerConfig>:
  TIMx->PSC = Prescaler;
 8001b8e:	8501      	strh	r1, [r0, #40]	; 0x28
  TIMx->EGR = TIM_PSCReloadMode;
 8001b90:	8282      	strh	r2, [r0, #20]
}
 8001b92:	4770      	bx	lr

08001b94 <TIM_CounterModeConfig>:
  tmpcr1 = TIMx->CR1;
 8001b94:	8803      	ldrh	r3, [r0, #0]
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b9a:	041b      	lsls	r3, r3, #16
 8001b9c:	0c1b      	lsrs	r3, r3, #16
  tmpcr1 |= TIM_CounterMode;
 8001b9e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8001ba0:	8003      	strh	r3, [r0, #0]
}
 8001ba2:	4770      	bx	lr

08001ba4 <TIM_SelectInputTrigger>:
  tmpsmcr = TIMx->SMCR;
 8001ba4:	8903      	ldrh	r3, [r0, #8]
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001baa:	041b      	lsls	r3, r3, #16
 8001bac:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr |= TIM_InputTriggerSource;
 8001bae:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001bb0:	8103      	strh	r3, [r0, #8]
}
 8001bb2:	4770      	bx	lr

08001bb4 <TIM_EncoderInterfaceConfig>:
{
 8001bb4:	b570      	push	{r4, r5, r6, lr}
  tmpsmcr = TIMx->SMCR;
 8001bb6:	8906      	ldrh	r6, [r0, #8]
  tmpccmr1 = TIMx->CCMR1;
 8001bb8:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001bba:	8c05      	ldrh	r5, [r0, #32]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8001bbc:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8001bc0:	f024 0403 	bic.w	r4, r4, #3
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8001bc4:	f025 0522 	bic.w	r5, r5, #34	; 0x22
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001bc8:	f026 0607 	bic.w	r6, r6, #7
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8001bcc:	0424      	lsls	r4, r4, #16
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8001bce:	042d      	lsls	r5, r5, #16
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001bd0:	0436      	lsls	r6, r6, #16
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8001bd2:	0c24      	lsrs	r4, r4, #16
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8001bd4:	0c2d      	lsrs	r5, r5, #16
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001bd6:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001bda:	0c36      	lsrs	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8001bdc:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001be0:	4315      	orrs	r5, r2
  tmpsmcr |= TIM_EncoderMode;
 8001be2:	430e      	orrs	r6, r1
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8001be4:	f044 0401 	orr.w	r4, r4, #1
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001be8:	b2ad      	uxth	r5, r5
  TIMx->SMCR = tmpsmcr;
 8001bea:	8106      	strh	r6, [r0, #8]
  TIMx->CCMR1 = tmpccmr1;
 8001bec:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001bee:	8405      	strh	r5, [r0, #32]
}
 8001bf0:	bd70      	pop	{r4, r5, r6, pc}

08001bf2 <TIM_ForcedOC1Config>:
  tmpccmr1 = TIMx->CCMR1;
 8001bf2:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 8001bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bf8:	041b      	lsls	r3, r3, #16
 8001bfa:	0c1b      	lsrs	r3, r3, #16
  tmpccmr1 |= TIM_ForcedAction;
 8001bfc:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1;
 8001bfe:	8303      	strh	r3, [r0, #24]
}
 8001c00:	4770      	bx	lr

08001c02 <TIM_ForcedOC2Config>:
  tmpccmr1 = TIMx->CCMR1;
 8001c02:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 8001c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c08:	041b      	lsls	r3, r3, #16
 8001c0a:	0c1b      	lsrs	r3, r3, #16
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8001c0c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c10:	b29b      	uxth	r3, r3
  TIMx->CCMR1 = tmpccmr1;
 8001c12:	8303      	strh	r3, [r0, #24]
}
 8001c14:	4770      	bx	lr

08001c16 <TIM_ForcedOC3Config>:
  tmpccmr2 = TIMx->CCMR2;
 8001c16:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 8001c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c1c:	041b      	lsls	r3, r3, #16
 8001c1e:	0c1b      	lsrs	r3, r3, #16
  tmpccmr2 |= TIM_ForcedAction;
 8001c20:	430b      	orrs	r3, r1
  TIMx->CCMR2 = tmpccmr2;
 8001c22:	8383      	strh	r3, [r0, #28]
}
 8001c24:	4770      	bx	lr

08001c26 <TIM_ForcedOC4Config>:
  tmpccmr2 = TIMx->CCMR2;
 8001c26:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 8001c28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c2c:	041b      	lsls	r3, r3, #16
 8001c2e:	0c1b      	lsrs	r3, r3, #16
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8001c30:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c34:	b29b      	uxth	r3, r3
  TIMx->CCMR2 = tmpccmr2;
 8001c36:	8383      	strh	r3, [r0, #28]
}
 8001c38:	4770      	bx	lr

08001c3a <TIM_ARRPreloadConfig>:
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001c3a:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8001c3c:	b121      	cbz	r1, 8001c48 <TIM_ARRPreloadConfig+0xe>
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8001c44:	8003      	strh	r3, [r0, #0]
}
 8001c46:	4770      	bx	lr
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8001c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c4c:	041b      	lsls	r3, r3, #16
 8001c4e:	0c1b      	lsrs	r3, r3, #16
 8001c50:	e7f8      	b.n	8001c44 <TIM_ARRPreloadConfig+0xa>

08001c52 <TIM_SelectCOM>:
    TIMx->CR2 |= TIM_CR2_CCUS;
 8001c52:	8883      	ldrh	r3, [r0, #4]
  if (NewState != DISABLE)
 8001c54:	b121      	cbz	r1, 8001c60 <TIM_SelectCOM+0xe>
    TIMx->CR2 |= TIM_CR2_CCUS;
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	f043 0304 	orr.w	r3, r3, #4
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 8001c5c:	8083      	strh	r3, [r0, #4]
}
 8001c5e:	4770      	bx	lr
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 8001c60:	f023 0304 	bic.w	r3, r3, #4
 8001c64:	041b      	lsls	r3, r3, #16
 8001c66:	0c1b      	lsrs	r3, r3, #16
 8001c68:	e7f8      	b.n	8001c5c <TIM_SelectCOM+0xa>

08001c6a <TIM_SelectCCDMA>:
    TIMx->CR2 |= TIM_CR2_CCDS;
 8001c6a:	8883      	ldrh	r3, [r0, #4]
  if (NewState != DISABLE)
 8001c6c:	b121      	cbz	r1, 8001c78 <TIM_SelectCCDMA+0xe>
    TIMx->CR2 |= TIM_CR2_CCDS;
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	f043 0308 	orr.w	r3, r3, #8
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 8001c74:	8083      	strh	r3, [r0, #4]
}
 8001c76:	4770      	bx	lr
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 8001c78:	f023 0308 	bic.w	r3, r3, #8
 8001c7c:	041b      	lsls	r3, r3, #16
 8001c7e:	0c1b      	lsrs	r3, r3, #16
 8001c80:	e7f8      	b.n	8001c74 <TIM_SelectCCDMA+0xa>

08001c82 <TIM_CCPreloadControl>:
    TIMx->CR2 |= TIM_CR2_CCPC;
 8001c82:	8883      	ldrh	r3, [r0, #4]
  if (NewState != DISABLE)
 8001c84:	b121      	cbz	r1, 8001c90 <TIM_CCPreloadControl+0xe>
    TIMx->CR2 |= TIM_CR2_CCPC;
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	f043 0301 	orr.w	r3, r3, #1
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 8001c8c:	8083      	strh	r3, [r0, #4]
}
 8001c8e:	4770      	bx	lr
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	041b      	lsls	r3, r3, #16
 8001c96:	0c1b      	lsrs	r3, r3, #16
 8001c98:	e7f8      	b.n	8001c8c <TIM_CCPreloadControl+0xa>

08001c9a <TIM_OC1PreloadConfig>:
  tmpccmr1 = TIMx->CCMR1;
 8001c9a:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8001c9c:	f023 0308 	bic.w	r3, r3, #8
 8001ca0:	041b      	lsls	r3, r3, #16
 8001ca2:	0c1b      	lsrs	r3, r3, #16
  tmpccmr1 |= TIM_OCPreload;
 8001ca4:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1;
 8001ca6:	8303      	strh	r3, [r0, #24]
}
 8001ca8:	4770      	bx	lr

08001caa <TIM_OC2PreloadConfig>:
  tmpccmr1 = TIMx->CCMR1;
 8001caa:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8001cac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cb0:	041b      	lsls	r3, r3, #16
 8001cb2:	0c1b      	lsrs	r3, r3, #16
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8001cb4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001cb8:	b29b      	uxth	r3, r3
  TIMx->CCMR1 = tmpccmr1;
 8001cba:	8303      	strh	r3, [r0, #24]
}
 8001cbc:	4770      	bx	lr

08001cbe <TIM_OC3PreloadConfig>:
  tmpccmr2 = TIMx->CCMR2;
 8001cbe:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8001cc0:	f023 0308 	bic.w	r3, r3, #8
 8001cc4:	041b      	lsls	r3, r3, #16
 8001cc6:	0c1b      	lsrs	r3, r3, #16
  tmpccmr2 |= TIM_OCPreload;
 8001cc8:	430b      	orrs	r3, r1
  TIMx->CCMR2 = tmpccmr2;
 8001cca:	8383      	strh	r3, [r0, #28]
}
 8001ccc:	4770      	bx	lr

08001cce <TIM_OC4PreloadConfig>:
  tmpccmr2 = TIMx->CCMR2;
 8001cce:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8001cd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	0c1b      	lsrs	r3, r3, #16
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8001cd8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001cdc:	b29b      	uxth	r3, r3
  TIMx->CCMR2 = tmpccmr2;
 8001cde:	8383      	strh	r3, [r0, #28]
}
 8001ce0:	4770      	bx	lr

08001ce2 <TIM_OC1FastConfig>:
  tmpccmr1 = TIMx->CCMR1;
 8001ce2:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 8001ce4:	f023 0304 	bic.w	r3, r3, #4
 8001ce8:	041b      	lsls	r3, r3, #16
 8001cea:	0c1b      	lsrs	r3, r3, #16
  tmpccmr1 |= TIM_OCFast;
 8001cec:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1;
 8001cee:	8303      	strh	r3, [r0, #24]
}
 8001cf0:	4770      	bx	lr

08001cf2 <TIM_OC2FastConfig>:
  tmpccmr1 = TIMx->CCMR1;
 8001cf2:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 8001cf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cf8:	041b      	lsls	r3, r3, #16
 8001cfa:	0c1b      	lsrs	r3, r3, #16
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8001cfc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d00:	b29b      	uxth	r3, r3
  TIMx->CCMR1 = tmpccmr1;
 8001d02:	8303      	strh	r3, [r0, #24]
}
 8001d04:	4770      	bx	lr

08001d06 <TIM_OC3FastConfig>:
  tmpccmr2 = TIMx->CCMR2;
 8001d06:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 8001d08:	f023 0304 	bic.w	r3, r3, #4
 8001d0c:	041b      	lsls	r3, r3, #16
 8001d0e:	0c1b      	lsrs	r3, r3, #16
  tmpccmr2 |= TIM_OCFast;
 8001d10:	430b      	orrs	r3, r1
  TIMx->CCMR2 = tmpccmr2;
 8001d12:	8383      	strh	r3, [r0, #28]
}
 8001d14:	4770      	bx	lr

08001d16 <TIM_OC4FastConfig>:
  tmpccmr2 = TIMx->CCMR2;
 8001d16:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 8001d18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d1c:	041b      	lsls	r3, r3, #16
 8001d1e:	0c1b      	lsrs	r3, r3, #16
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8001d20:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d24:	b29b      	uxth	r3, r3
  TIMx->CCMR2 = tmpccmr2;
 8001d26:	8383      	strh	r3, [r0, #28]
}
 8001d28:	4770      	bx	lr

08001d2a <TIM_ClearOC1Ref>:
  tmpccmr1 = TIMx->CCMR1;
 8001d2a:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 8001d2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d30:	041b      	lsls	r3, r3, #16
 8001d32:	0c1b      	lsrs	r3, r3, #16
  tmpccmr1 |= TIM_OCClear;
 8001d34:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1;
 8001d36:	8303      	strh	r3, [r0, #24]
}
 8001d38:	4770      	bx	lr

08001d3a <TIM_ClearOC2Ref>:
  tmpccmr1 = TIMx->CCMR1;
 8001d3a:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 8001d3c:	f3c3 030e 	ubfx	r3, r3, #0, #15
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8001d40:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d44:	b29b      	uxth	r3, r3
  TIMx->CCMR1 = tmpccmr1;
 8001d46:	8303      	strh	r3, [r0, #24]
}
 8001d48:	4770      	bx	lr

08001d4a <TIM_ClearOC3Ref>:
  tmpccmr2 = TIMx->CCMR2;
 8001d4a:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 8001d4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d50:	041b      	lsls	r3, r3, #16
 8001d52:	0c1b      	lsrs	r3, r3, #16
  tmpccmr2 |= TIM_OCClear;
 8001d54:	430b      	orrs	r3, r1
  TIMx->CCMR2 = tmpccmr2;
 8001d56:	8383      	strh	r3, [r0, #28]
}
 8001d58:	4770      	bx	lr

08001d5a <TIM_ClearOC4Ref>:
  tmpccmr2 = TIMx->CCMR2;
 8001d5a:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 8001d5c:	f3c3 030e 	ubfx	r3, r3, #0, #15
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8001d60:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d64:	b29b      	uxth	r3, r3
  TIMx->CCMR2 = tmpccmr2;
 8001d66:	8383      	strh	r3, [r0, #28]
}
 8001d68:	4770      	bx	lr

08001d6a <TIM_OC1PolarityConfig>:
  tmpccer = TIMx->CCER;
 8001d6a:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 8001d6c:	f023 0302 	bic.w	r3, r3, #2
 8001d70:	041b      	lsls	r3, r3, #16
 8001d72:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8001d74:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 8001d76:	8403      	strh	r3, [r0, #32]
}
 8001d78:	4770      	bx	lr

08001d7a <TIM_OC1NPolarityConfig>:
  tmpccer = TIMx->CCER;
 8001d7a:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 8001d7c:	f023 0308 	bic.w	r3, r3, #8
 8001d80:	041b      	lsls	r3, r3, #16
 8001d82:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8001d84:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 8001d86:	8403      	strh	r3, [r0, #32]
}
 8001d88:	4770      	bx	lr

08001d8a <TIM_OC2PolarityConfig>:
  tmpccer = TIMx->CCER;
 8001d8a:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 8001d8c:	f023 0320 	bic.w	r3, r3, #32
 8001d90:	041b      	lsls	r3, r3, #16
 8001d92:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8001d94:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001d98:	b29b      	uxth	r3, r3
  TIMx->CCER = tmpccer;
 8001d9a:	8403      	strh	r3, [r0, #32]
}
 8001d9c:	4770      	bx	lr

08001d9e <TIM_OC2NPolarityConfig>:
  tmpccer = TIMx->CCER;
 8001d9e:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 8001da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001da4:	041b      	lsls	r3, r3, #16
 8001da6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8001da8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001dac:	b29b      	uxth	r3, r3
  TIMx->CCER = tmpccer;
 8001dae:	8403      	strh	r3, [r0, #32]
}
 8001db0:	4770      	bx	lr

08001db2 <TIM_OC3PolarityConfig>:
  tmpccer = TIMx->CCER;
 8001db2:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 8001db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001db8:	041b      	lsls	r3, r3, #16
 8001dba:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8001dbc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001dc0:	b29b      	uxth	r3, r3
  TIMx->CCER = tmpccer;
 8001dc2:	8403      	strh	r3, [r0, #32]
}
 8001dc4:	4770      	bx	lr

08001dc6 <TIM_OC3NPolarityConfig>:
  tmpccer = TIMx->CCER;
 8001dc6:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 8001dc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001dcc:	041b      	lsls	r3, r3, #16
 8001dce:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8001dd0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001dd4:	b29b      	uxth	r3, r3
  TIMx->CCER = tmpccer;
 8001dd6:	8403      	strh	r3, [r0, #32]
}
 8001dd8:	4770      	bx	lr

08001dda <TIM_OC4PolarityConfig>:
  tmpccer = TIMx->CCER;
 8001dda:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 8001ddc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001de0:	041b      	lsls	r3, r3, #16
 8001de2:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8001de4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8001de8:	b29b      	uxth	r3, r3
  TIMx->CCER = tmpccer;
 8001dea:	8403      	strh	r3, [r0, #32]
}
 8001dec:	4770      	bx	lr

08001dee <TIM_CCxCmd>:
{
 8001dee:	b510      	push	{r4, lr}
  tmp = CCER_CCE_Set << TIM_Channel;
 8001df0:	2401      	movs	r4, #1
  TIMx->CCER &= (uint16_t)~ tmp;
 8001df2:	8c03      	ldrh	r3, [r0, #32]
  tmp = CCER_CCE_Set << TIM_Channel;
 8001df4:	408c      	lsls	r4, r1
  TIMx->CCER &= (uint16_t)~ tmp;
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	ea23 0304 	bic.w	r3, r3, r4
 8001dfc:	8403      	strh	r3, [r0, #32]
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8001dfe:	8c03      	ldrh	r3, [r0, #32]
 8001e00:	408a      	lsls	r2, r1
 8001e02:	431a      	orrs	r2, r3
 8001e04:	b292      	uxth	r2, r2
 8001e06:	8402      	strh	r2, [r0, #32]
}
 8001e08:	bd10      	pop	{r4, pc}

08001e0a <TIM_CCxNCmd>:
{
 8001e0a:	b510      	push	{r4, lr}
  tmp = CCER_CCNE_Set << TIM_Channel;
 8001e0c:	2404      	movs	r4, #4
  TIMx->CCER &= (uint16_t) ~tmp;
 8001e0e:	8c03      	ldrh	r3, [r0, #32]
  tmp = CCER_CCNE_Set << TIM_Channel;
 8001e10:	408c      	lsls	r4, r1
  TIMx->CCER &= (uint16_t) ~tmp;
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	ea23 0304 	bic.w	r3, r3, r4
 8001e18:	8403      	strh	r3, [r0, #32]
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8001e1a:	8c03      	ldrh	r3, [r0, #32]
 8001e1c:	408a      	lsls	r2, r1
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	b292      	uxth	r2, r2
 8001e22:	8402      	strh	r2, [r0, #32]
}
 8001e24:	bd10      	pop	{r4, pc}

08001e26 <TIM_SelectOCxM>:
{
 8001e26:	b530      	push	{r4, r5, lr}
  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
 8001e28:	2501      	movs	r5, #1
  TIMx->CCER &= (uint16_t) ~tmp1;
 8001e2a:	8c04      	ldrh	r4, [r0, #32]
  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
 8001e2c:	408d      	lsls	r5, r1
  TIMx->CCER &= (uint16_t) ~tmp1;
 8001e2e:	b2a4      	uxth	r4, r4
 8001e30:	ea24 0405 	bic.w	r4, r4, r5
  tmp += CCMR_Offset;
 8001e34:	f100 0318 	add.w	r3, r0, #24
  TIMx->CCER &= (uint16_t) ~tmp1;
 8001e38:	8404      	strh	r4, [r0, #32]
  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8001e3a:	f021 0008 	bic.w	r0, r1, #8
 8001e3e:	b940      	cbnz	r0, 8001e52 <TIM_SelectOCxM+0x2c>
    tmp += (TIM_Channel>>1);
 8001e40:	0849      	lsrs	r1, r1, #1
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 8001e42:	58c8      	ldr	r0, [r1, r3]
 8001e44:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8001e48:	50c8      	str	r0, [r1, r3]
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8001e4a:	58c8      	ldr	r0, [r1, r3]
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8001e4c:	4302      	orrs	r2, r0
 8001e4e:	50ca      	str	r2, [r1, r3]
}
 8001e50:	bd30      	pop	{r4, r5, pc}
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8001e52:	3904      	subs	r1, #4
 8001e54:	f3c1 014e 	ubfx	r1, r1, #1, #15
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8001e58:	58c8      	ldr	r0, [r1, r3]
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8001e5a:	0212      	lsls	r2, r2, #8
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8001e5c:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 8001e60:	50c8      	str	r0, [r1, r3]
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8001e62:	58c8      	ldr	r0, [r1, r3]
 8001e64:	b292      	uxth	r2, r2
 8001e66:	e7f1      	b.n	8001e4c <TIM_SelectOCxM+0x26>

08001e68 <TIM_UpdateDisableConfig>:
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001e68:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8001e6a:	b121      	cbz	r1, 8001e76 <TIM_UpdateDisableConfig+0xe>
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	f043 0302 	orr.w	r3, r3, #2
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 8001e72:	8003      	strh	r3, [r0, #0]
}
 8001e74:	4770      	bx	lr
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 8001e76:	f023 0302 	bic.w	r3, r3, #2
 8001e7a:	041b      	lsls	r3, r3, #16
 8001e7c:	0c1b      	lsrs	r3, r3, #16
 8001e7e:	e7f8      	b.n	8001e72 <TIM_UpdateDisableConfig+0xa>

08001e80 <TIM_UpdateRequestConfig>:
    TIMx->CR1 |= TIM_CR1_URS;
 8001e80:	8803      	ldrh	r3, [r0, #0]
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8001e82:	b121      	cbz	r1, 8001e8e <TIM_UpdateRequestConfig+0xe>
    TIMx->CR1 |= TIM_CR1_URS;
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	f043 0304 	orr.w	r3, r3, #4
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 8001e8a:	8003      	strh	r3, [r0, #0]
}
 8001e8c:	4770      	bx	lr
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 8001e8e:	f023 0304 	bic.w	r3, r3, #4
 8001e92:	041b      	lsls	r3, r3, #16
 8001e94:	0c1b      	lsrs	r3, r3, #16
 8001e96:	e7f8      	b.n	8001e8a <TIM_UpdateRequestConfig+0xa>

08001e98 <TIM_SelectHallSensor>:
    TIMx->CR2 |= TIM_CR2_TI1S;
 8001e98:	8883      	ldrh	r3, [r0, #4]
  if (NewState != DISABLE)
 8001e9a:	b121      	cbz	r1, 8001ea6 <TIM_SelectHallSensor+0xe>
    TIMx->CR2 |= TIM_CR2_TI1S;
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 8001ea2:	8083      	strh	r3, [r0, #4]
}
 8001ea4:	4770      	bx	lr
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 8001ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001eaa:	041b      	lsls	r3, r3, #16
 8001eac:	0c1b      	lsrs	r3, r3, #16
 8001eae:	e7f8      	b.n	8001ea2 <TIM_SelectHallSensor+0xa>

08001eb0 <TIM_SelectOnePulseMode>:
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8001eb0:	8803      	ldrh	r3, [r0, #0]
 8001eb2:	f023 0308 	bic.w	r3, r3, #8
 8001eb6:	041b      	lsls	r3, r3, #16
 8001eb8:	0c1b      	lsrs	r3, r3, #16
 8001eba:	8003      	strh	r3, [r0, #0]
  TIMx->CR1 |= TIM_OPMode;
 8001ebc:	8803      	ldrh	r3, [r0, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	8003      	strh	r3, [r0, #0]
}
 8001ec4:	4770      	bx	lr

08001ec6 <TIM_SelectOutputTrigger>:
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 8001ec6:	8883      	ldrh	r3, [r0, #4]
 8001ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ecc:	041b      	lsls	r3, r3, #16
 8001ece:	0c1b      	lsrs	r3, r3, #16
 8001ed0:	8083      	strh	r3, [r0, #4]
  TIMx->CR2 |=  TIM_TRGOSource;
 8001ed2:	8883      	ldrh	r3, [r0, #4]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	8083      	strh	r3, [r0, #4]
}
 8001eda:	4770      	bx	lr

08001edc <TIM_SelectSlaveMode>:
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 8001edc:	8903      	ldrh	r3, [r0, #8]
 8001ede:	f023 0307 	bic.w	r3, r3, #7
 8001ee2:	041b      	lsls	r3, r3, #16
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	8103      	strh	r3, [r0, #8]
  TIMx->SMCR |= TIM_SlaveMode;
 8001ee8:	8903      	ldrh	r3, [r0, #8]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	430b      	orrs	r3, r1
 8001eee:	8103      	strh	r3, [r0, #8]
}
 8001ef0:	4770      	bx	lr

08001ef2 <TIM_SelectMasterSlaveMode>:
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 8001ef2:	8903      	ldrh	r3, [r0, #8]
 8001ef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ef8:	041b      	lsls	r3, r3, #16
 8001efa:	0c1b      	lsrs	r3, r3, #16
 8001efc:	8103      	strh	r3, [r0, #8]
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8001efe:	8903      	ldrh	r3, [r0, #8]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	430b      	orrs	r3, r1
 8001f04:	8103      	strh	r3, [r0, #8]
}
 8001f06:	4770      	bx	lr

08001f08 <TIM_SetCounter>:
  TIMx->CNT = Counter;
 8001f08:	8481      	strh	r1, [r0, #36]	; 0x24
}
 8001f0a:	4770      	bx	lr

08001f0c <TIM_SetAutoreload>:
  TIMx->ARR = Autoreload;
 8001f0c:	8581      	strh	r1, [r0, #44]	; 0x2c
}
 8001f0e:	4770      	bx	lr

08001f10 <TIM_SetCompare1>:
  TIMx->CCR1 = Compare1;
 8001f10:	8681      	strh	r1, [r0, #52]	; 0x34
}
 8001f12:	4770      	bx	lr

08001f14 <TIM_SetCompare2>:
  TIMx->CCR2 = Compare2;
 8001f14:	8701      	strh	r1, [r0, #56]	; 0x38
}
 8001f16:	4770      	bx	lr

08001f18 <TIM_SetCompare3>:
  TIMx->CCR3 = Compare3;
 8001f18:	8781      	strh	r1, [r0, #60]	; 0x3c
}
 8001f1a:	4770      	bx	lr

08001f1c <TIM_SetCompare4>:
  TIMx->CCR4 = Compare4;
 8001f1c:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
}
 8001f20:	4770      	bx	lr

08001f22 <TIM_SetIC1Prescaler>:
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8001f22:	8b03      	ldrh	r3, [r0, #24]
 8001f24:	f023 030c 	bic.w	r3, r3, #12
 8001f28:	041b      	lsls	r3, r3, #16
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	8303      	strh	r3, [r0, #24]
  TIMx->CCMR1 |= TIM_ICPSC;
 8001f2e:	8b03      	ldrh	r3, [r0, #24]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	430b      	orrs	r3, r1
 8001f34:	8303      	strh	r3, [r0, #24]
}
 8001f36:	4770      	bx	lr

08001f38 <TIM_SetIC2Prescaler>:
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8001f38:	8b02      	ldrh	r2, [r0, #24]
 8001f3a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001f3e:	0412      	lsls	r2, r2, #16
 8001f40:	0c12      	lsrs	r2, r2, #16
 8001f42:	8302      	strh	r2, [r0, #24]
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001f44:	8b03      	ldrh	r3, [r0, #24]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	8303      	strh	r3, [r0, #24]
}
 8001f50:	4770      	bx	lr

08001f52 <TIM_PWMIConfig>:
{
 8001f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f54:	460c      	mov	r4, r1
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8001f56:	8849      	ldrh	r1, [r1, #2]
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8001f58:	88a2      	ldrh	r2, [r4, #4]
    icoppositepolarity = TIM_ICPolarity_Rising;
 8001f5a:	2900      	cmp	r1, #0
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001f5c:	8827      	ldrh	r7, [r4, #0]
    icoppositepolarity = TIM_ICPolarity_Rising;
 8001f5e:	bf0c      	ite	eq
 8001f60:	2502      	moveq	r5, #2
 8001f62:	2500      	movne	r5, #0
    icoppositeselection = TIM_ICSelection_DirectTI;
 8001f64:	2a01      	cmp	r2, #1
 8001f66:	bf0c      	ite	eq
 8001f68:	2602      	moveq	r6, #2
 8001f6a:	2601      	movne	r6, #1
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8001f6c:	8923      	ldrh	r3, [r4, #8]
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001f6e:	b977      	cbnz	r7, 8001f8e <TIM_PWMIConfig+0x3c>
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8001f70:	f7ff faca 	bl	8001508 <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001f74:	88e1      	ldrh	r1, [r4, #6]
 8001f76:	f7ff ffd4 	bl	8001f22 <TIM_SetIC1Prescaler>
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8001f7a:	4632      	mov	r2, r6
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	8923      	ldrh	r3, [r4, #8]
 8001f80:	f7ff fafa 	bl	8001578 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001f84:	88e1      	ldrh	r1, [r4, #6]
}
 8001f86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001f8a:	f7ff bfd5 	b.w	8001f38 <TIM_SetIC2Prescaler>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8001f8e:	f7ff faf3 	bl	8001578 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001f92:	88e1      	ldrh	r1, [r4, #6]
 8001f94:	f7ff ffd0 	bl	8001f38 <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8001f98:	4629      	mov	r1, r5
 8001f9a:	4632      	mov	r2, r6
 8001f9c:	8923      	ldrh	r3, [r4, #8]
 8001f9e:	f7ff fab3 	bl	8001508 <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001fa2:	88e1      	ldrh	r1, [r4, #6]
}
 8001fa4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001fa8:	f7ff bfbb 	b.w	8001f22 <TIM_SetIC1Prescaler>

08001fac <TIM_SetIC3Prescaler>:
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8001fac:	8b83      	ldrh	r3, [r0, #28]
 8001fae:	f023 030c 	bic.w	r3, r3, #12
 8001fb2:	041b      	lsls	r3, r3, #16
 8001fb4:	0c1b      	lsrs	r3, r3, #16
 8001fb6:	8383      	strh	r3, [r0, #28]
  TIMx->CCMR2 |= TIM_ICPSC;
 8001fb8:	8b83      	ldrh	r3, [r0, #28]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	8383      	strh	r3, [r0, #28]
}
 8001fc0:	4770      	bx	lr

08001fc2 <TIM_SetIC4Prescaler>:
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8001fc2:	8b82      	ldrh	r2, [r0, #28]
 8001fc4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001fc8:	0412      	lsls	r2, r2, #16
 8001fca:	0c12      	lsrs	r2, r2, #16
 8001fcc:	8382      	strh	r2, [r0, #28]
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8001fce:	8b83      	ldrh	r3, [r0, #28]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	8383      	strh	r3, [r0, #28]
}
 8001fda:	4770      	bx	lr

08001fdc <TIM_ICInit>:
{
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fde:	460f      	mov	r7, r1
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001fe0:	8809      	ldrh	r1, [r1, #0]
{
 8001fe2:	4604      	mov	r4, r0
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001fe4:	887d      	ldrh	r5, [r7, #2]
 8001fe6:	88ba      	ldrh	r2, [r7, #4]
 8001fe8:	893b      	ldrh	r3, [r7, #8]
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001fea:	b939      	cbnz	r1, 8001ffc <TIM_ICInit+0x20>
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001fec:	4629      	mov	r1, r5
 8001fee:	f7ff fa8b 	bl	8001508 <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001ff2:	88f9      	ldrh	r1, [r7, #6]
}
 8001ff4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001ff8:	f7ff bf93 	b.w	8001f22 <TIM_SetIC1Prescaler>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8001ffc:	2904      	cmp	r1, #4
 8001ffe:	d107      	bne.n	8002010 <TIM_ICInit+0x34>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002000:	4629      	mov	r1, r5
 8002002:	f7ff fab9 	bl	8001578 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002006:	88f9      	ldrh	r1, [r7, #6]
}
 8002008:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800200c:	f7ff bf94 	b.w	8001f38 <TIM_SetIC2Prescaler>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002010:	2908      	cmp	r1, #8
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8002012:	8c00      	ldrh	r0, [r0, #32]
 8002014:	88f9      	ldrh	r1, [r7, #6]
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002016:	d139      	bne.n	800208c <TIM_ICInit+0xb0>
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8002018:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800201c:	0400      	lsls	r0, r0, #16
 800201e:	0c00      	lsrs	r0, r0, #16
 8002020:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002022:	8ba6      	ldrh	r6, [r4, #28]
  tmpccer = TIMx->CCER;
 8002024:	8c20      	ldrh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002026:	b2b6      	uxth	r6, r6
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8002028:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
 800202c:	4316      	orrs	r6, r2
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800202e:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002032:	4b35      	ldr	r3, [pc, #212]	; (8002108 <TIM_ICInit+0x12c>)
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8002034:	022f      	lsls	r7, r5, #8
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002036:	429c      	cmp	r4, r3
  tmpccer = TIMx->CCER;
 8002038:	b280      	uxth	r0, r0
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800203a:	b2bf      	uxth	r7, r7
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800203c:	b2b6      	uxth	r6, r6
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800203e:	d012      	beq.n	8002066 <TIM_ICInit+0x8a>
 8002040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002044:	429c      	cmp	r4, r3
 8002046:	d00e      	beq.n	8002066 <TIM_ICInit+0x8a>
 8002048:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800204c:	d00b      	beq.n	8002066 <TIM_ICInit+0x8a>
 800204e:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8002052:	429c      	cmp	r4, r3
 8002054:	d007      	beq.n	8002066 <TIM_ICInit+0x8a>
 8002056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800205a:	429c      	cmp	r4, r3
 800205c:	d003      	beq.n	8002066 <TIM_ICInit+0x8a>
     (TIMx == TIM4) ||(TIMx == TIM5))
 800205e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002062:	429c      	cmp	r4, r3
 8002064:	d10c      	bne.n	8002080 <TIM_ICInit+0xa4>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 8002066:	f420 7000 	bic.w	r0, r0, #512	; 0x200
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800206a:	ea47 0300 	orr.w	r3, r7, r0
 800206e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002072:	83a6      	strh	r6, [r4, #28]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002074:	4620      	mov	r0, r4
  TIMx->CCER = tmpccer;
 8002076:	8423      	strh	r3, [r4, #32]
}
 8002078:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800207c:	f7ff bf96 	b.w	8001fac <TIM_SetIC3Prescaler>
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002080:	f420 6020 	bic.w	r0, r0, #2560	; 0xa00
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 8002084:	4328      	orrs	r0, r5
 8002086:	f440 7380 	orr.w	r3, r0, #256	; 0x100
 800208a:	e7f2      	b.n	8002072 <TIM_ICInit+0x96>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 800208c:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8002090:	0400      	lsls	r0, r0, #16
 8002092:	0c00      	lsrs	r0, r0, #16
 8002094:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002096:	8ba7      	ldrh	r7, [r4, #28]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002098:	031e      	lsls	r6, r3, #12
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 800209a:	f427 7740 	bic.w	r7, r7, #768	; 0x300
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <TIM_ICInit+0x12c>)
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 80020a0:	053f      	lsls	r7, r7, #20
  tmpccer = TIMx->CCER;
 80020a2:	8c20      	ldrh	r0, [r4, #32]
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 80020a4:	0d3f      	lsrs	r7, r7, #20
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80020a6:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 80020aa:	ea4f 3c05 	mov.w	ip, r5, lsl #12
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80020ae:	433e      	orrs	r6, r7
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80020b0:	429c      	cmp	r4, r3
  tmpccer = TIMx->CCER;
 80020b2:	b280      	uxth	r0, r0
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 80020b4:	fa1f fc8c 	uxth.w	ip, ip
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80020b8:	b2b6      	uxth	r6, r6
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80020ba:	d012      	beq.n	80020e2 <TIM_ICInit+0x106>
 80020bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020c0:	429c      	cmp	r4, r3
 80020c2:	d00e      	beq.n	80020e2 <TIM_ICInit+0x106>
 80020c4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80020c8:	d00b      	beq.n	80020e2 <TIM_ICInit+0x106>
 80020ca:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 80020ce:	429c      	cmp	r4, r3
 80020d0:	d007      	beq.n	80020e2 <TIM_ICInit+0x106>
 80020d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020d6:	429c      	cmp	r4, r3
 80020d8:	d003      	beq.n	80020e2 <TIM_ICInit+0x106>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80020da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020de:	429c      	cmp	r4, r3
 80020e0:	d10c      	bne.n	80020fc <TIM_ICInit+0x120>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 80020e2:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80020e6:	ea4c 0300 	orr.w	r3, ip, r0
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 80020ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80020ee:	83a6      	strh	r6, [r4, #28]
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80020f0:	4620      	mov	r0, r4
  TIMx->CCER = tmpccer;
 80020f2:	8423      	strh	r3, [r4, #32]
}
 80020f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80020f8:	f7ff bf63 	b.w	8001fc2 <TIM_SetIC4Prescaler>
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 80020fc:	f647 53ff 	movw	r3, #32255	; 0x7dff
 8002100:	4003      	ands	r3, r0
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8002102:	432b      	orrs	r3, r5
 8002104:	e7f1      	b.n	80020ea <TIM_ICInit+0x10e>
 8002106:	bf00      	nop
 8002108:	40012c00 	.word	0x40012c00

0800210c <TIM_SetClockDivision>:
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 800210c:	8803      	ldrh	r3, [r0, #0]
 800210e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002112:	041b      	lsls	r3, r3, #16
 8002114:	0c1b      	lsrs	r3, r3, #16
 8002116:	8003      	strh	r3, [r0, #0]
  TIMx->CR1 |= TIM_CKD;
 8002118:	8803      	ldrh	r3, [r0, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	430b      	orrs	r3, r1
 800211e:	8003      	strh	r3, [r0, #0]
}
 8002120:	4770      	bx	lr

08002122 <TIM_GetCapture1>:
  return TIMx->CCR1;
 8002122:	8e80      	ldrh	r0, [r0, #52]	; 0x34
}
 8002124:	b280      	uxth	r0, r0
 8002126:	4770      	bx	lr

08002128 <TIM_GetCapture2>:
  return TIMx->CCR2;
 8002128:	8f00      	ldrh	r0, [r0, #56]	; 0x38
}
 800212a:	b280      	uxth	r0, r0
 800212c:	4770      	bx	lr

0800212e <TIM_GetCapture3>:
  return TIMx->CCR3;
 800212e:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
}
 8002130:	b280      	uxth	r0, r0
 8002132:	4770      	bx	lr

08002134 <TIM_GetCapture4>:
  return TIMx->CCR4;
 8002134:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
}
 8002138:	b280      	uxth	r0, r0
 800213a:	4770      	bx	lr

0800213c <TIM_GetCounter>:
  return TIMx->CNT;
 800213c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
}
 800213e:	b280      	uxth	r0, r0
 8002140:	4770      	bx	lr

08002142 <TIM_GetPrescaler>:
  return TIMx->PSC;
 8002142:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8002144:	b280      	uxth	r0, r0
 8002146:	4770      	bx	lr

08002148 <TIM_GetFlagStatus>:
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8002148:	8a03      	ldrh	r3, [r0, #16]
 800214a:	4219      	tst	r1, r3
}
 800214c:	bf14      	ite	ne
 800214e:	2001      	movne	r0, #1
 8002150:	2000      	moveq	r0, #0
 8002152:	4770      	bx	lr

08002154 <TIM_ClearFlag>:
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8002154:	43c9      	mvns	r1, r1
 8002156:	b289      	uxth	r1, r1
 8002158:	8201      	strh	r1, [r0, #16]
}
 800215a:	4770      	bx	lr

0800215c <TIM_GetITStatus>:
  itstatus = TIMx->SR & TIM_IT;
 800215c:	8a03      	ldrh	r3, [r0, #16]
  itenable = TIMx->DIER & TIM_IT;
 800215e:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002160:	ea11 0003 	ands.w	r0, r1, r3
  itenable = TIMx->DIER & TIM_IT;
 8002164:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002166:	d003      	beq.n	8002170 <TIM_GetITStatus+0x14>
 8002168:	420a      	tst	r2, r1
    bitstatus = RESET;
 800216a:	bf14      	ite	ne
 800216c:	2001      	movne	r0, #1
 800216e:	2000      	moveq	r0, #0
}
 8002170:	4770      	bx	lr

08002172 <TIM_ClearITPendingBit>:
 8002172:	43c9      	mvns	r1, r1
 8002174:	b289      	uxth	r1, r1
 8002176:	8201      	strh	r1, [r0, #16]
 8002178:	4770      	bx	lr
	...

0800217c <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800217c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800217e:	4b21      	ldr	r3, [pc, #132]	; (8002204 <USART_DeInit+0x88>)
 8002180:	4298      	cmp	r0, r3
 8002182:	d10b      	bne.n	800219c <USART_DeInit+0x20>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002184:	2101      	movs	r1, #1
 8002186:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800218a:	f000 fb0f 	bl	80027ac <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 800218e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002192:	2100      	movs	r1, #0
 8002194:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002198:	f000 bb08 	b.w	80027ac <RCC_APB2PeriphResetCmd>
  else if (USARTx == USART2)
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <USART_DeInit+0x8c>)
 800219e:	4298      	cmp	r0, r3
 80021a0:	d10b      	bne.n	80021ba <USART_DeInit+0x3e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80021a2:	2101      	movs	r1, #1
 80021a4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80021a8:	f000 fb0c 	bl	80027c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80021ac:	2100      	movs	r1, #0
 80021ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
}
 80021b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80021b6:	f000 bb05 	b.w	80027c4 <RCC_APB1PeriphResetCmd>
  else if (USARTx == USART3)
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <USART_DeInit+0x90>)
 80021bc:	4298      	cmp	r0, r3
 80021be:	d108      	bne.n	80021d2 <USART_DeInit+0x56>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80021c0:	2101      	movs	r1, #1
 80021c2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80021c6:	f000 fafd 	bl	80027c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80021ca:	2100      	movs	r1, #0
 80021cc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80021d0:	e7ef      	b.n	80021b2 <USART_DeInit+0x36>
  else if (USARTx == UART4)
 80021d2:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <USART_DeInit+0x94>)
 80021d4:	4298      	cmp	r0, r3
 80021d6:	d108      	bne.n	80021ea <USART_DeInit+0x6e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80021d8:	2101      	movs	r1, #1
 80021da:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80021de:	f000 faf1 	bl	80027c4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80021e2:	2100      	movs	r1, #0
 80021e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80021e8:	e7e3      	b.n	80021b2 <USART_DeInit+0x36>
    if (USARTx == UART5)
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <USART_DeInit+0x98>)
 80021ec:	4298      	cmp	r0, r3
 80021ee:	d108      	bne.n	8002202 <USART_DeInit+0x86>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80021f0:	2101      	movs	r1, #1
 80021f2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80021f6:	f000 fae5 	bl	80027c4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80021fa:	2100      	movs	r1, #0
 80021fc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002200:	e7d7      	b.n	80021b2 <USART_DeInit+0x36>
}
 8002202:	bd08      	pop	{r3, pc}
 8002204:	40013800 	.word	0x40013800
 8002208:	40004400 	.word	0x40004400
 800220c:	40004800 	.word	0x40004800
 8002210:	40004c00 	.word	0x40004c00
 8002214:	40005000 	.word	0x40005000

08002218 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002218:	b530      	push	{r4, r5, lr}
 800221a:	460d      	mov	r5, r1
 800221c:	4604      	mov	r4, r0
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800221e:	8a03      	ldrh	r3, [r0, #16]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 8002220:	898a      	ldrh	r2, [r1, #12]
  tmpreg = USARTx->CR2;
 8002222:	b29b      	uxth	r3, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002224:	88c9      	ldrh	r1, [r1, #6]
 8002226:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800222a:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800222c:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800222e:	8983      	ldrh	r3, [r0, #12]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002230:	88a9      	ldrh	r1, [r5, #4]
 8002232:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002236:	f023 030c 	bic.w	r3, r3, #12
 800223a:	041b      	lsls	r3, r3, #16
 800223c:	0c1b      	lsrs	r3, r3, #16
 800223e:	430b      	orrs	r3, r1
 8002240:	8929      	ldrh	r1, [r5, #8]
{
 8002242:	b087      	sub	sp, #28
 8002244:	430b      	orrs	r3, r1
 8002246:	8969      	ldrh	r1, [r5, #10]
 8002248:	430b      	orrs	r3, r1
 800224a:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800224c:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800224e:	8a83      	ldrh	r3, [r0, #20]
 8002250:	b29b      	uxth	r3, r3
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002256:	4313      	orrs	r3, r2
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002258:	8283      	strh	r3, [r0, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800225a:	a801      	add	r0, sp, #4
 800225c:	f000 fa40 	bl	80026e0 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002260:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8002264:	4914      	ldr	r1, [pc, #80]	; (80022b8 <USART_Init+0xa0>)
 8002266:	428c      	cmp	r4, r1
 8002268:	bf08      	it	eq
 800226a:	4613      	moveq	r3, r2
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800226c:	2219      	movs	r2, #25
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800226e:	89a1      	ldrh	r1, [r4, #12]
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002270:	4353      	muls	r3, r2
 8002272:	682a      	ldr	r2, [r5, #0]
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002274:	040d      	lsls	r5, r1, #16
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002276:	bf4c      	ite	mi
 8002278:	0052      	lslmi	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800227a:	0092      	lslpl	r2, r2, #2
  }
  tmpreg = (integerdivider / 100) << 4;
 800227c:	2164      	movs	r1, #100	; 0x64
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800227e:	fbb3 f3f2 	udiv	r3, r3, r2
  tmpreg = (integerdivider / 100) << 4;
 8002282:	fbb3 f0f1 	udiv	r0, r3, r1
 8002286:	fb01 3310 	mls	r3, r1, r0, r3
 800228a:	0102      	lsls	r2, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800228c:	89a0      	ldrh	r0, [r4, #12]
 800228e:	0400      	lsls	r0, r0, #16
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002290:	bf4b      	itete	mi
 8002292:	00db      	lslmi	r3, r3, #3
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002294:	011b      	lslpl	r3, r3, #4
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002296:	3332      	addmi	r3, #50	; 0x32
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002298:	3332      	addpl	r3, #50	; 0x32
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800229a:	bf4b      	itete	mi
 800229c:	fbb3 f3f1 	udivmi	r3, r3, r1
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80022a0:	fbb3 f3f1 	udivpl	r3, r3, r1
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80022a4:	f003 0307 	andmi.w	r3, r3, #7
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80022a8:	f003 030f 	andpl.w	r3, r3, #15
 80022ac:	4313      	orrs	r3, r2
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	8123      	strh	r3, [r4, #8]
}
 80022b2:	b007      	add	sp, #28
 80022b4:	bd30      	pop	{r4, r5, pc}
 80022b6:	bf00      	nop
 80022b8:	40013800 	.word	0x40013800

080022bc <USART_StructInit>:
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80022bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022c0:	2300      	movs	r3, #0
 80022c2:	e9c0 2300 	strd	r2, r3, [r0]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80022c6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80022ca:	8183      	strh	r3, [r0, #12]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80022cc:	6082      	str	r2, [r0, #8]
}
 80022ce:	4770      	bx	lr

080022d0 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80022d0:	880b      	ldrh	r3, [r1, #0]
{
 80022d2:	b510      	push	{r4, lr}
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80022d4:	884c      	ldrh	r4, [r1, #2]
  tmpreg = USARTx->CR2;
 80022d6:	8a02      	ldrh	r2, [r0, #16]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80022d8:	4323      	orrs	r3, r4
 80022da:	888c      	ldrh	r4, [r1, #4]
 80022dc:	88c9      	ldrh	r1, [r1, #6]
  tmpreg = USARTx->CR2;
 80022de:	b292      	uxth	r2, r2
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80022e0:	4323      	orrs	r3, r4
 80022e2:	430b      	orrs	r3, r1
 80022e4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80022e8:	4313      	orrs	r3, r2
 80022ea:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80022ec:	8203      	strh	r3, [r0, #16]
}
 80022ee:	bd10      	pop	{r4, pc}

080022f0 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80022f0:	2300      	movs	r3, #0
 80022f2:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80022f4:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80022f6:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80022f8:	80c3      	strh	r3, [r0, #6]
}
 80022fa:	4770      	bx	lr

080022fc <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80022fc:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 80022fe:	b121      	cbz	r1, 800230a <USART_Cmd+0xe>
    USARTx->CR1 |= CR1_UE_Set;
 8002300:	b29b      	uxth	r3, r3
 8002302:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8002306:	8183      	strh	r3, [r0, #12]
  }
}
 8002308:	4770      	bx	lr
    USARTx->CR1 &= CR1_UE_Reset;
 800230a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800230e:	041b      	lsls	r3, r3, #16
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	e7f8      	b.n	8002306 <USART_Cmd+0xa>

08002314 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8002314:	2301      	movs	r3, #1
{
 8002316:	b510      	push	{r4, lr}
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002318:	f3c1 1442 	ubfx	r4, r1, #5, #3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800231c:	429c      	cmp	r4, r3
  itpos = USART_IT & IT_Mask;
 800231e:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 8002322:	fa03 f101 	lsl.w	r1, r3, r1
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002326:	d105      	bne.n	8002334 <USART_ITConfig+0x20>
  {
    usartxbase += 0x0C;
 8002328:	300c      	adds	r0, #12
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800232a:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 800232c:	b13a      	cbz	r2, 800233e <USART_ITConfig+0x2a>
    *(__IO uint32_t*)usartxbase  |= itmask;
 800232e:	4319      	orrs	r1, r3
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002330:	6001      	str	r1, [r0, #0]
  }
}
 8002332:	bd10      	pop	{r4, pc}
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002334:	2c02      	cmp	r4, #2
    usartxbase += 0x10;
 8002336:	bf0c      	ite	eq
 8002338:	3010      	addeq	r0, #16
    usartxbase += 0x14; 
 800233a:	3014      	addne	r0, #20
 800233c:	e7f5      	b.n	800232a <USART_ITConfig+0x16>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800233e:	ea23 0101 	bic.w	r1, r3, r1
 8002342:	e7f5      	b.n	8002330 <USART_ITConfig+0x1c>

08002344 <USART_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002344:	8a83      	ldrh	r3, [r0, #20]
 8002346:	b29b      	uxth	r3, r3
  if (NewState != DISABLE)
 8002348:	b112      	cbz	r2, 8002350 <USART_DMACmd+0xc>
    USARTx->CR3 |= USART_DMAReq;
 800234a:	4319      	orrs	r1, r3
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800234c:	8281      	strh	r1, [r0, #20]
  }
}
 800234e:	4770      	bx	lr
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002350:	ea23 0101 	bic.w	r1, r3, r1
 8002354:	e7fa      	b.n	800234c <USART_DMACmd+0x8>

08002356 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 8002356:	8a03      	ldrh	r3, [r0, #16]
 8002358:	f023 030f 	bic.w	r3, r3, #15
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	0c1b      	lsrs	r3, r3, #16
 8002360:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8002362:	8a03      	ldrh	r3, [r0, #16]
 8002364:	b29b      	uxth	r3, r3
 8002366:	430b      	orrs	r3, r1
 8002368:	8203      	strh	r3, [r0, #16]
}
 800236a:	4770      	bx	lr

0800236c <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 800236c:	8983      	ldrh	r3, [r0, #12]
 800236e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002372:	041b      	lsls	r3, r3, #16
 8002374:	0c1b      	lsrs	r3, r3, #16
 8002376:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8002378:	8983      	ldrh	r3, [r0, #12]
 800237a:	b29b      	uxth	r3, r3
 800237c:	430b      	orrs	r3, r1
 800237e:	8183      	strh	r3, [r0, #12]
}
 8002380:	4770      	bx	lr

08002382 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8002382:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 8002384:	b121      	cbz	r1, 8002390 <USART_ReceiverWakeUpCmd+0xe>
    USARTx->CR1 |= CR1_RWU_Set;
 8002386:	b29b      	uxth	r3, r3
 8002388:	f043 0302 	orr.w	r3, r3, #2
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 800238c:	8183      	strh	r3, [r0, #12]
  }
}
 800238e:	4770      	bx	lr
    USARTx->CR1 &= CR1_RWU_Reset;
 8002390:	f023 0302 	bic.w	r3, r3, #2
 8002394:	041b      	lsls	r3, r3, #16
 8002396:	0c1b      	lsrs	r3, r3, #16
 8002398:	e7f8      	b.n	800238c <USART_ReceiverWakeUpCmd+0xa>

0800239a <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 800239a:	8a03      	ldrh	r3, [r0, #16]
 800239c:	f023 0320 	bic.w	r3, r3, #32
 80023a0:	041b      	lsls	r3, r3, #16
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 80023a6:	8a03      	ldrh	r3, [r0, #16]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	430b      	orrs	r3, r1
 80023ac:	8203      	strh	r3, [r0, #16]
}
 80023ae:	4770      	bx	lr

080023b0 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 80023b0:	8a03      	ldrh	r3, [r0, #16]
  if (NewState != DISABLE)
 80023b2:	b121      	cbz	r1, 80023be <USART_LINCmd+0xe>
    USARTx->CR2 |= CR2_LINEN_Set;
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 80023ba:	8203      	strh	r3, [r0, #16]
  }
}
 80023bc:	4770      	bx	lr
    USARTx->CR2 &= CR2_LINEN_Reset;
 80023be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023c2:	041b      	lsls	r3, r3, #16
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	e7f8      	b.n	80023ba <USART_LINCmd+0xa>

080023c8 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80023c8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80023cc:	8081      	strh	r1, [r0, #4]
}
 80023ce:	4770      	bx	lr

080023d0 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80023d0:	8880      	ldrh	r0, [r0, #4]
}
 80023d2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80023d6:	4770      	bx	lr

080023d8 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 80023d8:	8983      	ldrh	r3, [r0, #12]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	8183      	strh	r3, [r0, #12]
}
 80023e2:	4770      	bx	lr

080023e4 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 80023e4:	8b02      	ldrh	r2, [r0, #24]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	8302      	strh	r2, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 80023ea:	8b03      	ldrh	r3, [r0, #24]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023f2:	8303      	strh	r3, [r0, #24]
}
 80023f4:	4770      	bx	lr

080023f6 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 80023f6:	8b02      	ldrh	r2, [r0, #24]
 80023f8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80023fc:	8302      	strh	r2, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80023fe:	8b03      	ldrh	r3, [r0, #24]
 8002400:	b29b      	uxth	r3, r3
 8002402:	430b      	orrs	r3, r1
 8002404:	8303      	strh	r3, [r0, #24]
}
 8002406:	4770      	bx	lr

08002408 <USART_SmartCardCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 8002408:	8a83      	ldrh	r3, [r0, #20]
  if (NewState != DISABLE)
 800240a:	b121      	cbz	r1, 8002416 <USART_SmartCardCmd+0xe>
    USARTx->CR3 |= CR3_SCEN_Set;
 800240c:	b29b      	uxth	r3, r3
 800240e:	f043 0320 	orr.w	r3, r3, #32
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 8002412:	8283      	strh	r3, [r0, #20]
  }
}
 8002414:	4770      	bx	lr
    USARTx->CR3 &= CR3_SCEN_Reset;
 8002416:	f023 0320 	bic.w	r3, r3, #32
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	0c1b      	lsrs	r3, r3, #16
 800241e:	e7f8      	b.n	8002412 <USART_SmartCardCmd+0xa>

08002420 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8002420:	8a83      	ldrh	r3, [r0, #20]
  if (NewState != DISABLE)
 8002422:	b121      	cbz	r1, 800242e <USART_SmartCardNACKCmd+0xe>
    USARTx->CR3 |= CR3_NACK_Set;
 8002424:	b29b      	uxth	r3, r3
 8002426:	f043 0310 	orr.w	r3, r3, #16
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 800242a:	8283      	strh	r3, [r0, #20]
  }
}
 800242c:	4770      	bx	lr
    USARTx->CR3 &= CR3_NACK_Reset;
 800242e:	f023 0310 	bic.w	r3, r3, #16
 8002432:	041b      	lsls	r3, r3, #16
 8002434:	0c1b      	lsrs	r3, r3, #16
 8002436:	e7f8      	b.n	800242a <USART_SmartCardNACKCmd+0xa>

08002438 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 8002438:	8a83      	ldrh	r3, [r0, #20]
  if (NewState != DISABLE)
 800243a:	b121      	cbz	r1, 8002446 <USART_HalfDuplexCmd+0xe>
    USARTx->CR3 |= CR3_HDSEL_Set;
 800243c:	b29b      	uxth	r3, r3
 800243e:	f043 0308 	orr.w	r3, r3, #8
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 8002442:	8283      	strh	r3, [r0, #20]
  }
}
 8002444:	4770      	bx	lr
    USARTx->CR3 &= CR3_HDSEL_Reset;
 8002446:	f023 0308 	bic.w	r3, r3, #8
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	0c1b      	lsrs	r3, r3, #16
 800244e:	e7f8      	b.n	8002442 <USART_HalfDuplexCmd+0xa>

08002450 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
 8002450:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 8002452:	b131      	cbz	r1, 8002462 <USART_OverSampling8Cmd+0x12>
    USARTx->CR1 |= CR1_OVER8_Set;
 8002454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800245c:	b29b      	uxth	r3, r3
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
 800245e:	8183      	strh	r3, [r0, #12]
  }
}
 8002460:	4770      	bx	lr
    USARTx->CR1 &= CR1_OVER8_Reset;
 8002462:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002466:	e7fa      	b.n	800245e <USART_OverSampling8Cmd+0xe>

08002468 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
 8002468:	8a83      	ldrh	r3, [r0, #20]
  if (NewState != DISABLE)
 800246a:	b121      	cbz	r1, 8002476 <USART_OneBitMethodCmd+0xe>
    USARTx->CR3 |= CR3_ONEBITE_Set;
 800246c:	b29b      	uxth	r3, r3
 800246e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
 8002472:	8283      	strh	r3, [r0, #20]
  }
}
 8002474:	4770      	bx	lr
    USARTx->CR3 &= CR3_ONEBITE_Reset;
 8002476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800247a:	041b      	lsls	r3, r3, #16
 800247c:	0c1b      	lsrs	r3, r3, #16
 800247e:	e7f8      	b.n	8002472 <USART_OneBitMethodCmd+0xa>

08002480 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 8002480:	8a83      	ldrh	r3, [r0, #20]
 8002482:	f023 0304 	bic.w	r3, r3, #4
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	0c1b      	lsrs	r3, r3, #16
 800248a:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 800248c:	8a83      	ldrh	r3, [r0, #20]
 800248e:	b29b      	uxth	r3, r3
 8002490:	430b      	orrs	r3, r1
 8002492:	8283      	strh	r3, [r0, #20]
}
 8002494:	4770      	bx	lr

08002496 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8002496:	8a83      	ldrh	r3, [r0, #20]
  if (NewState != DISABLE)
 8002498:	b121      	cbz	r1, 80024a4 <USART_IrDACmd+0xe>
    USARTx->CR3 |= CR3_IREN_Set;
 800249a:	b29b      	uxth	r3, r3
 800249c:	f043 0302 	orr.w	r3, r3, #2
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 80024a0:	8283      	strh	r3, [r0, #20]
  }
}
 80024a2:	4770      	bx	lr
    USARTx->CR3 &= CR3_IREN_Reset;
 80024a4:	f023 0302 	bic.w	r3, r3, #2
 80024a8:	041b      	lsls	r3, r3, #16
 80024aa:	0c1b      	lsrs	r3, r3, #16
 80024ac:	e7f8      	b.n	80024a0 <USART_IrDACmd+0xa>

080024ae <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80024ae:	8803      	ldrh	r3, [r0, #0]
 80024b0:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80024b2:	bf14      	ite	ne
 80024b4:	2001      	movne	r0, #1
 80024b6:	2000      	moveq	r0, #0
 80024b8:	4770      	bx	lr

080024ba <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 80024ba:	43c9      	mvns	r1, r1
 80024bc:	b289      	uxth	r1, r1
 80024be:	8001      	strh	r1, [r0, #0]
}
 80024c0:	4770      	bx	lr

080024c2 <USART_GetITStatus>:
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
 80024c2:	2301      	movs	r3, #1
{
 80024c4:	b510      	push	{r4, lr}
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80024c6:	f3c1 1442 	ubfx	r4, r1, #5, #3
{
 80024ca:	4602      	mov	r2, r0
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80024cc:	429c      	cmp	r4, r3
  itmask = USART_IT & IT_Mask;
 80024ce:	f001 001f 	and.w	r0, r1, #31
  itmask = (uint32_t)0x01 << itmask;
 80024d2:	fa03 f000 	lsl.w	r0, r3, r0
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80024d6:	d10e      	bne.n	80024f6 <USART_GetITStatus+0x34>
  {
    itmask &= USARTx->CR1;
 80024d8:	8993      	ldrh	r3, [r2, #12]
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 80024da:	8812      	ldrh	r2, [r2, #0]
    itmask &= USARTx->CR3;
 80024dc:	b29b      	uxth	r3, r3
 80024de:	4018      	ands	r0, r3
  bitpos &= USARTx->SR;
 80024e0:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80024e2:	b138      	cbz	r0, 80024f4 <USART_GetITStatus+0x32>
  bitpos = (uint32_t)0x01 << bitpos;
 80024e4:	2301      	movs	r3, #1
  bitpos = USART_IT >> 0x08;
 80024e6:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 80024e8:	fa03 f101 	lsl.w	r1, r3, r1
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80024ec:	420a      	tst	r2, r1
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 80024ee:	bf14      	ite	ne
 80024f0:	4618      	movne	r0, r3
 80024f2:	2000      	moveq	r0, #0
  }
  
  return bitstatus;  
}
 80024f4:	bd10      	pop	{r4, pc}
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80024f6:	2c02      	cmp	r4, #2
    itmask &= USARTx->CR2;
 80024f8:	bf0c      	ite	eq
 80024fa:	8a13      	ldrheq	r3, [r2, #16]
    itmask &= USARTx->CR3;
 80024fc:	8a93      	ldrhne	r3, [r2, #20]
 80024fe:	e7ec      	b.n	80024da <USART_GetITStatus+0x18>

08002500 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002500:	2301      	movs	r3, #1
 8002502:	0a09      	lsrs	r1, r1, #8
 8002504:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8002506:	43db      	mvns	r3, r3
 8002508:	b29b      	uxth	r3, r3
 800250a:	8003      	strh	r3, [r0, #0]
}
 800250c:	4770      	bx	lr
	...

08002510 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <RCC_DeInit+0x38>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	4a0b      	ldr	r2, [pc, #44]	; (800254c <RCC_DeInit+0x3c>)
 800251e:	400a      	ands	r2, r1
 8002520:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002528:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800252c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002534:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800253c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800253e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002542:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	f8ff0000 	.word	0xf8ff0000

08002550 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8002550:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <RCC_HSEConfig+0x34>)
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8002552:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  RCC->CR &= CR_HSEON_Reset;
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800255c:	601a      	str	r2, [r3, #0]
  RCC->CR &= CR_HSEBYP_Reset;
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002564:	601a      	str	r2, [r3, #0]
  switch(RCC_HSE)
 8002566:	d003      	beq.n	8002570 <RCC_HSEConfig+0x20>
 8002568:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800256c:	d005      	beq.n	800257a <RCC_HSEConfig+0x2a>
 800256e:	4770      	bx	lr
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8002576:	601a      	str	r2, [r3, #0]
      break;
      
    default:
      break;
  }
}
 8002578:	4770      	bx	lr
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8002580:	e7f9      	b.n	8002576 <RCC_HSEConfig+0x26>
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000

08002588 <RCC_WaitForHSEStartUp>:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t StartUpCounter = 0;
 8002588:	2300      	movs	r3, #0
{
 800258a:	b082      	sub	sp, #8

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800258c:	4909      	ldr	r1, [pc, #36]	; (80025b4 <RCC_WaitForHSEStartUp+0x2c>)
  __IO uint32_t StartUpCounter = 0;
 800258e:	9301      	str	r3, [sp, #4]
    statusreg = RCC->CR;
 8002590:	680b      	ldr	r3, [r1, #0]
    StartUpCounter++;  
 8002592:	9a01      	ldr	r2, [sp, #4]
 8002594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002598:	3201      	adds	r2, #1
 800259a:	9201      	str	r2, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800259c:	9a01      	ldr	r2, [sp, #4]
 800259e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80025a2:	d001      	beq.n	80025a8 <RCC_WaitForHSEStartUp+0x20>
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f3      	beq.n	8002590 <RCC_WaitForHSEStartUp+0x8>
    statusreg = RCC->CR;
 80025a8:	6808      	ldr	r0, [r1, #0]
}
 80025aa:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80025ae:	b002      	add	sp, #8
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000

080025b8 <RCC_AdjustHSICalibrationValue>:
  tmpreg = RCC->CR;
 80025b8:	4a03      	ldr	r2, [pc, #12]	; (80025c8 <RCC_AdjustHSICalibrationValue+0x10>)
 80025ba:	6813      	ldr	r3, [r2, #0]
  tmpreg &= CR_HSITRIM_Mask;
 80025bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80025c0:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
  RCC->CR = tmpreg;
 80025c4:	6013      	str	r3, [r2, #0]
}
 80025c6:	4770      	bx	lr
 80025c8:	40021000 	.word	0x40021000

080025cc <RCC_HSICmd>:
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80025cc:	4b01      	ldr	r3, [pc, #4]	; (80025d4 <RCC_HSICmd+0x8>)
 80025ce:	6018      	str	r0, [r3, #0]
}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	42420000 	.word	0x42420000

080025d8 <RCC_PLLConfig>:
  tmpreg = RCC->CFGR;
 80025d8:	4a03      	ldr	r2, [pc, #12]	; (80025e8 <RCC_PLLConfig+0x10>)
 80025da:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_PLL_Mask;
 80025dc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80025e0:	430b      	orrs	r3, r1
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80025e2:	4303      	orrs	r3, r0
  RCC->CFGR = tmpreg;
 80025e4:	6053      	str	r3, [r2, #4]
}
 80025e6:	4770      	bx	lr
 80025e8:	40021000 	.word	0x40021000

080025ec <RCC_PLLCmd>:
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80025ec:	4b01      	ldr	r3, [pc, #4]	; (80025f4 <RCC_PLLCmd+0x8>)
 80025ee:	6618      	str	r0, [r3, #96]	; 0x60
}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	42420000 	.word	0x42420000

080025f8 <RCC_SYSCLKConfig>:
  tmpreg = RCC->CFGR;
 80025f8:	4a03      	ldr	r2, [pc, #12]	; (8002608 <RCC_SYSCLKConfig+0x10>)
 80025fa:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_SW_Mask;
 80025fc:	f023 0303 	bic.w	r3, r3, #3
  tmpreg |= RCC_SYSCLKSource;
 8002600:	4303      	orrs	r3, r0
  RCC->CFGR = tmpreg;
 8002602:	6053      	str	r3, [r2, #4]
}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000

0800260c <RCC_GetSYSCLKSource>:
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 800260c:	4b02      	ldr	r3, [pc, #8]	; (8002618 <RCC_GetSYSCLKSource+0xc>)
 800260e:	6858      	ldr	r0, [r3, #4]
}
 8002610:	f000 000c 	and.w	r0, r0, #12
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000

0800261c <RCC_HCLKConfig>:
  tmpreg = RCC->CFGR;
 800261c:	4a03      	ldr	r2, [pc, #12]	; (800262c <RCC_HCLKConfig+0x10>)
 800261e:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8002620:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpreg |= RCC_SYSCLK;
 8002624:	4303      	orrs	r3, r0
  RCC->CFGR = tmpreg;
 8002626:	6053      	str	r3, [r2, #4]
}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000

08002630 <RCC_PCLK1Config>:
  tmpreg = RCC->CFGR;
 8002630:	4a03      	ldr	r2, [pc, #12]	; (8002640 <RCC_PCLK1Config+0x10>)
 8002632:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8002634:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  tmpreg |= RCC_HCLK;
 8002638:	4303      	orrs	r3, r0
  RCC->CFGR = tmpreg;
 800263a:	6053      	str	r3, [r2, #4]
}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000

08002644 <RCC_PCLK2Config>:
  tmpreg = RCC->CFGR;
 8002644:	4a03      	ldr	r2, [pc, #12]	; (8002654 <RCC_PCLK2Config+0x10>)
 8002646:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8002648:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  tmpreg |= RCC_HCLK << 3;
 800264c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
  RCC->CFGR = tmpreg;
 8002650:	6053      	str	r3, [r2, #4]
}
 8002652:	4770      	bx	lr
 8002654:	40021000 	.word	0x40021000

08002658 <RCC_ITConfig>:
  if (NewState != DISABLE)
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <RCC_ITConfig+0x14>)
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800265a:	7a5a      	ldrb	r2, [r3, #9]
  if (NewState != DISABLE)
 800265c:	b111      	cbz	r1, 8002664 <RCC_ITConfig+0xc>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800265e:	4310      	orrs	r0, r2
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8002660:	7258      	strb	r0, [r3, #9]
}
 8002662:	4770      	bx	lr
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8002664:	ea22 0000 	bic.w	r0, r2, r0
 8002668:	e7fa      	b.n	8002660 <RCC_ITConfig+0x8>
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000

08002670 <RCC_USBCLKConfig>:
  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8002670:	4b01      	ldr	r3, [pc, #4]	; (8002678 <RCC_USBCLKConfig+0x8>)
 8002672:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
}
 8002676:	4770      	bx	lr
 8002678:	42420000 	.word	0x42420000

0800267c <RCC_ADCCLKConfig>:
  tmpreg = RCC->CFGR;
 800267c:	4a03      	ldr	r2, [pc, #12]	; (800268c <RCC_ADCCLKConfig+0x10>)
 800267e:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8002680:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  tmpreg |= RCC_PCLK2;
 8002684:	4303      	orrs	r3, r0
  RCC->CFGR = tmpreg;
 8002686:	6053      	str	r3, [r2, #4]
}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000

08002690 <RCC_LSEConfig>:
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8002690:	2200      	movs	r2, #0
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <RCC_LSEConfig+0x24>)
  switch(RCC_LSE)
 8002694:	2801      	cmp	r0, #1
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8002696:	f883 2020 	strb.w	r2, [r3, #32]
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800269a:	f883 2020 	strb.w	r2, [r3, #32]
  switch(RCC_LSE)
 800269e:	d002      	beq.n	80026a6 <RCC_LSEConfig+0x16>
 80026a0:	2804      	cmp	r0, #4
 80026a2:	d003      	beq.n	80026ac <RCC_LSEConfig+0x1c>
 80026a4:	4770      	bx	lr
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80026a6:	f883 0020 	strb.w	r0, [r3, #32]
      break;
 80026aa:	4770      	bx	lr
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80026ac:	2205      	movs	r2, #5
 80026ae:	f883 2020 	strb.w	r2, [r3, #32]
}
 80026b2:	4770      	bx	lr
 80026b4:	40021000 	.word	0x40021000

080026b8 <RCC_LSICmd>:
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80026b8:	4b01      	ldr	r3, [pc, #4]	; (80026c0 <RCC_LSICmd+0x8>)
 80026ba:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
 80026be:	4770      	bx	lr
 80026c0:	42420000 	.word	0x42420000

080026c4 <RCC_RTCCLKConfig>:
  RCC->BDCR |= RCC_RTCCLKSource;
 80026c4:	4a02      	ldr	r2, [pc, #8]	; (80026d0 <RCC_RTCCLKConfig+0xc>)
 80026c6:	6a13      	ldr	r3, [r2, #32]
 80026c8:	4303      	orrs	r3, r0
 80026ca:	6213      	str	r3, [r2, #32]
}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000

080026d4 <RCC_RTCCLKCmd>:
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80026d4:	4b01      	ldr	r3, [pc, #4]	; (80026dc <RCC_RTCCLKCmd+0x8>)
 80026d6:	f8c3 043c 	str.w	r0, [r3, #1084]	; 0x43c
}
 80026da:	4770      	bx	lr
 80026dc:	42420000 	.word	0x42420000

080026e0 <RCC_GetClocksFreq>:
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80026e0:	4a1b      	ldr	r2, [pc, #108]	; (8002750 <RCC_GetClocksFreq+0x70>)
{
 80026e2:	b510      	push	{r4, lr}
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80026e4:	6853      	ldr	r3, [r2, #4]
 80026e6:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d01f      	beq.n	800272e <RCC_GetClocksFreq+0x4e>
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80026ee:	4b19      	ldr	r3, [pc, #100]	; (8002754 <RCC_GetClocksFreq+0x74>)
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80026f0:	6003      	str	r3, [r0, #0]
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80026f2:	6853      	ldr	r3, [r2, #4]
  presc = APBAHBPrescTable[tmp];
 80026f4:	4c18      	ldr	r4, [pc, #96]	; (8002758 <RCC_GetClocksFreq+0x78>)
  tmp = tmp >> 4;
 80026f6:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 80026fa:	5ce1      	ldrb	r1, [r4, r3]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80026fc:	6803      	ldr	r3, [r0, #0]
 80026fe:	40cb      	lsrs	r3, r1
 8002700:	6043      	str	r3, [r0, #4]
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8002702:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 8;
 8002704:	f3c1 2102 	ubfx	r1, r1, #8, #3
  presc = APBAHBPrescTable[tmp];
 8002708:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800270a:	fa23 f101 	lsr.w	r1, r3, r1
 800270e:	6081      	str	r1, [r0, #8]
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8002710:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 11;
 8002712:	f3c1 21c2 	ubfx	r1, r1, #11, #3
  presc = APBAHBPrescTable[tmp];
 8002716:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002718:	40cb      	lsrs	r3, r1
 800271a:	60c3      	str	r3, [r0, #12]
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800271c:	6852      	ldr	r2, [r2, #4]
  presc = ADCPrescTable[tmp];
 800271e:	490f      	ldr	r1, [pc, #60]	; (800275c <RCC_GetClocksFreq+0x7c>)
  tmp = tmp >> 14;
 8002720:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8002724:	5c8a      	ldrb	r2, [r1, r2]
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8002726:	fbb3 f3f2 	udiv	r3, r3, r2
 800272a:	6103      	str	r3, [r0, #16]
}
 800272c:	bd10      	pop	{r4, pc}
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800272e:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8002730:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 8002732:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 8002736:	03cc      	lsls	r4, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 8002738:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 800273c:	d402      	bmi.n	8002744 <RCC_GetClocksFreq+0x64>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 800273e:	4908      	ldr	r1, [pc, #32]	; (8002760 <RCC_GetClocksFreq+0x80>)
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8002740:	434b      	muls	r3, r1
 8002742:	e7d5      	b.n	80026f0 <RCC_GetClocksFreq+0x10>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8002744:	6851      	ldr	r1, [r2, #4]
 8002746:	0389      	lsls	r1, r1, #14
 8002748:	d4f9      	bmi.n	800273e <RCC_GetClocksFreq+0x5e>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800274a:	4902      	ldr	r1, [pc, #8]	; (8002754 <RCC_GetClocksFreq+0x74>)
 800274c:	e7f8      	b.n	8002740 <RCC_GetClocksFreq+0x60>
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000
 8002754:	007a1200 	.word	0x007a1200
 8002758:	20000450 	.word	0x20000450
 800275c:	2000044c 	.word	0x2000044c
 8002760:	003d0900 	.word	0x003d0900

08002764 <RCC_AHBPeriphClockCmd>:
  if (NewState != DISABLE)
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <RCC_AHBPeriphClockCmd+0x14>)
    RCC->AHBENR |= RCC_AHBPeriph;
 8002766:	695a      	ldr	r2, [r3, #20]
  if (NewState != DISABLE)
 8002768:	b111      	cbz	r1, 8002770 <RCC_AHBPeriphClockCmd+0xc>
    RCC->AHBENR |= RCC_AHBPeriph;
 800276a:	4310      	orrs	r0, r2
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800276c:	6158      	str	r0, [r3, #20]
}
 800276e:	4770      	bx	lr
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8002770:	ea22 0000 	bic.w	r0, r2, r0
 8002774:	e7fa      	b.n	800276c <RCC_AHBPeriphClockCmd+0x8>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000

0800277c <RCC_APB2PeriphClockCmd>:
  if (NewState != DISABLE)
 800277c:	4b04      	ldr	r3, [pc, #16]	; (8002790 <RCC_APB2PeriphClockCmd+0x14>)
    RCC->APB2ENR |= RCC_APB2Periph;
 800277e:	699a      	ldr	r2, [r3, #24]
  if (NewState != DISABLE)
 8002780:	b111      	cbz	r1, 8002788 <RCC_APB2PeriphClockCmd+0xc>
    RCC->APB2ENR |= RCC_APB2Periph;
 8002782:	4310      	orrs	r0, r2
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002784:	6198      	str	r0, [r3, #24]
}
 8002786:	4770      	bx	lr
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002788:	ea22 0000 	bic.w	r0, r2, r0
 800278c:	e7fa      	b.n	8002784 <RCC_APB2PeriphClockCmd+0x8>
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000

08002794 <RCC_APB1PeriphClockCmd>:
  if (NewState != DISABLE)
 8002794:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <RCC_APB1PeriphClockCmd+0x14>)
    RCC->APB1ENR |= RCC_APB1Periph;
 8002796:	69da      	ldr	r2, [r3, #28]
  if (NewState != DISABLE)
 8002798:	b111      	cbz	r1, 80027a0 <RCC_APB1PeriphClockCmd+0xc>
    RCC->APB1ENR |= RCC_APB1Periph;
 800279a:	4310      	orrs	r0, r2
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800279c:	61d8      	str	r0, [r3, #28]
}
 800279e:	4770      	bx	lr
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80027a0:	ea22 0000 	bic.w	r0, r2, r0
 80027a4:	e7fa      	b.n	800279c <RCC_APB1PeriphClockCmd+0x8>
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000

080027ac <RCC_APB2PeriphResetCmd>:
  if (NewState != DISABLE)
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <RCC_APB2PeriphResetCmd+0x14>)
    RCC->APB2RSTR |= RCC_APB2Periph;
 80027ae:	68da      	ldr	r2, [r3, #12]
  if (NewState != DISABLE)
 80027b0:	b111      	cbz	r1, 80027b8 <RCC_APB2PeriphResetCmd+0xc>
    RCC->APB2RSTR |= RCC_APB2Periph;
 80027b2:	4310      	orrs	r0, r2
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80027b4:	60d8      	str	r0, [r3, #12]
}
 80027b6:	4770      	bx	lr
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80027b8:	ea22 0000 	bic.w	r0, r2, r0
 80027bc:	e7fa      	b.n	80027b4 <RCC_APB2PeriphResetCmd+0x8>
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000

080027c4 <RCC_APB1PeriphResetCmd>:
  if (NewState != DISABLE)
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <RCC_APB1PeriphResetCmd+0x14>)
    RCC->APB1RSTR |= RCC_APB1Periph;
 80027c6:	691a      	ldr	r2, [r3, #16]
  if (NewState != DISABLE)
 80027c8:	b111      	cbz	r1, 80027d0 <RCC_APB1PeriphResetCmd+0xc>
    RCC->APB1RSTR |= RCC_APB1Periph;
 80027ca:	4310      	orrs	r0, r2
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80027cc:	6118      	str	r0, [r3, #16]
}
 80027ce:	4770      	bx	lr
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80027d0:	ea22 0000 	bic.w	r0, r2, r0
 80027d4:	e7fa      	b.n	80027cc <RCC_APB1PeriphResetCmd+0x8>
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000

080027dc <RCC_BackupResetCmd>:
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80027dc:	4b01      	ldr	r3, [pc, #4]	; (80027e4 <RCC_BackupResetCmd+0x8>)
 80027de:	f8c3 0440 	str.w	r0, [r3, #1088]	; 0x440
}
 80027e2:	4770      	bx	lr
 80027e4:	42420000 	.word	0x42420000

080027e8 <RCC_ClockSecuritySystemCmd>:
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80027e8:	4b01      	ldr	r3, [pc, #4]	; (80027f0 <RCC_ClockSecuritySystemCmd+0x8>)
 80027ea:	64d8      	str	r0, [r3, #76]	; 0x4c
}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	42420000 	.word	0x42420000

080027f4 <RCC_MCOConfig>:
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 80027f4:	4b01      	ldr	r3, [pc, #4]	; (80027fc <RCC_MCOConfig+0x8>)
 80027f6:	71d8      	strb	r0, [r3, #7]
}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000

08002800 <RCC_GetFlagStatus>:
  tmp = RCC_FLAG >> 5;
 8002800:	0942      	lsrs	r2, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8002802:	2a01      	cmp	r2, #1
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <RCC_GetFlagStatus+0x24>)
 8002806:	d107      	bne.n	8002818 <RCC_GetFlagStatus+0x18>
    statusreg = RCC->CR;
 8002808:	681b      	ldr	r3, [r3, #0]
  {
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 800280a:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800280e:	fa23 f000 	lsr.w	r0, r3, r0
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8002812:	f000 0001 	and.w	r0, r0, #1
 8002816:	4770      	bx	lr
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8002818:	2a02      	cmp	r2, #2
    statusreg = RCC->BDCR;
 800281a:	bf0c      	ite	eq
 800281c:	6a1b      	ldreq	r3, [r3, #32]
    statusreg = RCC->CSR;
 800281e:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 8002820:	e7f3      	b.n	800280a <RCC_GetFlagStatus+0xa>
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000

08002828 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8002828:	4a02      	ldr	r2, [pc, #8]	; (8002834 <RCC_ClearFlag+0xc>)
 800282a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800282c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002830:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002832:	4770      	bx	lr
 8002834:	40021000 	.word	0x40021000

08002838 <RCC_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <RCC_GetITStatus+0x10>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4218      	tst	r0, r3
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 800283e:	bf14      	ite	ne
 8002840:	2001      	movne	r0, #1
 8002842:	2000      	moveq	r0, #0
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000

0800284c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800284c:	4b01      	ldr	r3, [pc, #4]	; (8002854 <RCC_ClearITPendingBit+0x8>)
 800284e:	7298      	strb	r0, [r3, #10]
}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000

08002858 <Delay>:
 */
// #include "stm32f4xx.h"
#include "stm32f10x.h"
void Delay(__IO uint32_t nCount);

void Delay(__IO uint32_t nCount) {
 8002858:	b082      	sub	sp, #8
 800285a:	9001      	str	r0, [sp, #4]
  while (nCount--) {
 800285c:	9b01      	ldr	r3, [sp, #4]
 800285e:	1e5a      	subs	r2, r3, #1
 8002860:	9201      	str	r2, [sp, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1fa      	bne.n	800285c <Delay+0x4>
  }
}
 8002866:	b002      	add	sp, #8
 8002868:	4770      	bx	lr
	...

0800286c <main>:

int main() {
 800286c:	b507      	push	{r0, r1, r2, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800286e:	2101      	movs	r1, #1
 8002870:	2004      	movs	r0, #4
 8002872:	f7ff ff83 	bl	800277c <RCC_APB2PeriphClockCmd>
  // RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002876:	f241 0403 	movw	r4, #4099	; 0x1003
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 800287a:	2302      	movs	r3, #2
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 800287c:	4815      	ldr	r0, [pc, #84]	; (80028d4 <main+0x68>)
 800287e:	a901      	add	r1, sp, #4
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 8002880:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002884:	f8ad 4006 	strh.w	r4, [sp, #6]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002888:	f7fe fd61 	bl	800134e <GPIO_Init>
  // GPIO_ResetBits(GPIOA, GPIO_Pin_1);

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 800288c:	2301      	movs	r3, #1
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800288e:	4812      	ldr	r0, [pc, #72]	; (80028d8 <main+0x6c>)
 8002890:	a901      	add	r1, sp, #4
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002892:	f8ad 4006 	strh.w	r4, [sp, #6]
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8002896:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800289a:	f7fe fd58 	bl	800134e <GPIO_Init>
  // GPIO_ResetBits(GPIOB, GPIO_Pin_0);

  while (1) {
    GPIO_SetBits(GPIOA, GPIO_Pin_1);
 800289e:	4e0d      	ldr	r6, [pc, #52]	; (80028d4 <main+0x68>)
    GPIO_SetBits(GPIOB, GPIO_Pin_0);
 80028a0:	4d0d      	ldr	r5, [pc, #52]	; (80028d8 <main+0x6c>)
    Delay(0x0FFFFF);
 80028a2:	4c0e      	ldr	r4, [pc, #56]	; (80028dc <main+0x70>)
    GPIO_SetBits(GPIOA, GPIO_Pin_1);
 80028a4:	4630      	mov	r0, r6
 80028a6:	2102      	movs	r1, #2
 80028a8:	f7fe fdbb 	bl	8001422 <GPIO_SetBits>
    GPIO_SetBits(GPIOB, GPIO_Pin_0);
 80028ac:	4628      	mov	r0, r5
 80028ae:	2101      	movs	r1, #1
 80028b0:	f7fe fdb7 	bl	8001422 <GPIO_SetBits>
    Delay(0x0FFFFF);
 80028b4:	4620      	mov	r0, r4
 80028b6:	f7ff ffcf 	bl	8002858 <Delay>
    GPIO_ResetBits(GPIOA, GPIO_Pin_1);
 80028ba:	2102      	movs	r1, #2
 80028bc:	4630      	mov	r0, r6
 80028be:	f7fe fdb2 	bl	8001426 <GPIO_ResetBits>
    GPIO_ResetBits(GPIOB, GPIO_Pin_0);
 80028c2:	4628      	mov	r0, r5
 80028c4:	2101      	movs	r1, #1
 80028c6:	f7fe fdae 	bl	8001426 <GPIO_ResetBits>
    Delay(0x0FFFFF);
 80028ca:	4620      	mov	r0, r4
 80028cc:	f7ff ffc4 	bl	8002858 <Delay>
  while (1) {
 80028d0:	e7e8      	b.n	80028a4 <main+0x38>
 80028d2:	bf00      	nop
 80028d4:	40010800 	.word	0x40010800
 80028d8:	40010c00 	.word	0x40010c00
 80028dc:	000fffff 	.word	0x000fffff

080028e0 <__EH_FRAME_BEGIN__>:
 80028e0:	00000000                                ....

080028e4 <_init>:
 80028e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e6:	bf00      	nop
 80028e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ea:	bc08      	pop	{r3}
 80028ec:	469e      	mov	lr, r3
 80028ee:	4770      	bx	lr

080028f0 <_fini>:
 80028f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f2:	bf00      	nop
 80028f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f6:	bc08      	pop	{r3}
 80028f8:	469e      	mov	lr, r3
 80028fa:	4770      	bx	lr
